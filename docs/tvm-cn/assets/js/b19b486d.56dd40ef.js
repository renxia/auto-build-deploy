"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["74012"],{34506:function(n,e,t){t.r(e),t.d(e,{default:()=>d,frontMatter:()=>o,metadata:()=>r,assets:()=>l,toc:()=>c,contentTitle:()=>i});var r=JSON.parse('{"id":"topic/vta/tutorials/autotuning_conv","title":"\u5728 VTA \u4E0A\u81EA\u52A8\u8C03\u4F18\u5377\u79EF\u7F51\u7EDC","description":"\u5355\u51FB \u6B64\u5904 \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801","source":"@site/versioned_docs/version-0.10.0/topic/vta/tutorials/08-autotuning_conv.md","sourceDirName":"topic/vta/tutorials","slug":"/topic/vta/tutorials/autotuning_conv","permalink":"/docs/tvm-cn/docs/0.10.0/topic/vta/tutorials/autotuning_conv","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/versioned_docs/version-0.10.0/topic/vta/tutorials/08-autotuning_conv.md","tags":[],"version":"0.10.0","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"sidebarPosition":8,"frontMatter":{"title":"\u5728 VTA \u4E0A\u81EA\u52A8\u8C03\u4F18\u5377\u79EF\u7F51\u7EDC"},"sidebar":"tutorialSidebar","previous":{"title":"\u5728 VTA \u4E0A\u81EA\u52A8\u8C03\u4F18 ALU \u878D\u5408\u7B97\u5B50","permalink":"/docs/tvm-cn/docs/0.10.0/topic/vta/tutorials/autotuning_alu"}}'),a=t("74132"),s=t("21494");let o={title:"\u5728 VTA \u4E0A\u81EA\u52A8\u8C03\u4F18\u5377\u79EF\u7F51\u7EDC"},i="\u5728 VTA \u4E0A\u81EA\u52A8\u8C03\u4F18\u5377\u79EF\u7F51\u7EDC",l={},c=[{value:"\u5B89\u88C5\u4F9D\u8D56",id:"\u5B89\u88C5\u4F9D\u8D56",level:2},{value:"\u7F16\u8BD1\u7F51\u7EDC",id:"\u7F16\u8BD1\u7F51\u7EDC",level:2},{value:"\u542F\u52A8 RPC \u8DDF\u8E2A\u5668",id:"\u542F\u52A8-rpc-\u8DDF\u8E2A\u5668",level:2},{value:"\u5C06\u8BBE\u5907\u6CE8\u518C\u5230 RPC \u8DDF\u8E2A\u5668",id:"\u5C06\u8BBE\u5907\u6CE8\u518C\u5230-rpc-\u8DDF\u8E2A\u5668",level:2},{value:"\u8BBE\u7F6E\u8C03\u4F18\u9009\u9879",id:"\u8BBE\u7F6E\u8C03\u4F18\u9009\u9879",level:2},{value:"\u5F00\u59CB\u8C03\u4F18",id:"\u5F00\u59CB\u8C03\u4F18",level:2},{value:"\u6837\u672C\u8F93\u51FA",id:"\u6837\u672C\u8F93\u51FA",level:2}];function p(n){let e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"\u5728-vta-\u4E0A\u81EA\u52A8\u8C03\u4F18\u5377\u79EF\u7F51\u7EDC",children:"\u5728 VTA \u4E0A\u81EA\u52A8\u8C03\u4F18\u5377\u79EF\u7F51\u7EDC"})}),"\n",(0,a.jsx)(e.admonition,{type:"note",children:(0,a.jsxs)(e.p,{children:["\u5355\u51FB ",(0,a.jsx)(e.a,{href:"https://tvm.apache.org/docs/topic/vta/tutorials/autotvm/tune_relay_vta.html#sphx-glr-download-topic-vta-tutorials-autotvm-tune-relay-vta-py",children:"\u6B64\u5904"})," \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801"]})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"\u4F5C\u8005"}),"\uFF1A",(0,a.jsx)(e.a,{href:"https://github.com/merrymercy",children:"Lianmin Zheng"}),", ",(0,a.jsx)(e.a,{href:"https://homes.cs.washington.edu/~moreau/",children:"Thierry Moreau"})]}),"\n",(0,a.jsx)(e.p,{children:"\u4E3A\u7279\u5B9A\u52A0\u901F\u5668\u8BBE\u8BA1\u81EA\u52A8\u8C03\u4F18\uFF0C\u5BF9\u4E8E\u83B7\u53D6\u4EFB\u4F55\u7ED9\u5B9A\u7B97\u5B50\u7684\u6700\u4F73\u6027\u80FD\u81F3\u5173\u91CD\u8981\u3002\u672C\u6559\u7A0B\u5C55\u793A\u5982\u4F55\u5728 VTA \u4E0A\u8C03\u4F18\u6574\u4E2A\u5377\u79EF\u7F51\u7EDC\u3002"}),"\n",(0,a.jsx)(e.p,{children:"TVM \u4E2D VTA \u7684\u7B97\u5B50\u5B9E\u73B0\u662F\u7528 template \u5F62\u5F0F\u7F16\u5199\u7684\u3002\u8BE5 template \u6709\u8BB8\u591A\u53EF\u8C03 knobs\uFF08\u5E73\u94FA\u56E0\u5B50\u3001\u865A\u62DF\u7EBF\u7A0B\u7B49\uFF09\u3002\u5BF9\u795E\u7ECF\u7F51\u7EDC\u4E2D\u7684\u6240\u6709\u5377\u79EF\u7B97\u5B50\u8FDB\u884C\u8C03\u4F18\u3002\u8C03\u4F18\u540E\uFF0C\u4F1A\u751F\u6210\u4E00\u4E2A\u65E5\u5FD7\u6587\u4EF6\uFF0C\u5B58\u50A8\u6240\u6709\u8C03\u4F18\u7B97\u5B50\u7684\u6700\u4F73 schedule \u53C2\u6570\u3002TVM \u7F16\u8BD1\u5668\u7F16\u8BD1\u8FD9\u4E9B\u7B97\u5B50\u65F6\uFF0C\u4F1A\u67E5\u8BE2\u8FD9\u4E2A\u65E5\u5FD7\u6587\u4EF6\uFF0C\u4ECE\u800C\u83B7\u5F97\u6700\u4F73\u7684 knob \u53C2\u6570\u3002"}),"\n",(0,a.jsx)(e.h2,{id:"\u5B89\u88C5\u4F9D\u8D56",children:"\u5B89\u88C5\u4F9D\u8D56"}),"\n",(0,a.jsx)(e.p,{children:"\u8981\u5728 TVM \u4E2D\u4F7F\u7528 autotvm \u5305\uFF0C\u9700\u8981\u5B89\u88C5\u989D\u5916\u7684\u4F9D\u8D56\uFF08\u5982\u679C\u7528\u7684\u662F Python2\uFF0C\u8BF7\u5C06\u300C3\u300D\u66F4\u6539\u4E3A\u300C2\u300D\uFF09\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:'pip3 install --user psutil xgboost tornado mxnet requests "Pillow<7" cloudpickle\n'})}),"\n",(0,a.jsx)(e.p,{children:"\u4E3A\u4E86\u8BA9 TVM \u5728\u8C03\u4F18\u8FC7\u7A0B\u4E2D\u8FD0\u884C\u66F4\u5FEB\uFF0C\u63A8\u8350\u4F7F\u7528 Cython \u4F5C\u4E3A TVM \u7684 FFI\u3002\u5728 TVM \u7684\u6839\u76EE\u5F55\u4E0B\uFF0C\u6267\u884C\u5982\u4E0B\u547D\u4EE4\uFF08\u82E5\u7528\u7684\u662F Python2\uFF0C\u5C06\u300C3\u300D\u6539\u4E3A\u300C2\u300D\uFF09\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"pip3 install --user cython\nsudo make cython3\n"})}),"\n",(0,a.jsx)(e.p,{children:"\u5728 Python \u4EE3\u7801\u4E2D\u5BFC\u5165\u5305\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import os\nfrom mxnet.gluon.model_zoo import vision\nimport numpy as np\nfrom PIL import Image\n\nfrom tvm import topi\nimport tvm\nfrom tvm import te\nfrom tvm import rpc, autotvm, relay\nfrom tvm.contrib import graph_executor, utils, download\nfrom tvm.autotvm.measure.measure_methods import request_remote\nfrom tvm.autotvm.tuner import XGBTuner, GATuner, RandomTuner, GridSearchTuner\n\nimport vta\nfrom vta.testing import simulator\nfrom vta.top import graph_pack\n"})}),"\n",(0,a.jsx)(e.h2,{id:"\u7F16\u8BD1\u7F51\u7EDC",children:"\u7F16\u8BD1\u7F51\u7EDC"}),"\n",(0,a.jsx)(e.p,{children:"\u7528\u6765\u81EA Gluon \u6A21\u578B\u7684 Relay \u6267\u884C\u7279\u5B9A\u4E8E VTA \u7684\u7F16\u8BD1\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def compile_network(env, target, model, start_pack, stop_pack):\n    # \u586B\u5145 shape \u548C\u6570\u636E\u7C7B\u578B\u5B57\u5178\n    dtype_dict = {"data": "float32"}\n    shape_dict = {"data": (env.BATCH, 3, 224, 224)}\n\n    # \u4E0B\u67B6 gluon \u6A21\u578B\uFF0C\u5E76\u8F6C\u6362\u4E3A Relay\n    gluon_model = vision.get_model(model, pretrained=True)\n    mod, params = relay.frontend.from_mxnet(gluon_model, shape_dict)\n\n    # \u66F4\u65B0 shape \u548C\u7C7B\u578B\u5B57\u5178\n    shape_dict.update({k: v.shape for k, v in params.items()})\n    dtype_dict.update({k: str(v.dtype) for k, v in params.items()})\n\n    # \u5728 Relay \u4E2D\u6267\u884C\u91CF\u5316\n    # \u6CE8\u610F\uFF1A\u5C06 opt_level \u8BBE\u7F6E\u4E3A 3\uFF0C\u6298\u53E0 batch norm\n    with tvm.transform.PassContext(opt_level=3):\n        with relay.quantize.qconfig(global_scale=8.0, skip_conv_layers=[0]):\n            mod = relay.quantize.quantize(mod, params=params)\n\n    # \u5BF9 VTA target \u8FDB\u884C\u56FE\u6253\u5305\u548C\u5E38\u91CF\u6298\u53E0\n    if target.device_name == "vta":\n        assert env.BLOCK_IN == env.BLOCK_OUT\n        relay_prog = graph_pack(\n            mod["main"],\n            env.BATCH,\n            env.BLOCK_OUT,\n            env.WGT_WIDTH,\n            start_name=start_pack,\n            stop_name=stop_pack,\n        )\n\n    return relay_prog, params\n'})}),"\n",(0,a.jsx)(e.h2,{id:"\u542F\u52A8-rpc-\u8DDF\u8E2A\u5668",children:"\u542F\u52A8 RPC \u8DDF\u8E2A\u5668"}),"\n",(0,a.jsx)(e.p,{children:"TVM \u4F7F\u7528 RPC session \u4E0E Pynq \u677F\u8FDB\u884C\u901A\u4FE1\u3002\u8C03\u4F18\u671F\u95F4\uFF0C\u8C03\u4F18\u5668\u4F1A\u5C06\u751F\u6210\u7684\u4EE3\u7801\u53D1\u9001\u5230\u677F\u4E0A\uFF0C\u5E76\u6D4B\u8BD5\u677F\u4E0A\u4EE3\u7801\u7684\u901F\u5EA6\u3002"}),"\n",(0,a.jsx)(e.p,{children:"\u4E3A\u4E86\u6269\u5927\u8C03\u4F18\uFF0CTVM \u7528 RPC \u8DDF\u8E2A\u5668\u6765\u7BA1\u7406\u591A\u4E2A\u8BBE\u5907\u3002 RPC \u8DDF\u8E2A\u5668\u662F\u4E00\u4E2A\u96C6\u4E2D\u7684\u63A7\u5236\u5668\u8282\u70B9\u3002\u53EF\u4EE5\u5C06\u6240\u6709\u8BBE\u5907\u6CE8\u518C\u5230\u8DDF\u8E2A\u5668\u3002\u4F8B\u5982\uFF0C\u82E5\u6709 10 \u4E2A Pynq \u677F\uFF0C\u53EF\u4EE5\u5C06\u5B83\u4EEC\u5168\u90E8\u6CE8\u518C\u5230\u8DDF\u8E2A\u5668\uFF0C\u7136\u540E\u5E76\u884C\u8FD0\u884C 10 \u6B21\u6D4B\u8BD5\uFF0C\u4ECE\u800C\u52A0\u5FEB\u8C03\u4F18\u8FC7\u7A0B\u3002"}),"\n",(0,a.jsx)(e.p,{children:"\u5728\u4E3B\u673A\u4E0A\u8FD0\u884C\u6B64\u547D\u4EE4\uFF0C\u542F\u52A8 RPC \u8DDF\u8E2A\u5668\u3002\u6574\u4E2A\u8C03\u4F18\u8FC7\u7A0B\u4E2D\u90FD\u9700\u8981\u8DDF\u8E2A\u5668\uFF0C\u56E0\u6B64\u6211\u4EEC\u9700\u8981\u4E3A\u8FD9\u4E2A\u547D\u4EE4\u6253\u5F00\u4E00\u4E2A\u65B0\u7EC8\u7AEF\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"python -m tvm.exec.rpc_tracker --host=0.0.0.0 --port=9190\n"})}),"\n",(0,a.jsx)(e.p,{children:"\u9884\u671F\u8F93\u51FA\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"INFO:RPCTracker:bind to 0.0.0.0:9190\n"})}),"\n",(0,a.jsx)(e.h2,{id:"\u5C06\u8BBE\u5907\u6CE8\u518C\u5230-rpc-\u8DDF\u8E2A\u5668",children:"\u5C06\u8BBE\u5907\u6CE8\u518C\u5230 RPC \u8DDF\u8E2A\u5668"}),"\n",(0,a.jsx)(e.p,{children:"\u73B0\u5728\u53EF\u4EE5\u5C06\u8BBE\u5907\u6CE8\u518C\u5230\u8DDF\u8E2A\u5668\u3002\u7B2C\u4E00\u6B65\u662F\u4E3A Pynq \u8BBE\u5907\u6784\u5EFA TVM runtime\u3002"}),"\n",(0,a.jsxs)(e.p,{children:["\u6309\u7167 ",(0,a.jsx)(e.a,{href:"./",children:"VTA\uFF1A\u591A\u529F\u80FD\u5F20\u91CF\u52A0\u901F\u5668"})," \u5728\u8BBE\u5907\u4E0A\u6784\u5EFA TVM runtime\u3002\u7136\u540E\u5C06\u8BBE\u5907\u6CE8\u518C\u5230\u8DDF\u8E2A\u5668\uFF1A"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"python -m tvm.exec.rpc_server --tracker=[HOST_IP]:9190 --key=pynq\n"})}),"\n",(0,a.jsxs)(e.p,{children:["\uFF08\u5C06 ",(0,a.jsx)(e.code,{children:"[HOST_IP]"})," \u66FF\u6362\u4E3A\u4F60\u4E3B\u673A\u7684 IP \u5730\u5740\uFF09"]}),"\n",(0,a.jsx)(e.p,{children:"\u6CE8\u518C\u8BBE\u5907\u540E\uFF0C\u53EF\u4EE5\u901A\u8FC7\u67E5\u8BE2 rpc_tracker \u6765\u786E\u8BA4\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"python -m tvm.exec.query_rpc_tracker --host=0.0.0.0 --port=9190\n"})}),"\n",(0,a.jsx)(e.p,{children:"\u4F8B\u5982\uFF0C\u82E5\u6709 6 \u4E2A Pynq \u677F\u548C 11 \u4E2A\u6811\u8393\u6D3E 3B\uFF0C\u5219\u8F93\u51FA\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"Queue Status\n----------------------------------\nkey          total  free  pending\n----------------------------------\npynq         6      6     0\nrpi3b        11     11    0\n----------------------------------\n"})}),"\n",(0,a.jsx)(e.p,{children:"\u53EF\u4EE5\u5C06\u591A\u4E2A\u8BBE\u5907\u6CE8\u518C\u5230\u8DDF\u8E2A\u5668\uFF0C\u52A0\u901F\u8C03\u4F18\u3002"}),"\n",(0,a.jsx)(e.h2,{id:"\u8BBE\u7F6E\u8C03\u4F18\u9009\u9879",children:"\u8BBE\u7F6E\u8C03\u4F18\u9009\u9879"}),"\n",(0,a.jsx)(e.p,{children:"\u8C03\u4F18\u524D\uFF0C\u9700\u8981\u5E94\u7528\u4E00\u4E9B\u914D\u7F6E\u3002\u8FD9\u91CC\u4EE5 Pynq-Z1 \u677F\u4E3A\u4F8B\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# \u8DDF\u8E2A\u5668\u4E3B\u673A\u548C\u7AEF\u53E3\u53EF\u4EE5\u7531\u4F60\u7684\u73AF\u5883\u8BBE\u7F6E\ntracker_host = os.environ.get("TVM_TRACKER_HOST", "127.0.0.1")\ntracker_port = int(os.environ.get("TVM_TRACKER_PORT", 9190))\n\n# \u4ECE 3rdparty/vta-hw/config/vta_config.json \u6587\u4EF6\u52A0\u8F7D VTA \u53C2\u6570\nenv = vta.get_env()\n\n# \u6B64 target \u7528\u4E8E\u4EA4\u53C9\u7F16\u8BD1\u3002\u53EF\u4EE5\u5728\u4F60\u7684\u8BBE\u5907\u4E0A\u901A\u8FC7\uFF1Acode:`gcc -v` \u6765\u67E5\u8BE2\u5B83\u3002\n# \u8BBE\u7F6E ``device=arm_cpu`` \u5728 CPU \u4E0A\u8FD0\u884C\u63A8\u7406\n# \u6216\u8005\u8BBE\u7F6E ``device=vta`` \u5728 FPGA \u4E0A\u8FD0\u884C\u63A8\u7406\ndevice = "vta"\ntarget = env.target if device == "vta" else env.target_vta_cpu\n\n# \u8981\u7F16\u8BD1\u7684 Gluon \u6A21\u578B\u7684\u540D\u79F0\n# ``start_pack`` \u548C ``stop_pack`` \u6807\u7B7E\u6307\u793A\u5728\u54EA\u91CC\u5F00\u59CB\u548C\u7ED3\u675F\u56FE\u5F62\u6253\u5305 Relay pass\uFF1A\u6362\u8A00\u4E4B\uFF0C\u4ECE\u54EA\u91CC\u5F00\u59CB\u548C\u7ED3\u675F\u8F6C\u79FB\u5230 VTA\u3002\nnetwork = "resnet18_v1"\nstart_pack = "nn.max_pool2d"\nstop_pack = "nn.global_avg_pool2d"\n\n# \u8C03\u4F18\u9009\u9879\nlog_file = "%s.%s.log" % (device, network)\ntuning_option = {\n    "log_filename": log_file,\n    "tuner": "random",\n    "n_trial": 1000,\n    "early_stopping": None,\n    "measure_option": autotvm.measure_option(\n        builder=autotvm.LocalBuilder(),\n        runner=autotvm.RPCRunner(\n            env.TARGET,\n            host=tracker_host,\n            port=tracker_port,\n            number=5,\n            timeout=60,\n            module_loader=vta.module_loader(),\n            # check_correctness=True, # TODO: \u5F53 check_correctness \u518D\u6B21\u8D77\u4F5C\u7528\u65F6\u91CD\u65B0\u542F\u7528\u3002\n        ),\n    ),\n}\n'})}),"\n",(0,a.jsxs)(e.admonition,{type:"note",children:[(0,a.jsx)(e.p,{children:"\u5982\u4F55\u8BBE\u7F6E\u8C03\u4F18\u9009\u9879"}),(0,a.jsxs)(e.p,{children:["\u901A\u5E38\uFF0C\u6B64\u5904\u63D0\u4F9B\u7684\u9ED8\u8BA4\u503C\u6548\u679C\u5F88\u597D\u3002\u82E5\u8C03\u4F18\u65F6\u95F4\u5145\u5206\uFF0C\u53EF\u4EE5\u5C06 ",(0,a.jsx)(e.code,{children:"n_trial"}),"\u3001",(0,a.jsx)(e.code,{children:"early_stopping"})," \u8BBE\u7F6E\u4E3A\u66F4\u5927\u7684\u503C\uFF0C\u4F7F\u8C03\u4F18\u8FD0\u884C\u66F4\u957F\u65F6\u95F4\u3002\u82E5\u8BBE\u5907\u529F\u7387\u4E0D\u8DB3\u6216 conv2d \u7B97\u5B50\u5F88\u5927\uFF0C\u8003\u8651\u5C06\u8D85\u65F6\u65F6\u95F4\u8BBE\u7F6E\u5927\u4E00\u4E9B\u3002"]})]}),"\n",(0,a.jsx)(e.h2,{id:"\u5F00\u59CB\u8C03\u4F18",children:"\u5F00\u59CB\u8C03\u4F18"}),"\n",(0,a.jsx)(e.p,{children:"\u73B0\u5728\u53EF\u4EE5\u4ECE\u7F51\u7EDC\u4E2D\u63D0\u53D6\u8C03\u4F18\u4EFB\u52A1\u5E76\u5F00\u59CB\u8C03\u4F18\u3002\u8FD9\u91CC\u63D0\u4F9B\u4E86\u4E00\u4E2A\u7B80\u5355\u7684\u5B9E\u7528\u51FD\u6570\u6765\u8C03\u4F18\u4EFB\u52A1\u5217\u8868\u3002\u8FD9\u4E2A\u51FD\u6570\u53EA\u662F\u521D\u59CB\u7248\u672C\uFF0C\u5B83\u6309\u987A\u5E8F\u8C03\u6574\u4EFB\u52A1\u5217\u8868\u3002\u672A\u6765\u6211\u4EEC\u4F1A\u5F15\u5165\u66F4\u590D\u6742\u7684\u8C03\u4F18\u8C03\u5EA6\u5668\u3002"}),"\n",(0,a.jsxs)(e.p,{children:["\u7531\u4E8E\u8981\u5728 Pynq FPGA \u677F\u4E0A\u5B8C\u6210\u8C03\u4F18\uFF0C\u8BF7\u786E\u4FDD ",(0,a.jsx)(e.code,{children:"vta_config.json"})," \u6587\u4EF6\u4E2D\u7684 ",(0,a.jsx)(e.code,{children:"TARGET"})," \u6761\u76EE\u8BBE\u7F6E\u4E3A ",(0,a.jsx)(e.code,{children:"pynq"}),"\u3002"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# \u672C\u6559\u7A0B\u53EF\u4EE5\u8DF3\u8FC7\u6B64\u51FD\u6570\u7684\u5B9E\u73B0\u3002\ndef tune_tasks(\n    tasks,\n    measure_option,\n    tuner="xgb",\n    n_trial=1000,\n    early_stopping=None,\n    log_filename="tuning.log",\n    use_transfer_learning=True,\n):\n    # \u521B\u5EFA tmp \u65E5\u5FD7\u6587\u4EF6\n    tmp_log_file = log_filename + ".tmp"\n    if os.path.exists(tmp_log_file):\n        os.remove(tmp_log_file)\n\n    for i, tsk in enumerate(reversed(tasks)):\n        prefix = "[Task %2d/%2d] " % (i + 1, len(tasks))\n\n        # \u521B\u5EFA\u8C03\u4F18\u5668\n        if tuner == "xgb" or tuner == "xgb-rank":\n            tuner_obj = XGBTuner(tsk, loss_type="rank")\n        elif tuner == "xgb_knob":\n            tuner_obj = XGBTuner(tsk, loss_type="rank", feature_type="knob")\n        elif tuner == "ga":\n            tuner_obj = GATuner(tsk, pop_size=50)\n        elif tuner == "random":\n            tuner_obj = RandomTuner(tsk)\n        elif tuner == "gridsearch":\n            tuner_obj = GridSearchTuner(tsk)\n        else:\n            raise ValueError("Invalid tuner: " + tuner)\n\n        if use_transfer_learning:\n            if os.path.isfile(tmp_log_file):\n                tuner_obj.load_history(autotvm.record.load_from_file(tmp_log_file))\n\n        # \u5F00\u59CB\u8C03\u4F18\n        tsk_trial = min(n_trial, len(tsk.config_space))\n        tuner_obj.tune(\n            n_trial=tsk_trial,\n            early_stopping=early_stopping,\n            measure_option=measure_option,\n            callbacks=[\n                autotvm.callback.progress_bar(tsk_trial, prefix=prefix),\n                autotvm.callback.log_to_file(tmp_log_file),\n            ],\n        )\n\n    # \u9009\u62E9\u6700\u4F73\u8BB0\u5F55\u653E\u5230\u7F13\u5B58\u6587\u4EF6\n    autotvm.record.pick_best(tmp_log_file, log_filename)\n    os.remove(tmp_log_file)\n'})}),"\n",(0,a.jsx)(e.p,{children:"\u6CE8\u518C\u7279\u5B9A VTA \u7684\u8C03\u4F18\u4EFB\u52A1"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def register_vta_tuning_tasks():\n    from tvm.autotvm.task import TaskExtractEnv\n\n    @tvm.te.tag_scope(tag=topi.tag.ELEMWISE)\n    def my_clip(x, a_min, a_max):\n        """Unlike topi\'s current clip, put min and max into two stages."""\n        const_min = tvm.tir.const(a_min, x.dtype)\n        const_max = tvm.tir.const(a_max, x.dtype)\n        x = te.compute(x.shape, lambda *i: tvm.te.min(x(*i), const_max), name="clipA")\n        x = te.compute(x.shape, lambda *i: tvm.te.max(x(*i), const_min), name="clipB")\n        return x\n\n    # \u521D\u59CB\u5316 autotvm \u73AF\u5883\u5E76\u6CE8\u518C VTA \u7B97\u5B50\n    TaskExtractEnv()\n\n    @autotvm.template("conv2d_packed.vta")\n    def _topi_nn_conv2d(*args, **kwargs):\n        assert not kwargs, "Do not support kwargs in template function call"\n        A, W = args[:2]\n\n        with tvm.target.vta():\n            res = vta.top.conv2d_packed(*args, **kwargs)\n            res = topi.right_shift(res, 8)\n            res = my_clip(res, 0, 127)\n            res = topi.cast(res, "int8")\n\n        if tvm.target.Target.current().device_name == "vta":\n            s = vta.top.schedule_conv2d_packed([res])\n        else:\n            s = te.create_schedule([res.op])\n        return s, [A, W, res]\n'})}),"\n",(0,a.jsx)(e.p,{children:"\u6700\u540E\uFF0C\u542F\u52A8\u8C03\u4F18\u4F5C\u4E1A\uFF0C\u5E76\u8BC4\u4F30\u7AEF\u5230\u7AEF\u6027\u80FD\u3002"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'def tune_and_evaluate(tuning_opt):\n    # \u6CE8\u518C VTA \u8C03\u4F18\u4EFB\u52A1\n    register_vta_tuning_tasks()\n\n    # \u5BF9 Relay \u7A0B\u5E8F\u8FDB\u884C\u4EFB\u52A1\u63D0\u53D6\n    print("Extract tasks...")\n    relay_prog, params = compile_network(env, target, network, start_pack, stop_pack)\n    mod = tvm.IRModule.from_expr(relay_prog)\n    tasks = autotvm.task.extract_from_program(\n        mod,\n        params=params,\n        ops=(relay.op.get("nn.conv2d"),),\n        target=target,\n        target_host=env.target_host,\n    )\n\n    # \u8FC7\u6EE4\u6389\u975E\u6253\u5305\u7684 conv2d \u4EFB\u52A1\n    tasks = list(filter(lambda t: len(t.args[0][1]) > 4 and "conv" in t.name, tasks))\n\n    # \u6211\u4EEC\u5E94\u8BE5\u5DF2\u7ECF\u63D0\u53D6\u4E86 10 \u4E2A\u5377\u79EF\u4EFB\u52A1\n    assert len(tasks) == 10\n    print("Extracted {} conv2d tasks:".format(len(tasks)))\n    for tsk in tasks:\n        inp = tsk.args[0][1]\n        wgt = tsk.args[1][1]\n        batch = inp[0] * inp[4]\n        in_filter = inp[1] * inp[5]\n        out_filter = wgt[0] * wgt[4]\n        height, width = inp[2], inp[3]\n        hkernel, wkernel = wgt[2], wgt[3]\n        hstride, wstride = tsk.args[2][0], tsk.args[2][1]\n        hpad, wpad = tsk.args[3][0], tsk.args[3][1]\n        print(\n            "({}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {})".format(\n                batch,\n                height,\n                width,\n                in_filter,\n                out_filter,\n                hkernel,\n                wkernel,\n                hpad,\n                wpad,\n                hstride,\n                wstride,\n            )\n        )\n\n    # \u4E0D\u5728\u7F51\u9875\u670D\u52A1\u5668\u4E2D\u8FD0\u884C\u8C03\u4F18\uFF0C\u56E0\u4E3A\u5B83\u9700\u8981\u7684\u65F6\u95F4\u592A\u957F\u3002\n    # \u6CE8\u91CA\u4EE5\u4E0B\u884C\u4EE5\u81EA\u884C\u8FD0\u884C\u3002\n    return\n\n    # \u8FD0\u884C\u8C03\u4F18\u4EFB\u52A1\n    print("Tuning...")\n    tune_tasks(tasks, **tuning_opt)\n\n    # \u8BC4\u4F30\u8C03\u4F18\u5386\u53F2\n    if env.TARGET != "sim":\n        # \u4ECE\u961F\u5217\u8282\u70B9\u83B7\u53D6\u8FDC\u7A0B\n        remote = autotvm.measure.request_remote(\n            env.TARGET, tracker_host, tracker_port, timeout=10000\n        )\n        # \u91CD\u65B0\u914D\u7F6E JIT runtime \u548C FPGA\u3002\n        vta.reconfig_runtime(remote)\n        vta.program_fpga(remote, bitstream=None)\n    else:\n        # \u5728\u6A21\u62DF\u6A21\u5F0F\u4E0B\uFF0C\u672C\u5730\u6258\u7BA1 RPC \u670D\u52A1\u5668\u3002\n        remote = rpc.LocalSession()\n\n    # \u7F16\u8BD1\u5177\u6709\u5386\u53F2\u6700\u4F73\u8BB0\u5F55\u7684\u5185\u6838\n    with autotvm.tophub.context(target, extra_files=[log_file]):\n        # \u7F16\u8BD1\u7F51\u7EDC\n        print("Compile...")\n        if target.device_name != "vta":\n            with tvm.transform.PassContext(opt_level=3, disabled_pass={"AlterOpLayout"}):\n                lib = relay.build(\n                    relay_prog, target=target, params=params, target_host=env.target_host\n                )\n        else:\n            with vta.build_config(opt_level=3, disabled_pass={"AlterOpLayout"}):\n                lib = relay.build(\n                    relay_prog, target=target, params=params, target_host=env.target_host\n                )\n\n        # \u5BFC\u51FA\u5E93\n        print("Upload...")\n        temp = utils.tempdir()\n        lib.export_library(temp.relpath("graphlib.tar"))\n        remote.upload(temp.relpath("graphlib.tar"))\n        lib = remote.load_module("graphlib.tar")\n\n        # \u751F\u6210\u56FE\u6267\u884C\u5668\n        ctx = remote.ext_dev(0) if device == "vta" else remote.cpu(0)\n        m = graph_executor.GraphModule(lib["default"](ctx))\n\n        # \u4E0A\u4F20\u53C2\u6570\u5230\u8BBE\u5907\n        image = tvm.nd.array((np.random.uniform(size=(1, 3, 224, 224))).astype("float32"))\n        m.set_input("data", image)\n\n        # \u8BC4\u4F30\n        print("Evaluate inference time cost...")\n        timer = m.module.time_evaluator("run", ctx, number=1, repeat=10)\n        tcost = timer()\n        prof_res = np.array(tcost.results) * 1000  # convert to millisecond\n        print(\n            "Mean inference time (std dev): %.2f ms (%.2f ms)"\n            % (np.mean(prof_res), np.std(prof_res))\n        )\n\n# \u8FD0\u884C\u8C03\u4F18\u5E76\u8BC4\u4F30\u7ED3\u679C\ntune_and_evaluate(tuning_option)\n'})}),"\n",(0,a.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:'Extract tasks...\n/workspace/python/tvm/driver/build_module.py:267: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.\n  "target_host parameter is going to be deprecated. "\n/workspace/python/tvm/target/target.py:273: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.\n  "target_host parameter is going to be deprecated. "\nExtracted 10 conv2d tasks:\n(1, 56, 56, 64, 64, 3, 3, 1, 1, 1, 1)\n(1, 56, 56, 64, 128, 1, 1, 0, 0, 2, 2)\n(1, 56, 56, 64, 128, 3, 3, 1, 1, 2, 2)\n(1, 28, 28, 128, 128, 3, 3, 1, 1, 1, 1)\n(1, 28, 28, 128, 256, 1, 1, 0, 0, 2, 2)\n(1, 28, 28, 128, 256, 3, 3, 1, 1, 2, 2)\n(1, 14, 14, 256, 256, 3, 3, 1, 1, 1, 1)\n(1, 14, 14, 256, 512, 1, 1, 0, 0, 2, 2)\n(1, 14, 14, 256, 512, 3, 3, 1, 1, 2, 2)\n(1, 7, 7, 512, 512, 3, 3, 1, 1, 1, 1)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"\u6837\u672C\u8F93\u51FA",children:"\u6837\u672C\u8F93\u51FA"}),"\n",(0,a.jsx)(e.p,{children:"\u8C03\u4F18\u9700\u8981\u7F16\u8BD1\u8BB8\u591A\u7A0B\u5E8F\uFF0C\u5E76\u4ECE\u4E2D\u63D0\u53D6\u7279\u5F81\u3002\u6240\u4EE5\u63A8\u8350\u4F7F\u7528\u9AD8\u6027\u80FD\u7684 CPU\u3002\u4E0B\u9762\u7ED9\u51FA\u4E86\u4E00\u4E2A\u8F93\u51FA\u793A\u4F8B\u300216T CPU \u548C 6 \u5757 Pynq \u677F\u5927\u7EA6\u9700\u8981 2 \u4E2A\u5C0F\u65F6\u3002"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"Extract tasks...\n[Warning] Invalid shape during AutoTVM task creation\nExtracted 10 conv2d tasks:\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 16, 14, 14, 1, 16), 'int8'), ('TENSOR', (32, 16, 1, 1, 16, 16), 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 16, 14, 14, 1, 16, 'int8'), (32, 16, 1, 1, 16, 16, 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'))\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 8, 28, 28, 1, 16), 'int8'), ('TENSOR', (16, 8, 1, 1, 16, 16), 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 8, 28, 28, 1, 16, 'int8'), (16, 8, 1, 1, 16, 16, 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'))\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 4, 56, 56, 1, 16), 'int8'), ('TENSOR', (8, 4, 1, 1, 16, 16), 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 4, 56, 56, 1, 16, 'int8'), (8, 4, 1, 1, 16, 16, 'int8'), (2, 2), (0, 0), (1, 1), 'NCHW1n16c', 'int32'))\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 4, 56, 56, 1, 16), 'int8'), ('TENSOR', (4, 4, 3, 3, 16, 16), 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 4, 56, 56, 1, 16, 'int8'), (4, 4, 3, 3, 16, 16, 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 8, 28, 28, 1, 16), 'int8'), ('TENSOR', (8, 8, 3, 3, 16, 16), 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 8, 28, 28, 1, 16, 'int8'), (8, 8, 3, 3, 16, 16, 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 4, 56, 56, 1, 16), 'int8'), ('TENSOR', (8, 4, 3, 3, 16, 16), 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 4, 56, 56, 1, 16, 'int8'), (8, 4, 3, 3, 16, 16, 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 16, 14, 14, 1, 16), 'int8'), ('TENSOR', (16, 16, 3, 3, 16, 16), 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 16, 14, 14, 1, 16, 'int8'), (16, 16, 3, 3, 16, 16, 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 8, 28, 28, 1, 16), 'int8'), ('TENSOR', (16, 8, 3, 3, 16, 16), 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 8, 28, 28, 1, 16, 'int8'), (16, 8, 3, 3, 16, 16, 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 32, 7, 7, 1, 16), 'int8'), ('TENSOR', (32, 32, 3, 3, 16, 16), 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 32, 7, 7, 1, 16, 'int8'), (32, 32, 3, 3, 16, 16, 'int8'), (1, 1), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\n    Task(func_name=topi_nn_conv2d, args=(('TENSOR', (1, 16, 14, 14, 1, 16), 'int8'), ('TENSOR', (32, 16, 3, 3, 16, 16), 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'), kwargs={}, workload=('conv2d', (1, 16, 14, 14, 1, 16, 'int8'), (32, 16, 3, 3, 16, 16, 'int8'), (2, 2), (1, 1), (1, 1), 'NCHW1n16c', 'int32'))\nTuning...\n[Task  1/10]  Current/Best:    0.72/  23.24 GFLOPS | Progress: (480/1000) | 640.31 s Done.\n[Task  2/10]  Current/Best:    0.00/  27.69 GFLOPS | Progress: (576/1000) | 810.09 s Done.\n[Task  3/10]  Current/Best:    0.00/  22.97 GFLOPS | Progress: (1000/1000) | 1125.37 s Done.\n[Task  4/10]  Current/Best:    0.00/  31.26 GFLOPS | Progress: (1000/1000) | 1025.52 s Done.\n[Task  5/10]  Current/Best:    0.00/  15.15 GFLOPS | Progress: (1000/1000) | 1236.58 s Done.\n[Task  6/10]  Current/Best:    0.00/  22.74 GFLOPS | Progress: (1000/1000) | 906.60 s Done.\n[Task  7/10]  Current/Best:    0.00/  15.27 GFLOPS | Progress: (1000/1000) | 1056.25 s Done.\n[Task  8/10]  Current/Best:    0.00/   2.18 GFLOPS | Progress: (1000/1000) | 2275.29 s Done.\n[Task  9/10]  Current/Best:    2.23/   3.99 GFLOPS | Progress: (1000/1000) | 2527.25 s Done.\n[Task 10/10]  Current/Best:    1.56/   6.32 GFLOPS | Progress: (480/1000) | 1304.84 s Done.\nCompile...\nUpload...\nEvaluate inference time cost...\nMean inference time (std dev): 621.79 ms (0.14 ms)\n"})}),"\n",(0,a.jsxs)(e.admonition,{type:"note",children:[(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"\u9047\u5230\u56F0\u96BE\uFF1F"})}),(0,a.jsx)(e.p,{children:"\u81EA\u52A8\u8C03\u4F18\u6A21\u5757\u5BB9\u6613\u51FA\u9519\u3002\u82E5\u603B\u662F\u770B\u5230\u300C0.00/ 0.00 GFLOPS\u300D\uFF0C\u90A3\u4E48\u80AF\u5B9A\u6709\u95EE\u9898\u3002"}),(0,a.jsx)(e.p,{children:"\u9996\u5148\uFF0C\u786E\u4FDD\u8BBE\u7F6E\u4E86\u6B63\u786E\u7684\u8BBE\u5907\u914D\u7F6E\u3002\u7136\u540E\uFF0C\u901A\u8FC7\u5728\u811A\u672C\u5F00\u5934\u6DFB\u52A0\u4EE5\u4E0B\u4EE3\u7801\u6765\u6253\u5370\u8C03\u8BD5\u4FE1\u606F\u3002\u5B83\u5C06\u6253\u5370\u6BCF\u4E2A\u6D4B\u8BD5\u7ED3\u679C\uFF0C\u53EF\u4EE5\u5728\u5176\u4E2D\u627E\u5230\u6709\u7528\u7684\u62A5\u9519\u6D88\u606F\u3002"}),(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import logging\nlogging.getLogger('autotvm').setLevel(logging.DEBUG)\n"})}),(0,a.jsxs)(e.p,{children:["\u6700\u540E\uFF0C\u968F\u65F6\u5728 ",(0,a.jsx)(e.a,{href:"https://discuss.tvm.apache.org",children:"https://discuss.tvm.apache.org"})," \u4E0A\u5411\u793E\u533A\u5BFB\u6C42\u5E2E\u52A9\u3002"]})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://tvm.apache.org/docs/_downloads/d7b7e50e9f5b4ff04d55a56e52314c71/tune_relay_vta.py",children:"\u4E0B\u8F7D Python \u6E90\u4EE3\u7801\uFF1Atune_relay_vta.py"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"https://tvm.apache.org/docs/_downloads/b1b0cbd807166348a0eabbad6bfbbdaf/tune_relay_vta.ipynb",children:"\u4E0B\u8F7D Jupyter Notebook\uFF1Atune_relay_vta.ipynb"})})]})}function d(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},21494:function(n,e,t){t.d(e,{Z:function(){return i},a:function(){return o}});var r=t(39546);let a={},s=r.createContext(a);function o(n){let e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);