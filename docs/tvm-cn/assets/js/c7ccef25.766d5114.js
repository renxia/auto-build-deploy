"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["46130"],{47604:function(a,n,_){_.r(n),_.d(n,{default:()=>m,frontMatter:()=>o,metadata:()=>b,assets:()=>p,toc:()=>s,contentTitle:()=>l});var b=JSON.parse('{"id":"how_to/deploy/deploy_models/depoly_adreno_tvmc","title":"\u4F7F\u7528 tvmc \u63A5\u53E3\u5728 Adreno\u2122 \u4E0A\u90E8\u7F72\u9884\u8BAD\u7EC3\u6A21\u578B","description":"\u5355\u51FB \u6B64\u5904 \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801","source":"@site/docs/how_to/deploy/deploy_models/11-depoly_adreno_tvmc.md","sourceDirName":"how_to/deploy/deploy_models","slug":"/how_to/deploy/deploy_models/depoly_adreno_tvmc","permalink":"/docs/tvm-cn/docs/how_to/deploy/deploy_models/depoly_adreno_tvmc","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/docs/how_to/deploy/deploy_models/11-depoly_adreno_tvmc.md","tags":[],"version":"current","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"sidebarPosition":11,"frontMatter":{"title":"\u4F7F\u7528 tvmc \u63A5\u53E3\u5728 Adreno\u2122 \u4E0A\u90E8\u7F72\u9884\u8BAD\u7EC3\u6A21\u578B"},"sidebar":"tutorialSidebar","previous":{"title":"\u5728 Adreno\u2122 \u4E0A\u90E8\u7F72\u9884\u8BAD\u7EC3\u6A21\u578B","permalink":"/docs/tvm-cn/docs/how_to/deploy/deploy_models/depoly_adreno"},"next":{"title":"\u4F7F\u7528 Relay","permalink":"/docs/tvm-cn/docs/how_to/relay/"}}'),r=_("74132"),e=_("21494");let o={title:"\u4F7F\u7528 tvmc \u63A5\u53E3\u5728 Adreno\u2122 \u4E0A\u90E8\u7F72\u9884\u8BAD\u7EC3\u6A21\u578B"},l="\u4F7F\u7528 tvmc \u63A5\u53E3\u5728 Adreno\u2122 \u4E0A\u90E8\u7F72\u9884\u8BAD\u7EC3\u6A21\u578B",p={},s=[];function t(a){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,e.a)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"\u4F7F\u7528-tvmc-\u63A5\u53E3\u5728-adreno-\u4E0A\u90E8\u7F72\u9884\u8BAD\u7EC3\u6A21\u578B",children:"\u4F7F\u7528 tvmc \u63A5\u53E3\u5728 Adreno\u2122 \u4E0A\u90E8\u7F72\u9884\u8BAD\u7EC3\u6A21\u578B"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["\u5355\u51FB ",(0,r.jsx)(n.a,{href:"https://tvm.apache.org/docs/how_to/deploy_models/deploy_model_on_adreno_tvmc.html#sphx-glr-download-how-to-deploy-models-deploy-model-on-adreno-tvmc-py",children:"\u6B64\u5904"})," \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801"]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u4F5C\u8005"}),"\uFF1ASiva Rama Krishna"]}),"\n",(0,r.jsx)(n.p,{children:"\u672C\u6587\u662F\u4E00\u7BC7\u5173\u4E8E\u5728 Adreno\u2122 \u4E0A\u90E8\u7F72\u9884\u8BAD\u7EC3 Keras resnet50 \u6A21\u578B\u7684\u9010\u6B65\u6559\u7A0B\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u6B64\u5916\uFF0C\u60A8\u5E94\u8BE5\u5DF2\u7ECF\u4E3A Android \u6784\u5EFA\u4E86 TVM\u3002\u8BF7\u53C2\u9605\u4EE5\u4E0B\u8BF4\u660E\uFF0C\u4E86\u89E3\u5982\u4F55\u6784\u5EFA\u5B83\u5E76\u8BBE\u7F6E RPC \u73AF\u5883\u3002"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://tvm.apache.org/docs/v0.13.0/how_to/deploy/adreno.html",children:"\u5728 Adreno GPU \u4E0A\u90E8\u7F72"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import os\nimport tvm\nimport numpy as np\nfrom tvm import relay\nfrom tvm.driver import tvmc\nfrom tvm.driver.tvmc.model import TVMCPackage\nfrom tvm.contrib import utils\n"})}),"\n",(0,r.jsx)(n.h1,{id:"\u914D\u7F6E",children:"\u914D\u7F6E"}),"\n",(0,r.jsxs)(n.p,{children:["\u5728\u7F16\u8BD1\u4EE5\u751F\u6210\u7EB9\u7406\u4E4B\u524D\u6307\u5B9A Adreno \u76EE\u6807\u4EE5\u5229\u7528\u5185\u6838\u5E76\u83B7\u5F97\u6240\u6709\u7EB9\u7406\u7684\u597D\u5904\u3002\u6CE8\u610F\uFF1A\u6B64\u751F\u6210\u7684\u793A\u4F8B\u5728\u6211\u4EEC\u7684 x86 \u670D\u52A1\u5668\u4E0A\u8FD0\u884C\u4EE5\u8FDB\u884C\u6F14\u793A\u3002\u5982\u679C\u5728 Android \u8BBE\u5907\u4E0A\u8FD0\u884C\u5B83\uFF0C\u6211\u4EEC\u9700\u8981\u6307\u5B9A\u5176\u6307\u4EE4\u96C6\u3002\u5982\u679C\u8981\u5728\u5B9E\u9645\u8BBE\u5907\u4E0A\u901A\u8FC7 rpc \u8FD0\u884C\u6B64\u6559\u7A0B\uFF0C\u8BF7\u5C06 ",(0,r.jsx)(n.code,{children:"local_demo"})," \u8BBE\u7F6E\u4E3A False\u3002"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'local_demo = True\n\n# \u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0C\u5C06\u5728 CPU \u76EE\u6807\u4E0A\u6267\u884C\u3002\n# \u9009\u62E9 \'llvm\'\u3001\'opencl\' \u548C \'opencl -device=adreno\'\ntarget = "llvm"\n\n# \u66F4\u6539\u76EE\u6807\u914D\u7F6E\u3002\n# \u8FD0\u884C `adb shell cat /proc/cpuinfo` \u4EE5\u67E5\u627E\u67B6\u6784\u3002\narch = "arm64"\ntarget_host = "llvm -mtriple=%s-linux-android" % arch\n\n# \u81EA\u52A8\u8C03\u6574\u662F\u8BA1\u7B97\u548C\u8017\u65F6\u7684\u4EFB\u52A1\uFF0C\u56E0\u6B64\u9ED8\u8BA4\u60C5\u51B5\u4E0B\u7981\u7528\u3002\n# \u5982\u679C\u9700\u8981\uFF0C\u8BF7\u542F\u7528\u5B83\u3002\u8BF7\u542F\u7528\u5B83\u3002\nis_tuning = False\ntune_log = "adreno-resnet50.log"\n\n# \u542F\u7528 OpenCLML \u52A0\u901F\u8FD0\u7B97\u7B26\u5E93\u3002\nenable_clml = False\ncross_compiler = (\n    os.getenv("ANDROID_NDK_HOME", "")\n    + "/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android28-clang"\n)\n'})}),"\n",(0,r.jsx)(n.h1,{id:"\u5236\u4F5C-keras-resnet50-\u6A21\u578B",children:"\u5236\u4F5C Keras Resnet50 \u6A21\u578B"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from tensorflow.keras.applications.resnet50 import ResNet50\n\ntmp_path = utils.tempdir()\nmodel_file_name = tmp_path.relpath("resnet50.h5")\n\nmodel = ResNet50(include_top=True, weights="imagenet", input_shape=(224, 224, 3), classes=1000)\nmodel.save(model_file_name)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Out:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-info",children:"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels.h5\n\n     8192/102967424 [..............................] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n  7208960/102967424 [=>............................] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n  8380416/102967424 [=>............................] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 16769024/102967424 [===>..........................] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 23412736/102967424 [=====>........................] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 25157632/102967424 [======>.......................] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 33546240/102967424 [========>.....................] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 40189952/102967424 [==========>...................] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 41934848/102967424 [===========>..................] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 50143232/102967424 [=============>................] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 50323456/102967424 [=============>................] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 56967168/102967424 [===============>..............] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 58712064/102967424 [================>.............] - ETA: 1s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 65355776/102967424 [==================>...........] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 67100672/102967424 [==================>...........] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 69296128/102967424 [===================>..........] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 71540736/102967424 [===================>..........] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 73269248/102967424 [====================>.........] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 75489280/102967424 [====================>.........] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 83877888/102967424 [=======================>......] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 90521600/102967424 [=========================>....] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 92266496/102967424 [=========================>....] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n 99598336/102967424 [============================>.] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n100646912/102967424 [============================>.] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n102850560/102967424 [============================>.] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n102967424/102967424 [==============================] - 3s 0us/step\n"})}),"\n",(0,r.jsx)(n.h1,{id:"\u52A0\u8F7D\u6A21\u578B",children:"\u52A0\u8F7D\u6A21\u578B"}),"\n",(0,r.jsx)(n.p,{children:"\u5C06\u6A21\u578B\u4ECE\u4EFB\u4F55\u6846\u67B6\u8F6C\u6362\u4E3A tvm relay \u6A21\u5757\u3002tvmc.load \u652F\u6301\u6765\u81EA\u4EFB\u4F55\u6846\u67B6\u7684\u6A21\u578B\uFF08\u4F8B\u5982 tensorflow saves_model\u3001onnx\u3001tflite \u7B49\uFF09\uFF0C\u5E76\u81EA\u52A8\u68C0\u6D4B\u6587\u4EF6\u7C7B\u578B\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"tvmc_model = tvmc.load(model_file_name)\n\nprint(tvmc_model.mod)\n\n\n# tvmc_model \u5305\u542B tvmc_mode.mod\uFF0C\u5373 relay \u6A21\u5757\u548C tvmc_model.params\uFF0C\u5373\u6A21\u5757\u7684\u53C2\u6570\u3002\n"})}),"\n",(0,r.jsx)(n.p,{children:"Out:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def @main(%input_2: Tensor[(1, 224, 224, 3), float32], %v_param_1: Tensor[(7, 7, 3, 64), float32], %v_param_2: Tensor[(64), float32], %v_param_3: Tensor[(64), float32], %v_param_4: Tensor[(64), float32], %v_param_5: Tensor[(64), float32], %v_param_6: Tensor[(64), float32], %v_param_19: Tensor[(1, 1, 64, 256), float32], %v_param_20: Tensor[(256), float32], %v_param_23: Tensor[(256), float32], %v_param_24: Tensor[(256), float32], %v_param_25: Tensor[(256), float32], %v_param_26: Tensor[(256), float32], %v_param_7: Tensor[(1, 1, 64, 64), float32], %v_param_8: Tensor[(64), float32], %v_param_9: Tensor[(64), float32], %v_param_10: Tensor[(64), float32], %v_param_11: Tensor[(64), float32], %v_param_12: Tensor[(64), float32], %v_param_13: Tensor[(3, 3, 64, 64), float32], %v_param_14: Tensor[(64), float32], %v_param_15: Tensor[(64), float32], %v_param_16: Tensor[(64), float32], %v_param_17: Tensor[(64), float32], %v_param_18: Tensor[(64), float32], %v_param_21: Tensor[(1, 1, 64, 256), float32], %v_param_22: Tensor[(256), float32], %v_param_27: Tensor[(256), float32], %v_param_28: Tensor[(256), float32], %v_param_29: Tensor[(256), float32], %v_param_30: Tensor[(256), float32], %v_param_31: Tensor[(1, 1, 256, 64), float32], %v_param_32: Tensor[(64), float32], %v_param_33: Tensor[(64), float32], %v_param_34: Tensor[(64), float32], %v_param_35: Tensor[(64), float32], %v_param_36: Tensor[(64), float32], %v_param_37: Tensor[(3, 3, 64, 64), float32], %v_param_38: Tensor[(64), float32], %v_param_39: Tensor[(64), float32], %v_param_40: Tensor[(64), float32], %v_param_41: Tensor[(64), float32], %v_param_42: Tensor[(64), float32], %v_param_43: Tensor[(1, 1, 64, 256), float32], %v_param_44: Tensor[(256), float32], %v_param_45: Tensor[(256), float32], %v_param_46: Tensor[(256), float32], %v_param_47: Tensor[(256), float32], %v_param_48: Tensor[(256), float32], %v_param_49: Tensor[(1, 1, 256, 64), float32], %v_param_50: Tensor[(64), float32], %v_param_51: Tensor[(64), float32], %v_param_52: Tensor[(64), float32], %v_param_53: Tensor[(64), float32], %v_param_54: Tensor[(64), float32], %v_param_55: Tensor[(3, 3, 64, 64), float32], %v_param_56: Tensor[(64), float32], %v_param_57: Tensor[(64), float32], %v_param_58: Tensor[(64), float32], %v_param_59: Tensor[(64), float32], %v_param_60: Tensor[(64), float32], %v_param_61: Tensor[(1, 1, 64, 256), float32], %v_param_62: Tensor[(256), float32], %v_param_63: Tensor[(256), float32], %v_param_64: Tensor[(256), float32], %v_param_65: Tensor[(256), float32], %v_param_66: Tensor[(256), float32], %v_param_79: Tensor[(1, 1, 256, 512), float32], %v_param_80: Tensor[(512), float32], %v_param_83: Tensor[(512), float32], %v_param_84: Tensor[(512), float32], %v_param_85: Tensor[(512), float32], %v_param_86: Tensor[(512), float32], %v_param_67: Tensor[(1, 1, 256, 128), float32], %v_param_68: Tensor[(128), float32], %v_param_69: Tensor[(128), float32], %v_param_70: Tensor[(128), float32], %v_param_71: Tensor[(128), float32], %v_param_72: Tensor[(128), float32], %v_param_73: Tensor[(3, 3, 128, 128), float32], %v_param_74: Tensor[(128), float32], %v_param_75: Tensor[(128), float32], %v_param_76: Tensor[(128), float32], %v_param_77: Tensor[(128), float32], %v_param_78: Tensor[(128), float32], %v_param_81: Tensor[(1, 1, 128, 512), float32], %v_param_82: Tensor[(512), float32], %v_param_87: Tensor[(512), float32], %v_param_88: Tensor[(512), float32], %v_param_89: Tensor[(512), float32], %v_param_90: Tensor[(512), float32], %v_param_91: Tensor[(1, 1, 512, 128), float32], %v_param_92: Tensor[(128), float32], %v_param_93: Tensor[(128), float32], %v_param_94: Tensor[(128), float32], %v_param_95: Tensor[(128), float32], %v_param_96: Tensor[(128), float32], %v_param_97: Tensor[(3, 3, 128, 128), float32], %v_param_98: Tensor[(128), float32], %v_param_99: Tensor[(128), float32], %v_param_100: Tensor[(128), float32], %v_param_101: Tensor[(128), float32], %v_param_102: Tensor[(128), float32], %v_param_103: Tensor[(1, 1, 128, 512), float32], %v_param_104: Tensor[(512), float32], %v_param_105: Tensor[(512), float32], %v_param_106: Tensor[(512), float32], %v_param_107: Tensor[(512), float32], %v_param_108: Tensor[(512), float32], %v_param_109: Tensor[(1, 1, 512, 128), float32], %v_param_110: Tensor[(128), float32], %v_param_111: Tensor[(128), float32], %v_param_112: Tensor[(128), float32], %v_param_113: Tensor[(128), float32], %v_param_114: Tensor[(128), float32], %v_param_115: Tensor[(3, 3, 128, 128), float32], %v_param_116: Tensor[(128), float32], %v_param_117: Tensor[(128), float32], %v_param_118: Tensor[(128), float32], %v_param_119: Tensor[(128), float32], %v_param_120: Tensor[(128), float32], %v_param_121: Tensor[(1, 1, 128, 512), float32], %v_param_122: Tensor[(512), float32], %v_param_123: Tensor[(512), float32], %v_param_124: Tensor[(512), float32], %v_param_125: Tensor[(512), float32], %v_param_126: Tensor[(512), float32], %v_param_127: Tensor[(1, 1, 512, 128), float32], %v_param_128: Tensor[(128), float32], %v_param_129: Tensor[(128), float32], %v_param_130: Tensor[(128), float32], %v_param_131: Tensor[(128), float32], %v_param_132: Tensor[(128), float32], %v_param_133: Tensor[(3, 3, 128, 128), float32], %v_param_134: Tensor[(128), float32], %v_param_135: Tensor[(128), float32], %v_param_136: Tensor[(128), float32], %v_param_137: Tensor[(128), float32], %v_param_138: Tensor[(128), float32], %v_param_139: Tensor[(1, 1, 128, 512), float32], %v_param_140: Tensor[(512), float32], %v_param_141: Tensor[(512), float32], %v_param_142: Tensor[(512), float32], %v_param_143: Tensor[(512), float32], %v_param_144: Tensor[(512), float32], %v_param_157: Tensor[(1, 1, 512, 1024), float32], %v_param_158: Tensor[(1024), float32], %v_param_161: Tensor[(1024), float32], %v_param_162: Tensor[(1024), float32], %v_param_163: Tensor[(1024), float32], %v_param_164: Tensor[(1024), float32], %v_param_145: Tensor[(1, 1, 512, 256), float32], %v_param_146: Tensor[(256), float32], %v_param_147: Tensor[(256), float32], %v_param_148: Tensor[(256), float32], %v_param_149: Tensor[(256), float32], %v_param_150: Tensor[(256), float32], %v_param_151: Tensor[(3, 3, 256, 256), float32], %v_param_152: Tensor[(256), float32], %v_param_153: Tensor[(256), float32], %v_param_154: Tensor[(256), float32], %v_param_155: Tensor[(256), float32], %v_param_156: Tensor[(256), float32], %v_param_159: Tensor[(1, 1, 256, 1024), float32], %v_param_160: Tensor[(1024), float32], %v_param_165: Tensor[(1024), float32], %v_param_166: Tensor[(1024), float32], %v_param_167: Tensor[(1024), float32], %v_param_168: Tensor[(1024), float32], %v_param_169: Tensor[(1, 1, 1024, 256), float32], %v_param_170: Tensor[(256), float32], %v_param_171: Tensor[(256), float32], %v_param_172: Tensor[(256), float32], %v_param_173: Tensor[(256), float32], %v_param_174: Tensor[(256), float32], %v_param_175: Tensor[(3, 3, 256, 256), float32], %v_param_176: Tensor[(256), float32], %v_param_177: Tensor[(256), float32], %v_param_178: Tensor[(256), float32], %v_param_179: Tensor[(256), float32], %v_param_180: Tensor[(256), float32], %v_param_181: Tensor[(1, 1, 256, 1024), float32], %v_param_182: Tensor[(1024), float32], %v_param_183: Tensor[(1024), float32], %v_param_184: Tensor[(1024), float32], %v_param_185: Tensor[(1024), float32], %v_param_186: Tensor[(1024), float32], %v_param_187: Tensor[(1, 1, 1024, 256), float32], %v_param_188: Tensor[(256), float32], %v_param_189: Tensor[(256), float32], %v_param_190: Tensor[(256), float32], %v_param_191: Tensor[(256), float32], %v_param_192: Tensor[(256), float32], %v_param_193: Tensor[(3, 3, 256, 256), float32], %v_param_194: Tensor[(256), float32], %v_param_195: Tensor[(256), float32], %v_param_196: Tensor[(256), float32], %v_param_197: Tensor[(256), float32], %v_param_198: Tensor[(256), float32], %v_param_199: Tensor[(1, 1, 256, 1024), float32], %v_param_200: Tensor[(1024), float32], %v_param_201: Tensor[(1024), float32], %v_param_202: Tensor[(1024), float32], %v_param_203: Tensor[(1024), float32], %v_param_204: Tensor[(1024), float32], %v_param_205: Tensor[(1, 1, 1024, 256), float32], %v_param_206: Tensor[(256), float32], %v_param_207: Tensor[(256), float32], %v_param_208: Tensor[(256), float32], %v_param_209: Tensor[(256), float32], %v_param_210: Tensor[(256), float32], %v_param_211: Tensor[(3, 3, 256, 256), float32], %v_param_212: Tensor[(256), float32], %v_param_213: Tensor[(256), float32], %v_param_214: Tensor[(256), float32], %v_param_215: Tensor[(256), float32], %v_param_216: Tensor[(256), float32], %v_param_217: Tensor[(1, 1, 256, 1024), float32], %v_param_218: Tensor[(1024), float32], %v_param_219: Tensor[(1024), float32], %v_param_220: Tensor[(1024), float32], %v_param_221: Tensor[(1024), float32], %v_param_222: Tensor[(1024), float32], %v_param_223: Tensor[(1, 1, 1024, 256), float32], %v_param_224: Tensor[(256), float32], %v_param_225: Tensor[(256), float32], %v_param_226: Tensor[(256), float32], %v_param_227: Tensor[(256), float32], %v_param_228: Tensor[(256), float32], %v_param_229: Tensor[(3, 3, 256, 256), float32], %v_param_230: Tensor[(256), float32], %v_param_231: Tensor[(256), float32], %v_param_232: Tensor[(256), float32], %v_param_233: Tensor[(256), float32], %v_param_234: Tensor[(256), float32], %v_param_235: Tensor[(1, 1, 256, 1024), float32], %v_param_236: Tensor[(1024), float32], %v_param_237: Tensor[(1024), float32], %v_param_238: Tensor[(1024), float32], %v_param_239: Tensor[(1024), float32], %v_param_240: Tensor[(1024), float32], %v_param_241: Tensor[(1, 1, 1024, 256), float32], %v_param_242: Tensor[(256), float32], %v_param_243: Tensor[(256), float32], %v_param_244: Tensor[(256), float32], %v_param_245: Tensor[(256), float32], %v_param_246: Tensor[(256), float32], %v_param_247: Tensor[(3, 3, 256, 256), float32], %v_param_248: Tensor[(256), float32], %v_param_249: Tensor[(256), float32], %v_param_250: Tensor[(256), float32], %v_param_251: Tensor[(256), float32], %v_param_252: Tensor[(256), float32], %v_param_253: Tensor[(1, 1, 256, 1024), float32], %v_param_254: Tensor[(1024), float32], %v_param_255: Tensor[(1024), float32], %v_param_256: Tensor[(1024), float32], %v_param_257: Tensor[(1024), float32], %v_param_258: Tensor[(1024), float32], %v_param_271: Tensor[(1, 1, 1024, 2048), float32], %v_param_272: Tensor[(2048), float32], %v_param_275: Tensor[(2048), float32], %v_param_276: Tensor[(2048), float32], %v_param_277: Tensor[(2048), float32], %v_param_278: Tensor[(2048), float32], %v_param_259: Tensor[(1, 1, 1024, 512), float32], %v_param_260: Tensor[(512), float32], %v_param_261: Tensor[(512), float32], %v_param_262: Tensor[(512), float32], %v_param_263: Tensor[(512), float32], %v_param_264: Tensor[(512), float32], %v_param_265: Tensor[(3, 3, 512, 512), float32], %v_param_266: Tensor[(512), float32], %v_param_267: Tensor[(512), float32], %v_param_268: Tensor[(512), float32], %v_param_269: Tensor[(512), float32], %v_param_270: Tensor[(512), float32], %v_param_273: Tensor[(1, 1, 512, 2048), float32], %v_param_274: Tensor[(2048), float32], %v_param_279: Tensor[(2048), float32], %v_param_280: Tensor[(2048), float32], %v_param_281: Tensor[(2048), float32], %v_param_282: Tensor[(2048), float32], %v_param_283: Tensor[(1, 1, 2048, 512), float32], %v_param_284: Tensor[(512), float32], %v_param_285: Tensor[(512), float32], %v_param_286: Tensor[(512), float32], %v_param_287: Tensor[(512), float32], %v_param_288: Tensor[(512), float32], %v_param_289: Tensor[(3, 3, 512, 512), float32], %v_param_290: Tensor[(512), float32], %v_param_291: Tensor[(512), float32], %v_param_292: Tensor[(512), float32], %v_param_293: Tensor[(512), float32], %v_param_294: Tensor[(512), float32], %v_param_295: Tensor[(1, 1, 512, 2048), float32], %v_param_296: Tensor[(2048), float32], %v_param_297: Tensor[(2048), float32], %v_param_298: Tensor[(2048), float32], %v_param_299: Tensor[(2048), float32], %v_param_300: Tensor[(2048), float32], %v_param_301: Tensor[(1, 1, 2048, 512), float32], %v_param_302: Tensor[(512), float32], %v_param_303: Tensor[(512), float32], %v_param_304: Tensor[(512), float32], %v_param_305: Tensor[(512), float32], %v_param_306: Tensor[(512), float32], %v_param_307: Tensor[(3, 3, 512, 512), float32], %v_param_308: Tensor[(512), float32], %v_param_309: Tensor[(512), float32], %v_param_310: Tensor[(512), float32], %v_param_311: Tensor[(512), float32], %v_param_312: Tensor[(512), float32], %v_param_313: Tensor[(1, 1, 512, 2048), float32], %v_param_314: Tensor[(2048), float32], %v_param_315: Tensor[(2048), float32], %v_param_316: Tensor[(2048), float32], %v_param_317: Tensor[(2048), float32], %v_param_318: Tensor[(2048), float32], %v_param_319: Tensor[(1000, 2048), float32], %v_param_320: Tensor[(1000), float32]) {\n  %0 = nn.pad(%input_2, 0, pad_width=[[0, 0], [3, 3], [3, 3], [0, 0]]);\n  %1 = nn.conv2d(%0, %v_param_1, strides=[2, 2], padding=[0, 0, 0, 0], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="HWIO");\n  %2 = nn.bias_add(%1, %v_param_2, axis=-1);\n  %3 = nn.batch_norm(%2, %v_param_3, %v_param_4, %v_param_5, %v_param_6, axis=3, epsilon=1.001e-05f);\n  %4 = %3.0;\n  %5 = nn.relu(%4);\n  %6 = nn.pad(%5, 0, pad_width=[[0, 0], [1, 1], [1, 1], [0, 0]]);\n  %7 = nn.max_pool2d(%6, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC");\n  %8 = nn.conv2d(%7, %v_param_19, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %9 = nn.bias_add(%8, %v_param_20, axis=-1);\n  %10 = nn.batch_norm(%9, %v_param_23, %v_param_24, %v_param_25, %v_param_26, axis=3, epsilon=1.001e-05f);\n  %11 = nn.conv2d(%7, %v_param_7, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %12 = nn.bias_add(%11, %v_param_8, axis=-1);\n  %13 = nn.batch_norm(%12, %v_param_9, %v_param_10, %v_param_11, %v_param_12, axis=3, epsilon=1.001e-05f);\n  %14 = %13.0;\n  %15 = nn.relu(%14);\n  %16 = nn.conv2d(%15, %v_param_13, padding=[1i64, 1i64, 1i64, 1i64], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %17 = nn.bias_add(%16, %v_param_14, axis=-1);\n  %18 = nn.batch_norm(%17, %v_param_15, %v_param_16, %v_param_17, %v_param_18, axis=3, epsilon=1.001e-05f);\n  %19 = %18.0;\n  %20 = nn.relu(%19);\n  %21 = nn.conv2d(%20, %v_param_21, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %22 = nn.bias_add(%21, %v_param_22, axis=-1);\n  %23 = nn.batch_norm(%22, %v_param_27, %v_param_28, %v_param_29, %v_param_30, axis=3, epsilon=1.001e-05f);\n  %24 = %10.0;\n  %25 = %23.0;\n  %26 = add(%24, %25);\n  %27 = nn.relu(%26);\n  %28 = nn.conv2d(%27, %v_param_31, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %29 = nn.bias_add(%28, %v_param_32, axis=-1);\n  %30 = nn.batch_norm(%29, %v_param_33, %v_param_34, %v_param_35, %v_param_36, axis=3, epsilon=1.001e-05f);\n  %31 = %30.0;\n  %32 = nn.relu(%31);\n  %33 = nn.conv2d(%32, %v_param_37, padding=[1i64, 1i64, 1i64, 1i64], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %34 = nn.bias_add(%33, %v_param_38, axis=-1);\n  %35 = nn.batch_norm(%34, %v_param_39, %v_param_40, %v_param_41, %v_param_42, axis=3, epsilon=1.001e-05f);\n  %36 = %35.0;\n  %37 = nn.relu(%36);\n  %38 = nn.conv2d(%37, %v_param_43, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %39 = nn.bias_add(%38, %v_param_44, axis=-1);\n  %40 = nn.batch_norm(%39, %v_param_45, %v_param_46, %v_param_47, %v_param_48, axis=3, epsilon=1.001e-05f);\n  %41 = %40.0;\n  %42 = add(%27, %41);\n  %43 = nn.relu(%42);\n  %44 = nn.conv2d(%43, %v_param_49, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %45 = nn.bias_add(%44, %v_param_50, axis=-1);\n  %46 = nn.batch_norm(%45, %v_param_51, %v_param_52, %v_param_53, %v_param_54, axis=3, epsilon=1.001e-05f);\n  %47 = %46.0;\n  %48 = nn.relu(%47);\n  %49 = nn.conv2d(%48, %v_param_55, padding=[1i64, 1i64, 1i64, 1i64], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %50 = nn.bias_add(%49, %v_param_56, axis=-1);\n  %51 = nn.batch_norm(%50, %v_param_57, %v_param_58, %v_param_59, %v_param_60, axis=3, epsilon=1.001e-05f);\n  %52 = %51.0;\n  %53 = nn.relu(%52);\n  %54 = nn.conv2d(%53, %v_param_61, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %55 = nn.bias_add(%54, %v_param_62, axis=-1);\n  %56 = nn.batch_norm(%55, %v_param_63, %v_param_64, %v_param_65, %v_param_66, axis=3, epsilon=1.001e-05f);\n  %57 = %56.0;\n  %58 = add(%43, %57);\n  %59 = nn.relu(%58);\n  %60 = nn.conv2d(%59, %v_param_79, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %61 = nn.bias_add(%60, %v_param_80, axis=-1);\n  %62 = nn.batch_norm(%61, %v_param_83, %v_param_84, %v_param_85, %v_param_86, axis=3, epsilon=1.001e-05f);\n  %63 = nn.conv2d(%59, %v_param_67, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %64 = nn.bias_add(%63, %v_param_68, axis=-1);\n  %65 = nn.batch_norm(%64, %v_param_69, %v_param_70, %v_param_71, %v_param_72, axis=3, epsilon=1.001e-05f);\n  %66 = %65.0;\n  %67 = nn.relu(%66);\n  %68 = nn.conv2d(%67, %v_param_73, padding=[1i64, 1i64, 1i64, 1i64], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %69 = nn.bias_add(%68, %v_param_74, axis=-1);\n  %70 = nn.batch_norm(%69, %v_param_75, %v_param_76, %v_param_77, %v_param_78, axis=3, epsilon=1.001e-05f);\n  %71 = %70.0;\n  %72 = nn.relu(%71);\n  %73 = nn.conv2d(%72, %v_param_81, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %74 = nn.bias_add(%73, %v_param_82, axis=-1);\n  %75 = nn.batch_norm(%74, %v_param_87, %v_param_88, %v_param_89, %v_param_90, axis=3, epsilon=1.001e-05f);\n  %76 = %62.0;\n  %77 = %75.0;\n  %78 = add(%76, %77);\n  %79 = nn.relu(%78);\n  %80 = nn.conv2d(%79, %v_param_91, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %81 = nn.bias_add(%80, %v_param_92, axis=-1);\n  %82 = nn.batch_norm(%81, %v_param_93, %v_param_94, %v_param_95, %v_param_96, axis=3, epsilon=1.001e-05f);\n  %83 = %82.0;\n  %84 = nn.relu(%83);\n  %85 = nn.conv2d(%84, %v_param_97, padding=[1i64, 1i64, 1i64, 1i64], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %86 = nn.bias_add(%85, %v_param_98, axis=-1);\n  %87 = nn.batch_norm(%86, %v_param_99, %v_param_100, %v_param_101, %v_param_102, axis=3, epsilon=1.001e-05f);\n  %88 = %87.0;\n  %89 = nn.relu(%88);\n  %90 = nn.conv2d(%89, %v_param_103, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %91 = nn.bias_add(%90, %v_param_104, axis=-1);\n  %92 = nn.batch_norm(%91, %v_param_105, %v_param_106, %v_param_107, %v_param_108, axis=3, epsilon=1.001e-05f);\n  %93 = %92.0;\n  %94 = add(%79, %93);\n  %95 = nn.relu(%94);\n  %96 = nn.conv2d(%95, %v_param_109, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %97 = nn.bias_add(%96, %v_param_110, axis=-1);\n  %98 = nn.batch_norm(%97, %v_param_111, %v_param_112, %v_param_113, %v_param_114, axis=3, epsilon=1.001e-05f);\n  %99 = %98.0;\n  %100 = nn.relu(%99);\n  %101 = nn.conv2d(%100, %v_param_115, padding=[1i64, 1i64, 1i64, 1i64], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %102 = nn.bias_add(%101, %v_param_116, axis=-1);\n  %103 = nn.batch_norm(%102, %v_param_117, %v_param_118, %v_param_119, %v_param_120, axis=3, epsilon=1.001e-05f);\n  %104 = %103.0;\n  %105 = nn.relu(%104);\n  %106 = nn.conv2d(%105, %v_param_121, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %107 = nn.bias_add(%106, %v_param_122, axis=-1);\n  %108 = nn.batch_norm(%107, %v_param_123, %v_param_124, %v_param_125, %v_param_126, axis=3, epsilon=1.001e-05f);\n  %109 = %108.0;\n  %110 = add(%95, %109);\n  %111 = nn.relu(%110);\n  %112 = nn.conv2d(%111, %v_param_127, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %113 = nn.bias_add(%112, %v_param_128, axis=-1);\n  %114 = nn.batch_norm(%113, %v_param_129, %v_param_130, %v_param_131, %v_param_132, axis=3, epsilon=1.001e-05f);\n  %115 = %114.0;\n  %116 = nn.relu(%115);\n  %117 = nn.conv2d(%116, %v_param_133, padding=[1i64, 1i64, 1i64, 1i64], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %118 = nn.bias_add(%117, %v_param_134, axis=-1);\n  %119 = nn.batch_norm(%118, %v_param_135, %v_param_136, %v_param_137, %v_param_138, axis=3, epsilon=1.001e-05f);\n  %120 = %119.0;\n  %121 = nn.relu(%120);\n  %122 = nn.conv2d(%121, %v_param_139, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %123 = nn.bias_add(%122, %v_param_140, axis=-1);\n  %124 = nn.batch_norm(%123, %v_param_141, %v_param_142, %v_param_143, %v_param_144, axis=3, epsilon=1.001e-05f);\n  %125 = %124.0;\n  %126 = add(%111, %125);\n  %127 = nn.relu(%126);\n  %128 = nn.conv2d(%127, %v_param_157, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %129 = nn.bias_add(%128, %v_param_158, axis=-1);\n  %130 = nn.batch_norm(%129, %v_param_161, %v_param_162, %v_param_163, %v_param_164, axis=3, epsilon=1.001e-05f);\n  %131 = nn.conv2d(%127, %v_param_145, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %132 = nn.bias_add(%131, %v_param_146, axis=-1);\n  %133 = nn.batch_norm(%132, %v_param_147, %v_param_148, %v_param_149, %v_param_150, axis=3, epsilon=1.001e-05f);\n  %134 = %133.0;\n  %135 = nn.relu(%134);\n  %136 = nn.conv2d(%135, %v_param_151, padding=[1i64, 1i64, 1i64, 1i64], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %137 = nn.bias_add(%136, %v_param_152, axis=-1);\n  %138 = nn.batch_norm(%137, %v_param_153, %v_param_154, %v_param_155, %v_param_156, axis=3, epsilon=1.001e-05f);\n  %139 = %138.0;\n  %140 = nn.relu(%139);\n  %141 = nn.conv2d(%140, %v_param_159, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %142 = nn.bias_add(%141, %v_param_160, axis=-1);\n  %143 = nn.batch_norm(%142, %v_param_165, %v_param_166, %v_param_167, %v_param_168, axis=3, epsilon=1.001e-05f);\n  %144 = %130.0;\n  %145 = %143.0;\n  %146 = add(%144, %145);\n  %147 = nn.relu(%146);\n  %148 = nn.conv2d(%147, %v_param_169, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %149 = nn.bias_add(%148, %v_param_170, axis=-1);\n  %150 = nn.batch_norm(%149, %v_param_171, %v_param_172, %v_param_173, %v_param_174, axis=3, epsilon=1.001e-05f);\n  %151 = %150.0;\n  %152 = nn.relu(%151);\n  %153 = nn.conv2d(%152, %v_param_175, padding=[1i64, 1i64, 1i64, 1i64], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %154 = nn.bias_add(%153, %v_param_176, axis=-1);\n  %155 = nn.batch_norm(%154, %v_param_177, %v_param_178, %v_param_179, %v_param_180, axis=3, epsilon=1.001e-05f);\n  %156 = %155.0;\n  %157 = nn.relu(%156);\n  %158 = nn.conv2d(%157, %v_param_181, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %159 = nn.bias_add(%158, %v_param_182, axis=-1);\n  %160 = nn.batch_norm(%159, %v_param_183, %v_param_184, %v_param_185, %v_param_186, axis=3, epsilon=1.001e-05f);\n  %161 = %160.0;\n  %162 = add(%147, %161);\n  %163 = nn.relu(%162);\n  %164 = nn.conv2d(%163, %v_param_187, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %165 = nn.bias_add(%164, %v_param_188, axis=-1);\n  %166 = nn.batch_norm(%165, %v_param_189, %v_param_190, %v_param_191, %v_param_192, axis=3, epsilon=1.001e-05f);\n  %167 = %166.0;\n  %168 = nn.relu(%167);\n  %169 = nn.conv2d(%168, %v_param_193, padding=[1i64, 1i64, 1i64, 1i64], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %170 = nn.bias_add(%169, %v_param_194, axis=-1);\n  %171 = nn.batch_norm(%170, %v_param_195, %v_param_196, %v_param_197, %v_param_198, axis=3, epsilon=1.001e-05f);\n  %172 = %171.0;\n  %173 = nn.relu(%172);\n  %174 = nn.conv2d(%173, %v_param_199, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %175 = nn.bias_add(%174, %v_param_200, axis=-1);\n  %176 = nn.batch_norm(%175, %v_param_201, %v_param_202, %v_param_203, %v_param_204, axis=3, epsilon=1.001e-05f);\n  %177 = %176.0;\n  %178 = add(%163, %177);\n  %179 = nn.relu(%178);\n  %180 = nn.conv2d(%179, %v_param_205, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %181 = nn.bias_add(%180, %v_param_206, axis=-1);\n  %182 = nn.batch_norm(%181, %v_param_207, %v_param_208, %v_param_209, %v_param_210, axis=3, epsilon=1.001e-05f);\n  %183 = %182.0;\n  %184 = nn.relu(%183);\n  %185 = nn.conv2d(%184, %v_param_211, padding=[1i64, 1i64, 1i64, 1i64], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %186 = nn.bias_add(%185, %v_param_212, axis=-1);\n  %187 = nn.batch_norm(%186, %v_param_213, %v_param_214, %v_param_215, %v_param_216, axis=3, epsilon=1.001e-05f);\n  %188 = %187.0;\n  %189 = nn.relu(%188);\n  %190 = nn.conv2d(%189, %v_param_217, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %191 = nn.bias_add(%190, %v_param_218, axis=-1);\n  %192 = nn.batch_norm(%191, %v_param_219, %v_param_220, %v_param_221, %v_param_222, axis=3, epsilon=1.001e-05f);\n  %193 = %192.0;\n  %194 = add(%179, %193);\n  %195 = nn.relu(%194);\n  %196 = nn.conv2d(%195, %v_param_223, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %197 = nn.bias_add(%196, %v_param_224, axis=-1);\n  %198 = nn.batch_norm(%197, %v_param_225, %v_param_226, %v_param_227, %v_param_228, axis=3, epsilon=1.001e-05f);\n  %199 = %198.0;\n  %200 = nn.relu(%199);\n  %201 = nn.conv2d(%200, %v_param_229, padding=[1i64, 1i64, 1i64, 1i64], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %202 = nn.bias_add(%201, %v_param_230, axis=-1);\n  %203 = nn.batch_norm(%202, %v_param_231, %v_param_232, %v_param_233, %v_param_234, axis=3, epsilon=1.001e-05f);\n  %204 = %203.0;\n  %205 = nn.relu(%204);\n  %206 = nn.conv2d(%205, %v_param_235, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %207 = nn.bias_add(%206, %v_param_236, axis=-1);\n  %208 = nn.batch_norm(%207, %v_param_237, %v_param_238, %v_param_239, %v_param_240, axis=3, epsilon=1.001e-05f);\n  %209 = %208.0;\n  %210 = add(%195, %209);\n  %211 = nn.relu(%210);\n  %212 = nn.conv2d(%211, %v_param_241, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %213 = nn.bias_add(%212, %v_param_242, axis=-1);\n  %214 = nn.batch_norm(%213, %v_param_243, %v_param_244, %v_param_245, %v_param_246, axis=3, epsilon=1.001e-05f);\n  %215 = %214.0;\n  %216 = nn.relu(%215);\n  %217 = nn.conv2d(%216, %v_param_247, padding=[1i64, 1i64, 1i64, 1i64], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %218 = nn.bias_add(%217, %v_param_248, axis=-1);\n  %219 = nn.batch_norm(%218, %v_param_249, %v_param_250, %v_param_251, %v_param_252, axis=3, epsilon=1.001e-05f);\n  %220 = %219.0;\n  %221 = nn.relu(%220);\n  %222 = nn.conv2d(%221, %v_param_253, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %223 = nn.bias_add(%222, %v_param_254, axis=-1);\n  %224 = nn.batch_norm(%223, %v_param_255, %v_param_256, %v_param_257, %v_param_258, axis=3, epsilon=1.001e-05f);\n  %225 = %224.0;\n  %226 = add(%211, %225);\n  %227 = nn.relu(%226);\n  %228 = nn.conv2d(%227, %v_param_271, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %229 = nn.bias_add(%228, %v_param_272, axis=-1);\n  %230 = nn.batch_norm(%229, %v_param_275, %v_param_276, %v_param_277, %v_param_278, axis=3, epsilon=1.001e-05f);\n  %231 = nn.conv2d(%227, %v_param_259, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %232 = nn.bias_add(%231, %v_param_260, axis=-1);\n  %233 = nn.batch_norm(%232, %v_param_261, %v_param_262, %v_param_263, %v_param_264, axis=3, epsilon=1.001e-05f);\n  %234 = %233.0;\n  %235 = nn.relu(%234);\n  %236 = nn.conv2d(%235, %v_param_265, padding=[1i64, 1i64, 1i64, 1i64], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %237 = nn.bias_add(%236, %v_param_266, axis=-1);\n  %238 = nn.batch_norm(%237, %v_param_267, %v_param_268, %v_param_269, %v_param_270, axis=3, epsilon=1.001e-05f);\n  %239 = %238.0;\n  %240 = nn.relu(%239);\n  %241 = nn.conv2d(%240, %v_param_273, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %242 = nn.bias_add(%241, %v_param_274, axis=-1);\n  %243 = nn.batch_norm(%242, %v_param_279, %v_param_280, %v_param_281, %v_param_282, axis=3, epsilon=1.001e-05f);\n  %244 = %230.0;\n  %245 = %243.0;\n  %246 = add(%244, %245);\n  %247 = nn.relu(%246);\n  %248 = nn.conv2d(%247, %v_param_283, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %249 = nn.bias_add(%248, %v_param_284, axis=-1);\n  %250 = nn.batch_norm(%249, %v_param_285, %v_param_286, %v_param_287, %v_param_288, axis=3, epsilon=1.001e-05f);\n  %251 = %250.0;\n  %252 = nn.relu(%251);\n  %253 = nn.conv2d(%252, %v_param_289, padding=[1i64, 1i64, 1i64, 1i64], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %254 = nn.bias_add(%253, %v_param_290, axis=-1);\n  %255 = nn.batch_norm(%254, %v_param_291, %v_param_292, %v_param_293, %v_param_294, axis=3, epsilon=1.001e-05f);\n  %256 = %255.0;\n  %257 = nn.relu(%256);\n  %258 = nn.conv2d(%257, %v_param_295, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %259 = nn.bias_add(%258, %v_param_296, axis=-1);\n  %260 = nn.batch_norm(%259, %v_param_297, %v_param_298, %v_param_299, %v_param_300, axis=3, epsilon=1.001e-05f);\n  %261 = %260.0;\n  %262 = add(%247, %261);\n  %263 = nn.relu(%262);\n  %264 = nn.conv2d(%263, %v_param_301, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %265 = nn.bias_add(%264, %v_param_302, axis=-1);\n  %266 = nn.batch_norm(%265, %v_param_303, %v_param_304, %v_param_305, %v_param_306, axis=3, epsilon=1.001e-05f);\n  %267 = %266.0;\n  %268 = nn.relu(%267);\n  %269 = nn.conv2d(%268, %v_param_307, padding=[1i64, 1i64, 1i64, 1i64], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO");\n  %270 = nn.bias_add(%269, %v_param_308, axis=-1);\n  %271 = nn.batch_norm(%270, %v_param_309, %v_param_310, %v_param_311, %v_param_312, axis=3, epsilon=1.001e-05f);\n  %272 = %271.0;\n  %273 = nn.relu(%272);\n  %274 = nn.conv2d(%273, %v_param_313, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO");\n  %275 = nn.bias_add(%274, %v_param_314, axis=-1);\n  %276 = nn.batch_norm(%275, %v_param_315, %v_param_316, %v_param_317, %v_param_318, axis=3, epsilon=1.001e-05f);\n  %277 = %276.0;\n  %278 = add(%263, %277);\n  %279 = nn.relu(%278);\n  %280 = nn.global_avg_pool2d(%279, layout="NHWC");\n  %281 = nn.batch_flatten(%280);\n  %282 = nn.dense(%281, %v_param_319, units=1000);\n  %283 = nn.bias_add(%282, %v_param_320);\n  nn.softmax(%283)\n}\n'})}),"\n",(0,r.jsx)(n.h1,{id:"\u81EA\u52A8\u8C03\u4F18",children:"\u81EA\u52A8\u8C03\u4F18"}),"\n",(0,r.jsxs)(n.p,{children:["\u73B0\u5728\uFF0C\u53EF\u4EE5\u4F7F\u7528\u4E0B\u9762\u7684 api \u4E3A\u4EFB\u4F55\u76EE\u6807\u5BF9\u6A21\u578B\u8FDB\u884C\u81EA\u52A8\u8C03\u4F18\u3002\u8C03\u6574\u9700\u8981 RPC \u8BBE\u7F6E\uFF0C\u8BF7\u53C2\u9605",(0,r.jsx)(n.a,{href:"https://tvm.apache.org/docs/v0.13.0/how_to/deploy/adreno.html",children:"\u5728 Adreno GPU \u4E0A\u90E8\u7F72"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'rpc_tracker_host = os.environ.get("TVM_TRACKER_HOST", "127.0.0.1")\nrpc_tracker_port = int(os.environ.get("TVM_TRACKER_PORT", 9190))\nrpc_key = "android"\nrpc_tracker = rpc_tracker_host + ":" + str(rpc_tracker_port)\n\n# \u81EA\u52A8\u8C03\u6574\u662F\u8BA1\u7B97\u5BC6\u96C6\u578B\u548C\u8017\u65F6\u7684\u4EFB\u52A1\u3002\n# \u5B83\u5728\u4E0A\u8FF0\u914D\u7F6E\u4E2D\u88AB\u8BBE\u7F6E\u4E3A False\uFF0C\u56E0\u4E3A\u6B64\u811A\u672C\u5728 x86 \u4E0A\u8FD0\u884C\u4EE5\u8FDB\u884C\u6F14\u793A\u3002\n# \u8BF7\u5C06 :code:`is_tuning` \u8BBE\u7F6E\u4E3A True \u4EE5\u542F\u7528\u81EA\u52A8\u8C03\u6574\u3002\n\n# \u6B64\u5916\uFF0C:code:`test_target` \u8BBE\u7F6E\u4E3A :code:`llvm`\uFF0C\u56E0\u4E3A\u6B64\u793A\u4F8B\u4EE5\u4F7F\u5176\u4E0E x86 \u6F14\u793A\u517C\u5BB9\u3002\n# \u8BF7\u5728\u4E0A\u8FF0\u914D\u7F6E\u4E2D\u5C06\u5176\u66F4\u6539\u4E3A :code:`opencl` \u6216 :code:`opencl -device=adreno` \u4EE5\u7528\u4E8E RPC \u76EE\u6807\u3002\n\nif is_tuning:\n    tvmc.tune(\n        tvmc_model,\n        target=target,\n        tuning_records=tune_log,\n        target_host=target_host,\n        hostname=rpc_tracker_host,\n        port=rpc_tracker_port,\n        rpc_key=rpc_key,\n        tuner="xgb",\n        repeat=30,\n        trials=3,\n        early_stopping=0,\n    )\n'})}),"\n",(0,r.jsx)(n.h1,{id:"\u7F16\u8BD1",children:"\u7F16\u8BD1"}),"\n",(0,r.jsx)(n.p,{children:"\u7F16\u8BD1\u4EE5\u751F\u6210 tvm \u4EA7\u54C1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# \u6B64\u751F\u6210\u7684\u793A\u4F8B\u5728\u6211\u4EEC\u7684 x86 \u670D\u52A1\u5668\u4E0A\u8FD0\u884C\u4EE5\u8FDB\u884C\u6F14\u793A\u3002\n# \u8981\u5728\u771F\u5B9E\u76EE\u6807\u4E0A\u7684 RPC \u4E0A\u90E8\u7F72\u548C\u8C03\u4F18\uFF0C\u8BF7\u5728\u4E0A\u8FF0\u914D\u7F6E\u90E8\u5206\u5C06 :code:`local_demo` \u8BBE\u7F6E\u4E3A False\u3002\n\n# OpenCLML \u5378\u8F7D\u5C06\u5C1D\u8BD5\u901A\u8FC7\u4F7F\u7528 OpenCLML \u4E13\u6709\u8FD0\u7B97\u7B26\u5E93\u52A0\u901F\u53D7\u652F\u6301\u7684\u8FD0\u7B97\u7B26\u3002\n# \u9ED8\u8BA4\u60C5\u51B5\u4E0B\uFF0C\u5728\u4E0A\u8FF0\u914D\u7F6E\u90E8\u5206 :code:`enable_clml` \u8BBE\u7F6E\u4E3A False\u3002\n\nif not enable_clml:\n    if local_demo:\n        tvmc_package = tvmc.compile(\n            tvmc_model,\n            target=target,\n        )\n    else:\n        tvmc_package = tvmc.compile(\n            tvmc_model,\n            target=target,\n            target_host=target_host,\n            cross=cross_compiler,\n            tuning_records=tune_log,\n        )\nelse:\n    # \u6216\u8005\uFF0C\u6211\u4EEC\u53EF\u4EE5\u4FDD\u5B58\u7F16\u8BD1\u8F93\u51FA\u5E76\u5C06\u5176\u4FDD\u5B58\u4E3A TVMCPackage\u3002\n    # \u8FD9\u79CD\u65B9\u5F0F\u907F\u514D\u4E86\u518D\u6B21\u7F16\u8BD1\u65F6\u52A0\u8F7D\u7F16\u8BD1\u7684\u6A21\u5757\u3002\n    target = target + ", clml"\n    pkg_path = tmp_path.relpath("keras-resnet50.tar")\n    tvmc.compile(\n        tvmc_model,\n        target=target,\n        target_host=target_host,\n        cross=cross_compiler,\n        tuning_records=tune_log,\n        package_path=pkg_path,\n    )\n\n    # \u52A0\u8F7D\u5DF2\u7F16\u8BD1\u7684\u5305\n    tvmc_package = TVMCPackage(package_path=pkg_path)\n\n# tvmc_package \u5305\u62EC tvmc_package.lib_path, tvmc_package.graph, tvmc_package.params\n# \u5DF2\u4FDD\u5B58\u7684 TVMPackage \u5B9E\u9645\u4E0A\u662F mod.so\u3001mod.json \u548C mod.params\u7684 tar \u5B58\u6863\u3002\n'})}),"\n",(0,r.jsx)(n.h1,{id:"\u90E8\u7F72\u548C\u8FD0\u884C",children:"\u90E8\u7F72\u548C\u8FD0\u884C"}),"\n",(0,r.jsx)(n.p,{children:"\u901A\u8FC7\u8BA9 tvmc \u4F7F\u7528\u968F\u673A\u6570\u636E\u586B\u5145\u8F93\u5165\u5728 RPC \u4E0A\u90E8\u7F72\u548C\u8FD0\u884C\u5DF2\u7F16\u8BD1\u7684\u6A21\u578B\u3002"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# \u5728 RPC \u8BBE\u7F6E\u4E0A\u8FD0\u884C\nif local_demo:\n    result = tvmc.run(tvmc_package, device="cpu", fill_mode="random")\nelse:\n    result = tvmc.run(\n        tvmc_package,\n        device="cl",\n        rpc_key=rpc_key,\n        hostname=rpc_tracker_host,\n        port=rpc_tracker_port,\n        fill_mode="random",\n    )\n\n# result \u662F\u8F93\u51FA\u7684\u5B57\u5178\u3002\nprint("Result:", result)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Out:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"Result: []\nOutput Names:\n ['output_0']\n"})})]})}function m(a={}){let{wrapper:n}={...(0,e.a)(),...a.components};return n?(0,r.jsx)(n,{...a,children:(0,r.jsx)(t,{...a})}):t(a)}},21494:function(a,n,_){_.d(n,{Z:function(){return l},a:function(){return o}});var b=_(39546);let r={},e=b.createContext(r);function o(a){let n=b.useContext(e);return b.useMemo(function(){return"function"==typeof a?a(n):{...n,...a}},[n,a])}function l(a){let n;return n=a.disableParentContext?"function"==typeof a.components?a.components(r):a.components||r:o(a.components),b.createElement(e.Provider,{value:n},a.children)}}}]);