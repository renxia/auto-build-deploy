"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["29227"],{21209:function(n,e,s){s.r(e),s.d(e,{default:()=>h,frontMatter:()=>r,metadata:()=>d,assets:()=>t,toc:()=>a,contentTitle:()=>c});var d=JSON.parse('{"id":"how_to/deploy/hls","title":"HLS \u540E\u7AEF\u793A\u4F8B","description":"TVM \u652F\u6301\u5E26\u6709 SDAccel \u7684 Xilinx FPGA \u677F\uFF0C\u63A5\u4E0B\u6765\u4ECB\u7ECD\u5982\u4F55\u5C06 TVM \u90E8\u7F72\u5230 AWS F1 FPGA \u5B9E\u4F8B\u3002","source":"@site/versioned_docs/version-0.12.0/how_to/deploy/04-hls.md","sourceDirName":"how_to/deploy","slug":"/how_to/deploy/hls","permalink":"/docs/tvm-cn/docs/0.12.0/how_to/deploy/hls","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/versioned_docs/version-0.12.0/how_to/deploy/04-hls.md","tags":[],"version":"0.12.0","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\u5C06 TVM \u96C6\u6210\u5230\u9879\u76EE\u4E2D","permalink":"/docs/tvm-cn/docs/0.12.0/how_to/deploy/integrate"},"next":{"title":"Relay Arm\xae \u8BA1\u7B97\u5E93\u96C6\u6210","permalink":"/docs/tvm-cn/docs/0.12.0/how_to/deploy/relay_arm"}}'),l=s("74132"),i=s("21494");let r={},c="HLS \u540E\u7AEF\u793A\u4F8B",t={},a=[{value:"\u8BBE\u7F6E",id:"\u8BBE\u7F6E",level:2},{value:"\u4EFF\u771F",id:"\u4EFF\u771F",level:2},{value:"\u5408\u6210",id:"\u5408\u6210",level:2},{value:"\u8FD0\u884C",id:"\u8FD0\u884C",level:2}];function o(n){let e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"hls-\u540E\u7AEF\u793A\u4F8B",children:"HLS \u540E\u7AEF\u793A\u4F8B"})}),"\n",(0,l.jsx)(e.p,{children:"TVM \u652F\u6301\u5E26\u6709 SDAccel \u7684 Xilinx FPGA \u677F\uFF0C\u63A5\u4E0B\u6765\u4ECB\u7ECD\u5982\u4F55\u5C06 TVM \u90E8\u7F72\u5230 AWS F1 FPGA \u5B9E\u4F8B\u3002"}),"\n",(0,l.jsx)(e.admonition,{type:"note",children:(0,l.jsx)(e.p,{children:"\u6B64\u529F\u80FD\u4ECD\u5904\u4E8E\u6D4B\u8BD5\u9636\u6BB5\uFF0C\u76EE\u524D\u65E0\u6CD5\u7528 SDAccel \u90E8\u7F72\u7AEF\u5230\u7AEF\u795E\u7ECF\u7F51\u7EDC\u3002"})}),"\n",(0,l.jsx)(e.p,{children:"\u672C\u6559\u7A0B\u4F7F\u7528\u4E86\u4E24\u4E2A Python \u811A\u672C\uFF1A"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"build.py - \u7528\u4E8E\u5408\u6210 FPGA \u6BD4\u7279\u6D41\u7684\u811A\u672C\u3002"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-python",children:'  import tvm\n  from tvm import te\n  \n  tgt= tvm.target.Target("sdaccel", host="llvm")\n  \n  n = te.var("n")\n  A = te.placeholder((n,), name=\'A\')\n  B = te.placeholder((n,), name=\'B\')\n  C = te.compute(A.shape, lambda i: A[i] + B[i], name="C")\n  \n  s = te.create_schedule(C.op)\n  px, x = s[C].split(C.op.axis[0], nparts=1)\n  \n  s[C].bind(px, tvm.te.thread_axis("pipeline"))\n  \n  fadd = tvm.build(s, [A, B, C], tgt, name="myadd")\n  fadd.save("myadd.o")\n  fadd.imported_modules[0].save("myadd.xclbin")\n  \n  tvm.contrib.cc.create_shared("myadd.so", ["myadd.o"])\n'})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"run.py - \u5C06 FPGA \u4F5C\u4E3A\u52A0\u901F\u5668\u7684\u811A\u672C\u3002"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-python",children:'  import tvm\n  import numpy as np\n  import os\n  \n  tgt = "sdaccel"\n  \n  fadd = tvm.runtime.load_module("myadd.so")\n  if os.environ.get("XCL_EMULATION_MODE"):\n      fadd_dev = tvm.runtime.load_module("myadd.xclbin")\n  else:\n      fadd_dev = tvm.runtime.load_module("myadd.awsxclbin")\n  fadd.import_module(fadd_dev)\n  \n  dev = tvm.device(tgt, 0)\n  \n  n = 1024\n  a = tvm.nd.array(np.random.uniform(size=n).astype("float32"), dev)\n  b = tvm.nd.array(np.random.uniform(size=n).astype("float32"), dev)\n  c = tvm.nd.array(np.zeros(n, dtype="float32"), dev)\n  \n  fadd(a, b, c)\n  tvm.testing.assert_allclose(c.numpy(), a.numpy() + b.numpy())\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"\u8BBE\u7F6E",children:"\u8BBE\u7F6E"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u7528 FPGA Developer AMI \u542F\u52A8\u5B9E\u4F8B\u3002\u65E0\u9700 F1 \u5B9E\u4F8B\u6765\u8FDB\u884C\u4EFF\u771F\u548C\u5408\u6210\uFF0C\u56E0\u6B64\u63A8\u8350\u7528\u5F00\u9500\u8F83\u4F4E\u7684\u5B9E\u4F8B\u3002"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u8BBE\u7F6E AWS FPGA \u5F00\u53D1\u5957\u4EF6\uFF1A"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  git clone https://github.com/aws/aws-fpga.git\n  cd aws-fpga\n  source sdaccel_setup.sh\n  source ${XILINX_SDX}/settings64.sh\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u542F\u7528 OpenCL \u524D\u8BBE\u7F6E TVM\u3002"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"\u4EFF\u771F",children:"\u4EFF\u771F"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u4E3A\u4EFF\u771F\u521B\u5EFA emconfig.json\uFF1A"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  emconfigutil --platform ${AWS_PLATFORM} --nd 1\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u5C06 emconfig.json \u590D\u5236\u5230 Python binary \u76EE\u5F55\u4E0B\uFF1A\u56E0\u4E3A\u5F53\u524D\u7684 Xilinx \u5DE5\u5177\u5305\u5047\u5B9A\u5BBF\u4E3B\u673A\u7684\u4E8C\u8FDB\u5236\u6587\u4EF6\u548C emconfig.json \u6587\u4EF6\u5904\u4E8E\u540C\u4E00\u8DEF\u5F84\u3002"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  cp emconfig.json $(dirname $(which python))\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u8FD0\u884C\u8F6F\u4EF6\u4EFF\u771F\uFF1A"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  export XCL_EMULATION_MODE=1\n  export XCL_TARGET=sw_emu\n  \n  python build.py\n  python run.py\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u8FD0\u884C\u786C\u4EF6\u4EFF\u771F\uFF1A"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  export XCL_EMULATION_MODE=1\n  export XCL_TARGET=hw_emu\n  \n  python build.py\n  python run.py\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"\u5408\u6210",children:"\u5408\u6210"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u7528\u4EE5\u4E0B\u811A\u672C\u8FDB\u884C\u5408\u6210\uFF1A"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  unset XCL_EMULATION_MODE\n  export XCL_TARGET=hw\n  \n  python build.py\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u521B\u5EFA AWS FPGA \u955C\u50CF\uFF0C\u5E76\u5C06\u5176\u4E0A\u4F20\u5230 AWS S3\uFF1A"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  ${SDACCEL_DIR}/tools/create_sdaccel_afi.sh \\\n      -xclbin=myadd.xclbin -o=myadd \\\n      -s3_bucket=<bucket-name> -s3_dcp_key=<dcp-folder-name> \\\n      -s3_logs_key=<logs-folder-name>\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"\u8FD9\u4F1A\u751F\u6210 awsxclbin \u6587\u4EF6\uFF08\u5728 F1 \u5B9E\u4F8B\u4E0A\u4F7F\u7528 AWS FPGA \u955C\u50CF\u5FC5\u9700\uFF09\u3002"}),"\n",(0,l.jsx)(e.h2,{id:"\u8FD0\u884C",children:"\u8FD0\u884C"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u542F\u52A8 Amazon EC2 F1 \u5B9E\u4F8B\u3002"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["\u5C06 ",(0,l.jsx)(e.code,{children:"myadd.so"}),"\uFF0C",(0,l.jsx)(e.code,{children:"myadd.awsxclbin"})," \u548C ",(0,l.jsx)(e.code,{children:"run.py"})," \u590D\u5236\u5230 F1 \u5B9E\u4F8B\u4E2D\u3002"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u8BBE\u7F6E AWS FPGA \u5F00\u53D1\u5957\u4EF6\uFF1A"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  git clone https://github.com/aws/aws-fpga.git\n  cd aws-fpga\n  source sdaccel_setup.sh\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u542F\u7528 OpenCL \u524D\u8BBE\u7F6E TVM\u3002"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u4EE5 root \u8EAB\u4EFD\u8BBE\u7F6E\u73AF\u5883\u53D8\u91CF\uFF1A"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  sudo sh\n  source ${INSTALL_ROOT}/setup.sh\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"\u8FD0\u884C\uFF1A"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"  python run.py\n"})}),"\n"]}),"\n"]})]})}function h(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(o,{...n})}):o(n)}},21494:function(n,e,s){s.d(e,{Z:function(){return c},a:function(){return r}});var d=s(39546);let l={},i=d.createContext(l);function r(n){let e=d.useContext(i);return d.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:r(n.components),d.createElement(i.Provider,{value:e},n.children)}}}]);