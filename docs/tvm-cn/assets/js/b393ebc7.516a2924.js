"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["15837"],{38037:function(n,e,r){r.r(e),r.d(e,{default:()=>m,frontMatter:()=>l,metadata:()=>a,assets:()=>s,toc:()=>c,contentTitle:()=>i});var a=JSON.parse('{"id":"how_to/optimize/cpu_conv","title":"\u5982\u4F55\u5728 CPU \u4E0A\u4F18\u5316 GEMM","description":"\u5355\u51FB \u6B64\u5904 \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801","source":"@site/docs/how_to/optimize/01-cpu_conv.md","sourceDirName":"how_to/optimize","slug":"/how_to/optimize/cpu_conv","permalink":"/docs/tvm-cn/docs/how_to/optimize/cpu_conv","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/docs/how_to/optimize/01-cpu_conv.md","tags":[],"version":"current","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"sidebarPosition":1,"frontMatter":{"title":"\u5982\u4F55\u5728 CPU \u4E0A\u4F18\u5316 GEMM"},"sidebar":"tutorialSidebar","previous":{"title":"\u4F18\u5316\u5F20\u91CF\u7B97\u5B50","permalink":"/docs/tvm-cn/docs/how_to/optimize/"},"next":{"title":"\u5982\u4F55\u5728 GPU \u4E0A\u4F18\u5316\u5377\u79EF","permalink":"/docs/tvm-cn/docs/how_to/optimize/gpu_conv"}}'),t=r("74132"),o=r("21494");let l={title:"\u5982\u4F55\u5728 CPU \u4E0A\u4F18\u5316 GEMM"},i="\u5982\u4F55\u5728 CPU \u4E0A\u4F18\u5316 GEMM",s={},c=[{value:"\u51C6\u5907\u548C baseline",id:"\u51C6\u5907\u548C-baseline",level:2},{value:"\u5206\u5757",id:"\u5206\u5757",level:2},{value:"\u5411\u91CF\u5316",id:"\u5411\u91CF\u5316",level:2},{value:"\u5FAA\u73AF\u7F6E\u6362",id:"\u5FAA\u73AF\u7F6E\u6362",level:2},{value:"\u6570\u7EC4\u6253\u5305",id:"\u6570\u7EC4\u6253\u5305",level:2},{value:"\u5757\u7684\u5199\u7F13\u5B58",id:"\u5757\u7684\u5199\u7F13\u5B58",level:2},{value:"\u5E76\u884C\u5316",id:"\u5E76\u884C\u5316",level:2},{value:"\u603B\u7ED3",id:"\u603B\u7ED3",level:2}];function _(n){let e={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"\u5982\u4F55\u5728-cpu-\u4E0A\u4F18\u5316-gemm",children:"\u5982\u4F55\u5728 CPU \u4E0A\u4F18\u5316 GEMM"})}),"\n",(0,t.jsx)(e.admonition,{type:"note",children:(0,t.jsxs)(e.p,{children:["\u5355\u51FB ",(0,t.jsx)(e.a,{href:"https://tvm.apache.org/docs/how_to/optimize_operators/opt_gemm.html#sphx-glr-download-how-to-optimize-operators-opt-gemm-py",children:"\u6B64\u5904"})," \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801"]})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"\u4F5C\u8005"}),"\uFF1A",(0,t.jsx)(e.a,{href:"https://github.com/were",children:"Jian Weng"}),", ",(0,t.jsx)(e.a,{href:"https://github.com/yuruofeifei",children:"Ruofei Yu"})]}),"\n",(0,t.jsx)(e.p,{children:"TVM \u63D0\u4F9B\u62BD\u8C61\u63A5\u53E3\uFF0C\u5141\u8BB8\u7528\u6237\u5206\u522B\u63CF\u8FF0\u7B97\u6CD5\u548C\u7B97\u6CD5\u7684\u5B9E\u73B0\uFF08\u6240\u8C13\u7684\u8C03\u5EA6\uFF09\u3002\u901A\u5E38\uFF0C\u4EE5\u9AD8\u6027\u80FD\u8C03\u5EA6\u7F16\u5199\u7B97\u6CD5\u4F1A\u7834\u574F\u7B97\u6CD5\u7684\u53EF\u8BFB\u6027\u548C\u6A21\u5757\u5316\u3002\u6B64\u5916\uFF0C\u5C1D\u8BD5\u5404\u79CD\u770B\u4F3C\u6709\u5E0C\u671B\u7684 schedules \u975E\u5E38\u8017\u65F6\u3002\u5728 TVM \u7684\u5E2E\u52A9\u4E0B\uFF0C\u53EF\u4EE5\u6709\u6548\u5730\u5C1D\u8BD5\u8FD9\u4E9B schedules \u4EE5\u63D0\u9AD8\u6027\u80FD\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u672C\u6559\u7A0B\u5C06\u6F14\u793A\u5982\u4F55\u7528 TVM \u4F18\u5316\u77E9\u9635\u4E58\u6CD5\uFF0C\u5E76\u901A\u8FC7 18 \u884C\u4EE3\u7801\u5B9E\u73B0\u6BD4 baseline \u5FEB 200 \u500D\u7684\u6027\u80FD\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u5728 CPU \u4E0A\u6267\u884C\u7684\u5BC6\u96C6\u8BA1\u7B97\u5E94\u7528\u7A0B\u5E8F\u6709\u4E24\u4E2A\u91CD\u8981\u7684\u4F18\u5316\uFF1A"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"\u63D0\u9AD8\u5185\u5B58\u8BBF\u95EE\u7684 cache \u547D\u4E2D\u7387\u3002\u9AD8 cache \u547D\u4E2D\u7387\u53EF\u4EE5\u52A0\u901F\u590D\u6742\u7684\u6570\u503C\u8BA1\u7B97\u548C\u70ED\u70B9\u5185\u5B58\u8BBF\u95EE\u3002\u9700\u8981\u5C06\u539F\u59CB\u5185\u5B58\u8BBF\u95EE\u6A21\u5F0F\u8F6C\u6362\u4E3A\u9002\u5408 cache \u7B56\u7565\u7684\u6A21\u5F0F\u3002"}),"\n",(0,t.jsx)(e.li,{children:"SIMD\uFF08\u5355\u6307\u4EE4\u591A\u6570\u636E\uFF09\uFF0C\u6216\u8005\u79F0\u4E4B\u4E3A\u5411\u91CF\u5904\u7406\u5355\u5143\uFF0C\u6BCF\u6B21\u90FD\u4F1A\u5904\u7406\u4E00\u5C0F\u6279\u6570\u636E\uFF0C\u800C\u4E0D\u662F\u5355\u4E2A\u7F51\u683C\u3002\u9700\u8981\u5C06\u5FAA\u73AF\u4F53\u4E2D\u7684\u6570\u636E\u8BBF\u95EE\u6A21\u5F0F\u8F6C\u6362\u4E3A\u7EDF\u4E00\u6A21\u5F0F\uFF0C\u4EE5\u4FBF LLVM \u540E\u7AEF\u53EF\u4EE5\u5C06\u5176\u964D\u7EA7\u5230 SIMD\u3002"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["\u5B9E\u9645\u4E0A\uFF0C\u672C\u6559\u7A0B\u4E2D\u4F7F\u7528\u7684\u6240\u6709\u65B9\u6CD5\u90FD\u5728\u8FD9\u4E2A ",(0,t.jsx)(e.a,{href:"https://github.com/flame/how-to-optimize-gemm",children:"repo"})," \u4E2D\u63D0\u5230\u4E86\u3002\u5176\u4E2D\u4E00\u4E9B\u5DF2\u88AB TVM \u62BD\u8C61\u81EA\u52A8\u5E94\u7528\uFF0C\u4F46\u6709\u4E00\u4E9B\u7531\u4E8E TVM \u7684\u9650\u5236\uFF0C\u4E0D\u80FD\u88AB\u7B80\u5355\u5730\u5E94\u7528\u3002"]}),"\n",(0,t.jsx)(e.p,{children:"\u4E0B\u9762\u63D0\u5230\u7684\u6240\u6709\u5B9E\u9A8C\u7ED3\u679C\uFF0C\u90FD\u662F\u5728\u914D\u5907 Intel i7-4770HQ CPU \u7684 2015 \u5E74 15 \u82F1\u5BF8 MacBook \u4E0A\u6267\u884C\u7684\uFF0C\u6240\u6709 x86 CPU \u7684\u9AD8\u901F\u7F13\u5B58\u884C\u5927\u5C0F\u5E94\u4E3A 64 \u5B57\u8282\u3002"}),"\n",(0,t.jsx)(e.h2,{id:"\u51C6\u5907\u548C-baseline",children:"\u51C6\u5907\u548C baseline"}),"\n",(0,t.jsx)(e.p,{children:"\u672C\u6559\u7A0B\u6F14\u793A\u5982\u4F55\u4F7F\u7528 TVM \u4F18\u5316\u77E9\u9635\u4E58\u6CD5\u3002\u5B9E\u9645\u6F14\u793A\u524D\uFF0C\u9996\u5148\u5B9A\u4E49\u8FD9\u4E9B\u53D8\u91CF\u3002\u7136\u540E\u7F16\u5199\u4E00\u4E2A baseline \u5B9E\u73B0\uFF0C\u8FD9\u662F\u5728 TVM \u4E2D\u7F16\u5199\u77E9\u9635\u4E58\u6CD5\u7684\u6700\u7B80\u5355\u65B9\u6CD5\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'import tvm\nimport tvm.testing\nfrom tvm import te\nimport numpy\nimport timeit\n\n# \u77E9\u9635\u7684\u5927\u5C0F\n# (M, K) x (K, N)\n# \u53EF\u81EA\u7531\u5C1D\u8BD5\u4E0D\u540C\u7684 shapes\uFF0C\u6709\u65F6 TVM \u4F18\u5316\u5728 MKL \u4E2D\u7684\u8868\u73B0\u4F18\u4E8E numpy\u3002\nM = 1024\nK = 1024\nN = 1024\n\n# tvm \u4E2D\u7684\u9ED8\u8BA4\u5F20\u91CF\u7C7B\u578B\ndtype = "float32"\n\n# \u4E3A SIMD \u4F7F\u7528\u82F1\u7279\u5C14 AVX2\uFF08\u9AD8\u7EA7\u5411\u91CF\u6269\u5C55\uFF09ISA\n# \u8981\u83B7\u5F97\u6700\u4F73\u6027\u80FD\uFF0C\u66F4\u6539\u4EE5\u4E0B\u884C\n# \u4E3A llvm -mcpu=core-avx2\uFF0C\u6216\u8005\u4F7F\u7528\u7684\u7279\u5B9A\u7C7B\u578B\u7684 CPU\ntarget = "llvm"\ndev = tvm.device(target, 0)\n\n# \u7528\u4E8E\u6D4B\u8BD5\u7684\u968F\u673A\u751F\u6210\u5F20\u91CF\na = tvm.nd.array(numpy.random.rand(M, K).astype(dtype), dev)\nb = tvm.nd.array(numpy.random.rand(K, N).astype(dtype), dev)\n\nnp_repeat = 100\nnp_runing_time = timeit.timeit(\n    setup="import numpy\\n"\n    "M = " + str(M) + "\\n"\n    "K = " + str(K) + "\\n"\n    "N = " + str(N) + "\\n"\n    \'dtype = "float32"\\n\'\n    "a = numpy.random.rand(M, K).astype(dtype)\\n"\n    "b = numpy.random.rand(K, N).astype(dtype)\\n",\n    stmt="answer = numpy.dot(a, b)",\n    number=np_repeat,\n)\nprint("Numpy running time: %f" % (np_runing_time / np_repeat))\n\nanswer = numpy.dot(a.numpy(), b.numpy())\n\n# \u7B97\u6CD5\nk = te.reduce_axis((0, K), "k")\nA = te.placeholder((M, K), name="A")\nB = te.placeholder((K, N), name="B")\nC = te.compute((M, N), lambda m, n: te.sum(A[m, k] * B[k, n], axis=k), name="C")\n\n# \u9ED8\u8BA4 schedule\ns = te.create_schedule(C.op)\nfunc = tvm.build(s, [A, B, C], target=target, name="mmult")\nassert func\n\nc = tvm.nd.array(numpy.zeros((M, N), dtype=dtype), dev)\nfunc(a, b, c)\ntvm.testing.assert_allclose(c.numpy(), answer, rtol=1e-5)\n\nevaluator = func.time_evaluator(func.entry_name, dev, number=1)\nprint("Baseline: %f" % evaluator(a, b, c).mean)\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"Numpy running time: 0.018437\nBaseline: 3.336375\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5728 TVM \u4E2D\uFF0C\u59CB\u7EC8\u53EF\u4EE5\u68C0\u67E5\u8F83\u4F4E\u7EA7\u522B\u7684 IR \u4EE5\u8C03\u8BD5\u6216\u4F18\u5316 schedule\u3002\u8FD9\u662F\u4F7F\u7528 baseline schedule \u751F\u6210\u7684 IR\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"print(tvm.lower(s, [A, B, C], simple_mode=True))\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [1048576], []),\n             B: Buffer(B_2: Pointer(float32), float32, [1048576], []),\n             C: Buffer(C_2: Pointer(float32), float32, [1048576], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 1024], []), B_1: B_3: Buffer(B_2, float32, [1024, 1024], []), C_1: C_3: Buffer(C_2, float32, [1024, 1024], [])} {\n  for (m: int32, 0, 1024) {\n    for (n: int32, 0, 1024) {\n      C[((m*1024) + n)] = 0f32\n      for (k: int32, 0, 1024) {\n        let cse_var_2: int32 = (m*1024)\n        let cse_var_1: int32 = (cse_var_2 + n)\n        C[cse_var_1] = (C[cse_var_1] + (A[(cse_var_2 + k)]*B[((k*1024) + n)]))\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u5206\u5757",children:"\u5206\u5757"}),"\n",(0,t.jsx)(e.p,{children:"\u63D0\u9AD8\u7F13\u5B58\u547D\u4E2D\u7387\u7684\u4E00\u4E2A\u91CD\u8981\u6280\u5DE7\u662F\u5206\u5757\u2014\u2014\u6570\u636E\u5757\u5C06\u9010\u5757\u8BA1\u7B97\u3002\u5757\u5185\u7684\u5185\u5B58\u8BBF\u95EE\u662F\u4E00\u4E2A\u5C40\u90E8\u6027\u7684\u5C0F\u90BB\u57DF\u3002\u672C\u6559\u7A0B\u9009\u62E9 32 \u4F5C\u4E3A\u5206\u5757\u56E0\u5B50\uFF0C\u56E0\u6B64\u8BE5\u5757\u5C06\u586B\u5145 32 * 32 * sizeof(float) \uFF0C\u5373\u603B\u5927\u5C0F\u4E3A 32KB \u7684\u7F13\u5B58\u4E2D\u7684 4KB\uFF08L1 \u6570\u636E\u7F13\u5B58\uFF09\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'bn = 32\nkfactor = 4\ns = te.create_schedule(C.op)\n\n# \u901A\u8FC7\u5FAA\u73AF tiling \u8FDB\u884C\u5206\u5757\nmo, no, mi, ni = s[C].tile(C.op.axis[0], C.op.axis[1], bn, bn)\n(kaxis,) = s[C].op.reduce_axis\nko, ki = s[C].split(kaxis, factor=kfactor)\n\n# \u5C06 reduction \u57DF\u63D0\u5347\u5230\u5206\u5757\u5FAA\u73AF\u4E4B\u5916\ns[C].reorder(mo, no, ko, ki, mi, ni)\n\nfunc = tvm.build(s, [A, B, C], target=target, name="mmult")\nassert func\n\nc = tvm.nd.array(numpy.zeros((M, N), dtype=dtype), dev)\nfunc(a, b, c)\ntvm.testing.assert_allclose(c.numpy(), answer, rtol=1e-5)\n\n# \u901A\u8FC7\u7B80\u5355\u5730\u5C06\u5FAA\u73AF 32x32 \u5206\u5757\uFF0C\u5E76\u5C06 ko\u3001ki \u63D0\u5347\u5230\u5206\u5757\u5FAA\u73AF\u4E4B\u5916\uFF0C\n# \u53EF\u4EE5\u770B\u5230\u4E0E baseline \u76F8\u6BD4\uFF0C\u52A0\u901F\u6709\u5F88\u5927\u63D0\u5347\u3002\nevaluator = func.time_evaluator(func.entry_name, dev, number=10)\nprint("Opt1: %f" % evaluator(a, b, c).mean)\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"Opt1: 0.307321\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5206\u5757\u540E\u751F\u6210\u7684 IR\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'print(tvm.lower(s, [A, B, C], simple_mode=True))\n@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [1048576], []),\n             B: Buffer(B_2: Pointer(float32), float32, [1048576], []),\n             C: Buffer(C_2: Pointer(float32), float32, [1048576], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 1024], []), B_1: B_3: Buffer(B_2, float32, [1024, 1024], []), C_1: C_3: Buffer(C_2, float32, [1024, 1024], [])} {\n  for (m.outer: int32, 0, 32) {\n    for (n.outer: int32, 0, 32) {\n      for (m.inner.init: int32, 0, 32) {\n        for (n.inner.init: int32, 0, 32) {\n          C[((((m.outer*32768) + (m.inner.init*1024)) + (n.outer*32)) + n.inner.init)] = 0f32\n        }\n      }\n      for (k.outer: int32, 0, 256) {\n        for (k.inner: int32, 0, 4) {\n          for (m.inner: int32, 0, 32) {\n            for (n.inner: int32, 0, 32) {\n              let cse_var_3: int32 = (n.outer*32)\n              let cse_var_2: int32 = ((m.outer*32768) + (m.inner*1024))\n              let cse_var_1: int32 = ((cse_var_2 + cse_var_3) + n.inner)\n              C[cse_var_1] = (C[cse_var_1] + (A[((cse_var_2 + (k.outer*4)) + k.inner)]*B[((((k.outer*4096) + (k.inner*1024)) + cse_var_3) + n.inner)]))\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u5411\u91CF\u5316",children:"\u5411\u91CF\u5316"}),"\n",(0,t.jsx)(e.p,{children:"\u53E6\u4E00\u4E2A\u91CD\u8981\u6280\u5DE7\u662F\u5411\u91CF\u5316\uFF0C\u5F53\u5185\u5B58\u8BBF\u95EE\u6A21\u5F0F\u4E00\u81F4\u65F6\uFF0C\u7F16\u8BD1\u5668\u53EF\u4EE5\u68C0\u6D4B\u5230\u8FD9\u79CD\u6A21\u5F0F\u5E76\u5C06\u8FDE\u7EED\u5185\u5B58\u4F20\u9012\u7ED9\u5411\u91CF\u5904\u7406\u5668\u3002TVM \u4E2D\u53EF\u4EE5\u7528 vectorize \u63A5\u53E3\u6765\u63D0\u793A\u7F16\u8BD1\u5668\u8FD9\u79CD\u6A21\u5F0F\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u8FDB\u884C\u52A0\u901F\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u672C\u6559\u7A0B\u9009\u62E9\u5411\u91CF\u5316\u5185\u90E8\u5FAA\u73AF row data\uFF08\u5BF9\u7F13\u5B58\u66F4\u53CB\u597D\uFF09\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'s = te.create_schedule(C.op)\nmo, no, mi, ni = s[C].tile(C.op.axis[0], C.op.axis[1], bn, bn)\n(kaxis,) = s[C].op.reduce_axis\nko, ki = s[C].split(kaxis, factor=kfactor)\n\ns[C].reorder(mo, no, ko, ki, mi, ni)\n\n# \u5411\u91CF\u5316\ns[C].vectorize(ni)\n\nfunc = tvm.build(s, [A, B, C], target=target, name="mmult")\nassert func\n\nc = tvm.nd.array(numpy.zeros((M, N), dtype=dtype), dev)\nfunc(a, b, c)\ntvm.testing.assert_allclose(c.numpy(), answer, rtol=1e-5)\n\nevaluator = func.time_evaluator(func.entry_name, dev, number=10)\nprint("Opt2: %f" % evaluator(a, b, c).mean)\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"Opt2: 0.349439\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5411\u91CF\u5316\u540E\u751F\u6210\u7684 IR\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"print(tvm.lower(s, [A, B, C], simple_mode=True))\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [1048576], []),\n             B: Buffer(B_2: Pointer(float32), float32, [1048576], []),\n             C: Buffer(C_2: Pointer(float32), float32, [1048576], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 1024], []), B_1: B_3: Buffer(B_2, float32, [1024, 1024], []), C_1: C_3: Buffer(C_2, float32, [1024, 1024], [])} {\n  for (m.outer: int32, 0, 32) {\n    for (n.outer: int32, 0, 32) {\n      for (m.inner.init: int32, 0, 32) {\n        C[ramp((((m.outer*32768) + (m.inner.init*1024)) + (n.outer*32)), 1, 32)] = broadcast(0f32, 32)\n      }\n      for (k.outer: int32, 0, 256) {\n        for (k.inner: int32, 0, 4) {\n          for (m.inner: int32, 0, 32) {\n            let cse_var_3: int32 = (n.outer*32)\n            let cse_var_2: int32 = ((m.outer*32768) + (m.inner*1024))\n            let cse_var_1: int32 = (cse_var_2 + cse_var_3)\n            C[ramp(cse_var_1, 1, 32)] = (C[ramp(cse_var_1, 1, 32)] + (broadcast(A[((cse_var_2 + (k.outer*4)) + k.inner)], 32)*B[ramp((((k.outer*4096) + (k.inner*1024)) + cse_var_3), 1, 32)]))\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u5FAA\u73AF\u7F6E\u6362",children:"\u5FAA\u73AF\u7F6E\u6362"}),"\n",(0,t.jsx)(e.p,{children:"\u67E5\u770B\u4E0A\u9762\u7684 IR\uFF0C\u53EF\u4EE5\u770B\u5230\u5185\u90E8\u5FAA\u73AF\u7684 row data \u5BF9\u4E8E B \u548C C \u90FD\u662F\u5411\u91CF\u5316\u7684\u3002\u63A5\u4E0B\u6765\u67E5\u770B A \u7684\u8BBF\u95EE\u6A21\u5F0F\u3002\u5728\u5F53\u524D\u8C03\u5EA6\u4E2D\uFF0CA \u662F\u9010\u5217\u8BBF\u95EE\u7684\uFF0C\u4F46\u5B83\u5BF9\u7F13\u5B58\u4E0D\u53CB\u597D\u3002\u5982\u679C\u6539\u53D8 ki \u548C\u5185\u8F74 mi \u7684\u5D4C\u5957\u5FAA\u73AF\u987A\u5E8F\uFF0CA \u77E9\u9635\u7684\u8BBF\u95EE\u6A21\u5F0F\u5BF9\u7F13\u5B58\u66F4\u53CB\u597D\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'s = te.create_schedule(C.op)\nmo, no, mi, ni = s[C].tile(C.op.axis[0], C.op.axis[1], bn, bn)\n(kaxis,) = s[C].op.reduce_axis\nko, ki = s[C].split(kaxis, factor=kfactor)\n\n# \u91CD\u65B0\u6392\u5E8F\ns[C].reorder(mo, no, ko, mi, ki, ni)\ns[C].vectorize(ni)\n\nfunc = tvm.build(s, [A, B, C], target=target, name="mmult")\nassert func\n\nc = tvm.nd.array(numpy.zeros((M, N), dtype=dtype), dev)\nfunc(a, b, c)\ntvm.testing.assert_allclose(c.numpy(), answer, rtol=1e-5)\n\nevaluator = func.time_evaluator(func.entry_name, dev, number=10)\nprint("Opt3: %f" % evaluator(a, b, c).mean)\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"Opt3: 0.115375\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5FAA\u73AF\u7F6E\u6362\u540E\u751F\u6210\u7684 IR\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"print(tvm.lower(s, [A, B, C], simple_mode=True))\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [1048576], []),\n             B: Buffer(B_2: Pointer(float32), float32, [1048576], []),\n             C: Buffer(C_2: Pointer(float32), float32, [1048576], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 1024], []), B_1: B_3: Buffer(B_2, float32, [1024, 1024], []), C_1: C_3: Buffer(C_2, float32, [1024, 1024], [])} {\n  for (m.outer: int32, 0, 32) {\n    for (n.outer: int32, 0, 32) {\n      for (m.inner.init: int32, 0, 32) {\n        C[ramp((((m.outer*32768) + (m.inner.init*1024)) + (n.outer*32)), 1, 32)] = broadcast(0f32, 32)\n      }\n      for (k.outer: int32, 0, 256) {\n        for (m.inner: int32, 0, 32) {\n          for (k.inner: int32, 0, 4) {\n            let cse_var_3: int32 = (n.outer*32)\n            let cse_var_2: int32 = ((m.outer*32768) + (m.inner*1024))\n            let cse_var_1: int32 = (cse_var_2 + cse_var_3)\n            C[ramp(cse_var_1, 1, 32)] = (C[ramp(cse_var_1, 1, 32)] + (broadcast(A[((cse_var_2 + (k.outer*4)) + k.inner)], 32)*B[ramp((((k.outer*4096) + (k.inner*1024)) + cse_var_3), 1, 32)]))\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u6570\u7EC4\u6253\u5305",children:"\u6570\u7EC4\u6253\u5305"}),"\n",(0,t.jsx)(e.p,{children:"\u53E6\u4E00\u4E2A\u91CD\u8981\u7684\u6280\u5DE7\u662F\u6570\u7EC4\u6253\u5305\uFF0C\u5BF9\u591A\u7EF4\u6570\u7EC4\u7684\u5B58\u50A8\u8FDB\u884C\u91CD\u65B0\u6392\u5E8F\uFF0C\u5C55\u5E73\u5E76\u5B58\u50A8\u5728\u4E00\u7EF4\u5185\u5B58\u4E2D\uFF0C\u65B9\u4FBF\u987A\u5E8F\u8BBF\u95EE\u3002"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://github.com/dmlc/web-data/raw/main/tvm/tutorial/array-packing.png",alt:"\u56FE\u7247"})}),"\n",(0,t.jsx)(e.p,{children:"\u6CE8\u610F\uFF1A\u6B64\u56FE\u662F\u6570\u7EC4\u6253\u5305\u5DE5\u4F5C\u539F\u7406\u7684\u4E00\u822C\u8BF4\u660E\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u53EF\u4EE5\u7528\u6570\u7EC4\u6253\u5305\u6765\u89E3\u51B3 B \u7684\u8BBF\u95EE\u6A21\u5F0F\u3002\u89C2\u5BDF\u5C55\u5E73\u540E B \u7684\u6570\u7EC4\u8BBF\u95EE\u6A21\u5F0F\uFF0C\u5F53\u8FED\u4EE3 K \u7EF4\u65F6\uFF0C\u5B83\u4E0D\u662F\u987A\u5E8F\u7684\u3002\u53EF\u4EE5\u7528\u7EF4\u5EA6 [K][N] \u5BF9 B \u91CD\u65B0\u6392\u5E8F\uFF0C\u4F7F\u5176\u5177\u6709 [N/bn][K][bn] \u7EF4\u5EA6\uFF0C\u5176\u4E2D bn \u662F\u5206\u5757\u56E0\u5B50\uFF0C\u4E5F\u662F\u5185\u5FAA\u73AF\u4E2D B \u7684\u5411\u91CF\u5927\u5C0F\u3002"}),"\n",(0,t.jsx)(e.p,{children:"\u8FD9\u79CD\u91CD\u65B0\u6392\u5E8F\u5C06 N \u62C6\u5206\u4E3A\u4E24\u4E2A\u7EF4\u5EA6\u2014\u2014bigN\uFF08N/bn\uFF09\u548C littleN\uFF08bn\uFF09\u2014\u2014\u65B0\u7EF4\u5EA6 [N/bn][K][bn] \u5339\u914D B \u4ECE\u5916\u90E8\u5230\u5185\u90E8\u5FAA\u73AF\u7684\u7D22\u5F15\uFF08no, ko, ki, ni) \u5728\u5C55\u5E73\u540E\u5BFC\u81F4 B \u7684\u987A\u5E8F\u8BBF\u95EE\u6A21\u5F0F\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# \u6211\u4EEC\u5FC5\u987B\u7A0D\u5FAE\u91CD\u65B0\u7F16\u5199\u7B97\u6CD5\u3002\npackedB = te.compute(\n    (N / bn, K, bn), lambda bigN, k, littleN: B[k, bigN * bn + littleN], name="packedB"\n)\nC = te.compute(\n    (M, N),\n    lambda m, n: te.sum(A[m, k] * packedB[n // bn, k, tvm.tir.indexmod(n, bn)], axis=k),\n    name="C",\n)\n\ns = te.create_schedule(C.op)\n\nmo, no, mi, ni = s[C].tile(C.op.axis[0], C.op.axis[1], bn, bn)\n(kaxis,) = s[C].op.reduce_axis\nko, ki = s[C].split(kaxis, factor=kfactor)\n\ns[C].reorder(mo, no, ko, mi, ki, ni)\ns[C].vectorize(ni)\n\nbigN, _, littleN = s[packedB].op.axis\ns[packedB].vectorize(littleN)\ns[packedB].parallel(bigN)\n\nfunc = tvm.build(s, [A, B, C], target=target, name="mmult")\nassert func\n\nc = tvm.nd.array(numpy.zeros((M, N), dtype=dtype), dev)\nfunc(a, b, c)\ntvm.testing.assert_allclose(c.numpy(), answer, rtol=1e-5)\n\nevaluator = func.time_evaluator(func.entry_name, dev, number=10)\nprint("Opt4: %f" % evaluator(a, b, c).mean)\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"Opt4: 0.109499\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u6570\u7EC4\u6253\u5305\u540E\u751F\u6210\u7684 IR\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"print(tvm.lower(s, [A, B, C], simple_mode=True))\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [1048576], []),\n             B: Buffer(B_2: Pointer(float32), float32, [1048576], []),\n             C: Buffer(C_2: Pointer(float32), float32, [1048576], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 1024], []), B_1: B_3: Buffer(B_2, float32, [1024, 1024], []), C_1: C_3: Buffer(C_2, float32, [1024, 1024], [])} {\n  allocate(packedB: Pointer(global float32x32), float32x32, [32768]), storage_scope = global {\n    for (bigN: int32, 0, 32) "parallel" {\n      for (k: int32, 0, 1024) {\n        packedB_1: Buffer(packedB, float32x32, [32768], [])[((bigN*1024) + k)] = B[ramp(((k*1024) + (bigN*32)), 1, 32)]\n      }\n    }\n    for (m.outer: int32, 0, 32) {\n      for (n.outer: int32, 0, 32) {\n        for (m.inner.init: int32, 0, 32) {\n          C[ramp((((m.outer*32768) + (m.inner.init*1024)) + (n.outer*32)), 1, 32)] = broadcast(0f32, 32)\n        }\n        for (k.outer: int32, 0, 256) {\n          for (m.inner: int32, 0, 32) {\n            for (k.inner: int32, 0, 4) {\n              let cse_var_3: int32 = ((m.outer*32768) + (m.inner*1024))\n              let cse_var_2: int32 = (k.outer*4)\n              let cse_var_1: int32 = (cse_var_3 + (n.outer*32))\n              C[ramp(cse_var_1, 1, 32)] = (C[ramp(cse_var_1, 1, 32)] + (broadcast(A[((cse_var_3 + cse_var_2) + k.inner)], 32)*packedB_1[(((n.outer*1024) + cse_var_2) + k.inner)]))\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u5757\u7684\u5199\u7F13\u5B58",children:"\u5757\u7684\u5199\u7F13\u5B58"}),"\n",(0,t.jsx)(e.p,{children:"\u5206\u5757\u540E\uFF0C\u7A0B\u5E8F\u4F1A\u9010\u5757\u5C06\u7ED3\u679C\u5199\u5165 C\uFF08\u8BBF\u95EE\u6A21\u5F0F\u4E0D\u662F\u987A\u5E8F\u7684\uFF09\uFF0C\u56E0\u6B64\uFF0C\u53EF\u4EE5\u4F7F\u7528\u987A\u5E8F\u7F13\u5B58\u6570\u7EC4\u6765\u4FDD\u5B58\u5757\u7ED3\u679C\uFF0C\u5E76\u5728\u6240\u6709\u5757\u7ED3\u679C\u51C6\u5907\u597D\u65F6\u5199\u5165 C\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'s = te.create_schedule(C.op)\n\n# \u5206\u914D\u5199\u7F13\u5B58\nCC = s.cache_write(C, "global")\nmo, no, mi, ni = s[C].tile(C.op.axis[0], C.op.axis[1], bn, bn)\n\n# \u5199\u7F13\u5B58\u5728 no \u88AB\u8BA1\u7B97\ns[CC].compute_at(s[C], no)\n\n# \u65B0\u7684\u5185\u8F74\nmc, nc = s[CC].op.axis\n\n(kaxis,) = s[CC].op.reduce_axis\nko, ki = s[CC].split(kaxis, factor=kfactor)\ns[CC].reorder(ko, mc, ki, nc)\ns[CC].vectorize(nc)\n\n# TODO: \u6DFB\u52A0\u5355\u72EC\u7684\u4F18\u5316\u6B65\u9AA4\uFF0C\u6765\u8BA8\u8BBA\u5FAA\u73AF\u5C55\u5F00\n# unrolling \u662F\u4E00\u79CD\u5FAA\u73AF\u4F18\u5316\u7B56\u7565\uFF0C\u53EF\u4EE5\u51CF\u5C11\u5206\u652F\n# \u9884\u6D4B\u5931\u8D25\uFF0C\u4EE5\u53CA\u589E\u52A0\u5E76\u53D1\u6267\u884C\u7684\u673A\u4F1A\n# \u5C55\u5F00 kfactor \u5FAA\u73AF\ns[CC].unroll(ki)\n\nbigN, _, littleN = s[packedB].op.axis\ns[packedB].vectorize(littleN)\ns[packedB].parallel(bigN)\n\nfunc = tvm.build(s, [A, B, C], target=target, name="mmult")\nassert func\n\nc = tvm.nd.array(numpy.zeros((M, N), dtype=dtype), dev)\nfunc(a, b, c)\ntvm.testing.assert_allclose(c.numpy(), answer, rtol=1e-5)\n\nevaluator = func.time_evaluator(func.entry_name, dev, number=10)\nprint("Opt5: %f" % evaluator(a, b, c).mean)\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"Opt5: 0.110823\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5206\u5757\u540E\u751F\u6210\u7684 IR\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'print(tvm.lower(s, [A, B, C], simple_mode=True))\n@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [1048576], []),\n             B: Buffer(B_2: Pointer(float32), float32, [1048576], []),\n             C: Buffer(C_2: Pointer(float32), float32, [1048576], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 1024], []), B_1: B_3: Buffer(B_2, float32, [1024, 1024], []), C_1: C_3: Buffer(C_2, float32, [1024, 1024], [])} {\n  allocate(packedB: Pointer(global float32x32), float32x32, [32768]), storage_scope = global;\n  allocate(C.global: Pointer(global float32), float32, [1024]), storage_scope = global {\n    for (bigN: int32, 0, 32) "parallel" {\n      for (k: int32, 0, 1024) {\n        packedB_1: Buffer(packedB, float32x32, [32768], [])[((bigN*1024) + k)] = B[ramp(((k*1024) + (bigN*32)), 1, 32)]\n      }\n    }\n    for (m.outer: int32, 0, 32) {\n      for (n.outer: int32, 0, 32) {\n        for (m.c.init: int32, 0, 32) {\n          C.global_1: Buffer(C.global, float32, [1024], [])[ramp((m.c.init*32), 1, 32)] = broadcast(0f32, 32)\n        }\n        for (k.outer: int32, 0, 256) {\n          for (m.c: int32, 0, 32) {\n            let cse_var_4: int32 = (k.outer*4)\n            let cse_var_3: int32 = (m.c*32)\n            let cse_var_2: int32 = ((n.outer*1024) + cse_var_4)\n            let cse_var_1: int32 = (((m.outer*32768) + (m.c*1024)) + cse_var_4)\n             {\n              C.global_1[ramp(cse_var_3, 1, 32)] = (C.global_1[ramp(cse_var_3, 1, 32)] + (broadcast(A[cse_var_1], 32)*packedB_1[cse_var_2]))\n              C.global_1[ramp(cse_var_3, 1, 32)] = (C.global_1[ramp(cse_var_3, 1, 32)] + (broadcast(A[(cse_var_1 + 1)], 32)*packedB_1[(cse_var_2 + 1)]))\n              C.global_1[ramp(cse_var_3, 1, 32)] = (C.global_1[ramp(cse_var_3, 1, 32)] + (broadcast(A[(cse_var_1 + 2)], 32)*packedB_1[(cse_var_2 + 2)]))\n              C.global_1[ramp(cse_var_3, 1, 32)] = (C.global_1[ramp(cse_var_3, 1, 32)] + (broadcast(A[(cse_var_1 + 3)], 32)*packedB_1[(cse_var_2 + 3)]))\n            }\n          }\n        }\n        for (m.inner: int32, 0, 32) {\n          for (n.inner: int32, 0, 32) {\n            C[((((m.outer*32768) + (m.inner*1024)) + (n.outer*32)) + n.inner)] = C.global_1[((m.inner*32) + n.inner)]\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u5E76\u884C\u5316",children:"\u5E76\u884C\u5316"}),"\n",(0,t.jsx)(e.p,{children:"\u6B64\u5916\uFF0C\u8FD8\u53EF\u4EE5\u5229\u7528\u591A\u6838\u5904\u7406\u5668\u8FDB\u884C\u7EBF\u7A0B\u7EA7\u5E76\u884C\u5316\u3002"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'s = te.create_schedule(C.op)\n\nCC = s.cache_write(C, "global")\n\nmo, no, mi, ni = s[C].tile(C.op.axis[0], C.op.axis[1], bn, bn)\n\ns[CC].compute_at(s[C], no)\n\nmc, nc = s[CC].op.axis\n\n(kaxis,) = s[CC].op.reduce_axis\nko, ki = s[CC].split(kaxis, factor=kfactor)\ns[CC].reorder(ko, mc, ki, nc)\ns[CC].vectorize(nc)\ns[CC].unroll(ki)\n\n# \u5E76\u884C\ns[C].parallel(mo)\n\nbigN, _, littleN = s[packedB].op.axis\ns[packedB].vectorize(littleN)\ns[packedB].parallel(bigN)\n\nfunc = tvm.build(s, [A, B, C], target=target, name="mmult")\nassert func\n\nc = tvm.nd.array(numpy.zeros((M, N), dtype=dtype), dev)\nfunc(a, b, c)\ntvm.testing.assert_allclose(c.numpy(), answer, rtol=1e-5)\n\nevaluator = func.time_evaluator(func.entry_name, dev, number=50)\nopt6_time = evaluator(a, b, c).mean\nprint("Opt6: %f" % opt6_time)\n'})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"Opt6: 0.144875\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u5E76\u884C\u5316\u540E\u751F\u6210\u7684 IR\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"print(tvm.lower(s, [A, B, C], simple_mode=True))\n"})}),"\n",(0,t.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [1048576], []),\n             B: Buffer(B_2: Pointer(float32), float32, [1048576], []),\n             C: Buffer(C_2: Pointer(float32), float32, [1048576], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 1024], []), B_1: B_3: Buffer(B_2, float32, [1024, 1024], []), C_1: C_3: Buffer(C_2, float32, [1024, 1024], [])} {\n  allocate(packedB: Pointer(global float32x32), float32x32, [32768]), storage_scope = global {\n    for (bigN: int32, 0, 32) "parallel" {\n      for (k: int32, 0, 1024) {\n        packedB_1: Buffer(packedB, float32x32, [32768], [])[((bigN*1024) + k)] = B[ramp(((k*1024) + (bigN*32)), 1, 32)]\n      }\n    }\n    for (m.outer: int32, 0, 32) "parallel" {\n      allocate(C.global: Pointer(global float32), float32, [1024]), storage_scope = global;\n      for (n.outer: int32, 0, 32) {\n        for (m.c.init: int32, 0, 32) {\n          C.global_1: Buffer(C.global, float32, [1024], [])[ramp((m.c.init*32), 1, 32)] = broadcast(0f32, 32)\n        }\n        for (k.outer: int32, 0, 256) {\n          for (m.c: int32, 0, 32) {\n            let cse_var_4: int32 = (k.outer*4)\n            let cse_var_3: int32 = (m.c*32)\n            let cse_var_2: int32 = ((n.outer*1024) + cse_var_4)\n            let cse_var_1: int32 = (((m.outer*32768) + (m.c*1024)) + cse_var_4)\n             {\n              C.global_1[ramp(cse_var_3, 1, 32)] = (C.global_1[ramp(cse_var_3, 1, 32)] + (broadcast(A[cse_var_1], 32)*packedB_1[cse_var_2]))\n              C.global_1[ramp(cse_var_3, 1, 32)] = (C.global_1[ramp(cse_var_3, 1, 32)] + (broadcast(A[(cse_var_1 + 1)], 32)*packedB_1[(cse_var_2 + 1)]))\n              C.global_1[ramp(cse_var_3, 1, 32)] = (C.global_1[ramp(cse_var_3, 1, 32)] + (broadcast(A[(cse_var_1 + 2)], 32)*packedB_1[(cse_var_2 + 2)]))\n              C.global_1[ramp(cse_var_3, 1, 32)] = (C.global_1[ramp(cse_var_3, 1, 32)] + (broadcast(A[(cse_var_1 + 3)], 32)*packedB_1[(cse_var_2 + 3)]))\n            }\n          }\n        }\n        for (m.inner: int32, 0, 32) {\n          for (n.inner: int32, 0, 32) {\n            C[((((m.outer*32768) + (m.inner*1024)) + (n.outer*32)) + n.inner)] = C.global_1[((m.inner*32) + n.inner)]\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\u603B\u7ED3",children:"\u603B\u7ED3"}),"\n",(0,t.jsxs)(e.p,{children:["\u5E94\u7528\u4E0A\u8FF0\u7B80\u5355\u4F18\u5316\u540E\uFF0C\u4EC5\u7528 18 \u884C\u4EE3\u7801\uFF0C\u5C31\u53EF\u4EE5\u8FBE\u5230\u4F7F\u7528 MKL ",(0,t.jsx)(e.em,{children:"numpy"})," \u6027\u80FD\u7684 60%\u3002\u6CE8\u610F\uFF0C\u7F51\u9875\u4E0A\u7684\u8F93\u51FA\u53CD\u6620\u4E86\u975E\u4E13\u6709 Docker \u5BB9\u5668\u4E0A\u7684\u8FD0\u884C\u65F6\u95F4\uFF0C\u662F",(0,t.jsx)(e.em,{children:"\u4E0D\u53EF\u9760"}),"\u7684\u3002\u63A8\u8350\u81EA\u5DF1\u8FD0\u884C\u672C\u6559\u7A0B\uFF0C\u89C2\u5BDF TVM \u7684\u6027\u80FD\u63D0\u5347\u3002"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://tvm.apache.org/docs/_downloads/96137df89d8034b548f407123ec50ce9/opt_gemm.py",children:"\u4E0B\u8F7D Python \u6E90\u4EE3\u7801\uFF1Aopt_gemm.py"})}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"https://tvm.apache.org/docs/_downloads/0f8d36b3ffd04a5a08089dc671eb788e/opt_gemm.ipynb",children:"\u4E0B\u8F7D Jupyter Notebook\uFF1Aopt_gemm.ipynb"})})]})}function m(n={}){let{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(_,{...n})}):_(n)}},21494:function(n,e,r){r.d(e,{Z:function(){return i},a:function(){return l}});var a=r(39546);let t={},o=a.createContext(t);function l(n){let e=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);