"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["75978"],{84261:function(e,n,r){r.r(n),r.d(n,{default:()=>p,frontMatter:()=>i,metadata:()=>t,assets:()=>c,toc:()=>d,contentTitle:()=>o});var t=JSON.parse('{"id":"reference/langref/index","title":"Language Reference","description":"This document provides references to embedded languages and IRs in the","source":"@site/docs/reference/langref/index.md","sourceDirName":"reference/langref","slug":"/reference/langref/","permalink":"/docs/tvm-cn/docs/reference/langref/","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/docs/reference/langref/index.md","tags":[],"version":"current","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"frontMatter":{"title":"Language Reference"}}'),a=r("74132"),s=r("21494");let i={title:"Language Reference"},o=void 0,c={},d=[{value:"Introduction to Relay",id:"introduction-to-relay",level:2},{value:"Hybrid Script",id:"hybrid-script",level:2}];function l(e){let n={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This document provides references to embedded languages and IRs in the\nTVM stack."}),"\n",(0,a.jsx)(n.h2,{id:"introduction-to-relay",children:"Introduction to Relay"}),"\n",(0,a.jsxs)(n.p,{children:["Relay is a functional, differentiable programming language designed to\nbe an expressive intermediate representation for machine learning\nsystems. Relay supports algebraic data types, closures, control flow,\nand recursion, allowing it to directly represent more complex models\nthan computation graph-based IRs can. Relay also includes a form of\ndependent typing using ",(0,a.jsx)(n.em,{children:"type relations"})," in order to handle shape\nanalysis for operators with complex requirements on argument shapes."]}),"\n",(0,a.jsx)(n.p,{children:"Relay is extensible by design and makes it easy for machine learning\nresearchers and practitioners to develop new large-scale program\ntransformations and optimizations."}),"\n",(0,a.jsx)(n.p,{children:"The below pages describe the grammar, type system, algebraic data types,\nand operators in Relay, respectively."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"relay_expr relay_type relay_adt relay_op relay_pattern\n"})}),"\n",(0,a.jsx)(n.h2,{id:"hybrid-script",children:"Hybrid Script"}),"\n",(0,a.jsx)(n.p,{children:"The below page describes the TVM hybrid script front-end, which uses\nsoftware emulation to support some constructs not officially supported\nin TVM."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"hybrid_script\n"})})]})}function p(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},21494:function(e,n,r){r.d(n,{Z:function(){return o},a:function(){return i}});var t=r(39546);let a={},s=t.createContext(a);function i(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);