"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["99418"],{75777:function(e,n,t){t.r(n),t.d(n,{default:()=>f,frontMatter:()=>o,metadata:()=>r,assets:()=>s,toc:()=>d,contentTitle:()=>l});var r=JSON.parse('{"id":"how_to/te_schedules/primitive","title":"TVM \u4E2D\u7684 Schedule \u539F\u8BED","description":"\u5355\u51FB \u6B64\u5904 \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801","source":"@site/versioned_docs/version-0.12.0/how_to/te_schedules/01-primitive.md","sourceDirName":"how_to/te_schedules","slug":"/how_to/te_schedules/primitive","permalink":"/docs/tvm-cn/docs/0.12.0/how_to/te_schedules/primitive","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/versioned_docs/version-0.12.0/how_to/te_schedules/01-primitive.md","tags":[],"version":"0.12.0","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"sidebarPosition":1,"frontMatter":{"title":"TVM \u4E2D\u7684 Schedule \u539F\u8BED"},"sidebar":"tutorialSidebar","previous":{"title":"\u4F7F\u7528\u5F20\u91CF\u8868\u8FBE\u5F0F\u548C Schedule","permalink":"/docs/tvm-cn/docs/0.12.0/how_to/te_schedules/"},"next":{"title":"\u89C4\u7EA6\uFF08reduce\uFF09","permalink":"/docs/tvm-cn/docs/0.12.0/how_to/te_schedules/reduction"}}'),i=t("74132"),a=t("21494");let o={title:"TVM \u4E2D\u7684 Schedule \u539F\u8BED"},l="TVM \u4E2D\u7684 Schedule \u539F\u8BED",s={},d=[{value:"split",id:"split",level:2},{value:"tile",id:"tile",level:2},{value:"fuse",id:"fuse",level:2},{value:"reorder",id:"reorder",level:2},{value:"bind",id:"bind",level:2},{value:"compute_at",id:"compute_at",level:2},{value:"compute_inline",id:"compute_inline",level:2},{value:"compute_root",id:"compute_root",level:2},{value:"\u603B\u7ED3",id:"\u603B\u7ED3",level:2}];function _(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tvm-\u4E2D\u7684-schedule-\u539F\u8BED",children:"TVM \u4E2D\u7684 Schedule \u539F\u8BED"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["\u5355\u51FB ",(0,i.jsx)(n.a,{href:"https://tvm.apache.org/docs/how_to/work_with_schedules/schedule_primitives.html#sphx-glr-download-how-to-work-with-schedules-schedule-primitives-py",children:"\u6B64\u5904"})," \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801"]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\u4F5C\u8005"}),"\uFF1A",(0,i.jsx)(n.a,{href:"https://github.com/ZihengJiang",children:"Ziheng Jiang"})]}),"\n",(0,i.jsx)(n.p,{children:"TVM \u662F\u4E00\u79CD\u7528\u4E8E\u9AD8\u6548\u6784\u5EFA\u5185\u6838\u7684\u9886\u57DF\u7279\u5B9A\u8BED\u8A00\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u672C\u6559\u7A0B\u5C55\u793A\u4E86\u5982\u4F55\u901A\u8FC7 TVM \u63D0\u4F9B\u7684\u5404\u79CD\u539F\u8BED\u6765\u8C03\u5EA6\u8BA1\u7B97\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from __future__ import absolute_import, print_function\n\nimport tvm\nfrom tvm import te\nimport numpy as np\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u8BA1\u7B97\u76F8\u540C\u7ED3\u679C\u7684\u65B9\u6CD5\u4F17\u591A\uFF0C\u7136\u800C\uFF0C\u4E0D\u540C\u7684\u65B9\u6CD5\u4F1A\u5BFC\u81F4\u5C40\u90E8\u6027\u548C\u6027\u80FD\u5404\u5F02\uFF0C\u56E0\u6B64 TVM \u8981\u6C42\u7528\u6237\u501F\u52A9 ",(0,i.jsx)(n.strong,{children:"Schedule"})," \u6267\u884C\u8BA1\u7B97\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Schedule"})," \u662F\u4E00\u7EC4\u8BA1\u7B97\u8F6C\u6362\uFF0C\u53EF\u7528\u4E8E\u8F6C\u6362\u7A0B\u5E8F\u4E2D\u7684\u5FAA\u73AF\u8BA1\u7B97\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# \u58F0\u660E\u53D8\u91CF\uFF0C\u4F9B\u4E4B\u540E\u4F7F\u7528\nn = te.var("n")\nm = te.var("m")\n'})}),"\n",(0,i.jsx)(n.p,{children:"Schedule \u53EF\u7531\u7B97\u5B50\u5217\u8868\u521B\u5EFA\uFF0C\u5B83\u9ED8\u8BA4\u4EE5\u884C\u4F18\u5148\u7684\u65B9\u5F0F\u4E32\u884C\u8BA1\u7B97\u5F20\u91CF\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# \u58F0\u660E\u4E00\u4E2A\u77E9\u9635\u5143\u7D20\u4E58\u6CD5\nA = te.placeholder((m, n), name="A")\nB = te.placeholder((m, n), name="B")\nC = te.compute((m, n), lambda i, j: A[i, j] * B[i, j], name="C")\n\ns = te.create_schedule([C.op])\n# lower \u4F1A\u5C06\u8BA1\u7B97\u4ECE\u5B9A\u4E49\u8F6C\u6362\u4E3A\u5B9E\u9645\u53EF\u8C03\u7528\u7684\u51FD\u6570\u3002\n# \u4F7F\u7528\u53C2\u6570 `simple_mode=True` \u4F1A\u8FD4\u56DE\u4E00\u4E2A\u53EF\u8BFB\u7684\u7C7B C \u7684\u8BED\u53E5\uFF0C\u8FD9\u91CC\u7528\u5B83\u6765\u6253\u5370 schedule \u7ED3\u679C\u3002\nprint(tvm.lower(s, [A, B, C], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto"),\n             C: Buffer(C_2: Pointer(float32), float32, [(stride_2: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m, n: int32], [stride, stride_3: int32], type="auto"), B_1: B_3: Buffer(B_2, float32, [m, n], [stride_1, stride_4: int32], type="auto"), C_1: C_3: Buffer(C_2, float32, [m, n], [stride_2, stride_5: int32], type="auto")} {\n  for (i: int32, 0, m) {\n    for (j: int32, 0, n) {\n      C[((i*stride_2) + (j*stride_5))] = (A[((i*stride) + (j*stride_3))]*B[((i*stride_1) + (j*stride_4))])\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u4E00\u4E2A Schedule \u7531\u591A\u4E2A Stage \u7EC4\u6210\uFF0C\u4E00\u4E2A ",(0,i.jsx)(n.strong,{children:"Stage"})," \u4EE3\u8868\u4E00\u4E2A\u64CD\u4F5C\u7684 schedule\u3002\u6BCF\u4E2A stage \u7684\u8C03\u5EA6\u90FD\u6709\u591A\u79CD\u65B9\u6CD5\uFF1A"]}),"\n",(0,i.jsx)(n.h2,{id:"split",children:"split"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"split"})," \u53EF\u6839\u636E ",(0,i.jsx)(n.code,{children:"factor"})," \u5C06\u6307\u5B9A axis \u62C6\u5206\u4E3A\u4E24\u4E2A axis\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((m,), name="A")\nB = te.compute((m,), lambda i: A[i] * 2, name="B")\n\ns = te.create_schedule(B.op)\nxo, xi = s[B].split(B.op.axis[0], factor=32)\nprint(tvm.lower(s, [A, B], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m], [stride], type="auto"), B_1: B_3: Buffer(B_2, float32, [m], [stride_1], type="auto")} {\n  for (i.outer: int32, 0, floordiv((m + 31), 32)) {\n    for (i.inner: int32, 0, 32) {\n      if @tir.likely((((i.outer*32) + i.inner) < m), dtype=bool) {\n        let cse_var_1: int32 = ((i.outer*32) + i.inner)\n        B[(cse_var_1*stride_1)] = (A[(cse_var_1*stride)]*2f32)\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u4E5F\u53EF\u7528 ",(0,i.jsx)(n.code,{children:"nparts"})," \u6765\u62C6\u5206 axis\uFF0C\u5B83\u62C6\u5206 axis \u7684\u65B9\u5F0F\u4E0E ",(0,i.jsx)(n.code,{children:"factor"})," \u76F8\u53CD\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((m,), name="A")\nB = te.compute((m,), lambda i: A[i], name="B")\n\ns = te.create_schedule(B.op)\nbx, tx = s[B].split(B.op.axis[0], nparts=32)\nprint(tvm.lower(s, [A, B], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m], [stride], type="auto"), B_1: B_3: Buffer(B_2, float32, [m], [stride_1], type="auto")} {\n  for (i.outer: int32, 0, 32) {\n    for (i.inner: int32, 0, floordiv((m + 31), 32)) {\n      if @tir.likely(((i.inner + (i.outer*floordiv((m + 31), 32))) < m), dtype=bool) {\n        B[((i.inner + (i.outer*floordiv((m + 31), 32)))*stride_1)] = A[((i.inner + (i.outer*floordiv((m + 31), 32)))*stride)]\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"tile",children:"tile"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tile"})," \u53EF\u5728\u4E24\u4E2A axis \u4E0A\u9010\u5757\u6267\u884C\u8BA1\u7B97\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((m, n), name="A")\nB = te.compute((m, n), lambda i, j: A[i, j], name="B")\n\ns = te.create_schedule(B.op)\nxo, yo, xi, yi = s[B].tile(B.op.axis[0], B.op.axis[1], x_factor=10, y_factor=5)\nprint(tvm.lower(s, [A, B], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m, n: int32], [stride, stride_2: int32], type="auto"), B_1: B_3: Buffer(B_2, float32, [m, n], [stride_1, stride_3: int32], type="auto")} {\n  for (i.outer: int32, 0, floordiv((m + 9), 10)) {\n    for (j.outer: int32, 0, floordiv((n + 4), 5)) {\n      for (i.inner: int32, 0, 10) {\n        if @tir.likely((((i.outer*10) + i.inner) < m), dtype=bool) {\n          for (j.inner: int32, 0, 5) {\n            if @tir.likely((((j.outer*5) + j.inner) < n), dtype=bool) {\n              let cse_var_2: int32 = ((j.outer*5) + j.inner)\n              let cse_var_1: int32 = ((i.outer*10) + i.inner)\n              B[((cse_var_1*stride_1) + (cse_var_2*stride_3))] = A[((cse_var_1*stride) + (cse_var_2*stride_2))]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"fuse",children:"fuse"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"fuse"})," \u53EF\u5C06\u4E00\u4E2A\u8BA1\u7B97\u7684\u4E24\u4E2A\u8FDE\u7EED axis \u878D\u5408\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((m, n), name="A")\nB = te.compute((m, n), lambda i, j: A[i, j], name="B")\n\ns = te.create_schedule(B.op)\n# \u9996\u5148\u8C03\u7528 tile \u5E73\u94FA\u5230\u56DB\u4E2A axis: (i.outer, j.outer, i.inner, j.inner)\nxo, yo, xi, yi = s[B].tile(B.op.axis[0], B.op.axis[1], x_factor=10, y_factor=5)\n# \u7136\u540E\u5C06 (i.inner, j.inner) \u878D\u5408\u6210\u4E00\u4E2A\u8F74\uFF1A (i.inner.j.inner.fused)\nfused = s[B].fuse(xi, yi)\nprint(tvm.lower(s, [A, B], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m, n: int32], [stride, stride_2: int32], type="auto"), B_1: B_3: Buffer(B_2, float32, [m, n], [stride_1, stride_3: int32], type="auto")} {\n  for (i.outer: int32, 0, floordiv((m + 9), 10)) {\n    for (j.outer: int32, 0, floordiv((n + 4), 5)) {\n      for (i.inner.j.inner.fused: int32, 0, 50) {\n        if @tir.likely((((i.outer*10) + floordiv(i.inner.j.inner.fused, 5)) < m), dtype=bool) {\n          if @tir.likely((((j.outer*5) + floormod(i.inner.j.inner.fused, 5)) < n), dtype=bool) {\n            let cse_var_2: int32 = ((j.outer*5) + floormod(i.inner.j.inner.fused, 5))\n            let cse_var_1: int32 = ((i.outer*10) + floordiv(i.inner.j.inner.fused, 5))\n            B[((cse_var_1*stride_1) + (cse_var_2*stride_3))] = A[((cse_var_1*stride) + (cse_var_2*stride_2))]\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"reorder",children:"reorder"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"reorder"})," \u53EF\u6309\u6307\u5B9A\u7684\u987A\u5E8F\u5BF9 axis \u91CD\u65B0\u6392\u5E8F\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((m, n), name="A")\nB = te.compute((m, n), lambda i, j: A[i, j], name="B")\n\ns = te.create_schedule(B.op)\n# \u9996\u5148\u8C03\u7528 tile \u5E73\u94FA\u5230\u56DB\u4E2A\u8F74: (i.outer, j.outer, i.inner, j.inner)\nxo, yo, xi, yi = s[B].tile(B.op.axis[0], B.op.axis[1], x_factor=10, y_factor=5)\n# \u7136\u540E\u5C06 axis \u91CD\u65B0\u6392\u5E8F\uFF1A\uFF08i.inner\uFF0Cj.outer\uFF0Ci.outer\uFF0Cj.inner\uFF09\ns[B].reorder(xi, yo, xo, yi)\nprint(tvm.lower(s, [A, B], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m, n: int32], [stride, stride_2: int32], type="auto"), B_1: B_3: Buffer(B_2, float32, [m, n], [stride_1, stride_3: int32], type="auto")} {\n  for (i.inner: int32, 0, 10) {\n    for (j.outer: int32, 0, floordiv((n + 4), 5)) {\n      for (i.outer: int32, 0, floordiv((m + 9), 10)) {\n        if @tir.likely((((i.outer*10) + i.inner) < m), dtype=bool) {\n          for (j.inner: int32, 0, 5) {\n            if @tir.likely((((j.outer*5) + j.inner) < n), dtype=bool) {\n              let cse_var_2: int32 = ((j.outer*5) + j.inner)\n              let cse_var_1: int32 = ((i.outer*10) + i.inner)\n              B[((cse_var_1*stride_1) + (cse_var_2*stride_3))] = A[((cse_var_1*stride) + (cse_var_2*stride_2))]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"bind",children:"bind"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"bind"})," \u53EF\u5C06\u6307\u5B9A axis \u4E0E\u7EBF\u7A0B axis \u7ED1\u5B9A\uFF0C\u5E38\u7528\u4E8E GPU \u7F16\u7A0B\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((n,), name="A")\nB = te.compute(A.shape, lambda i: A[i] * 2, name="B")\n\ns = te.create_schedule(B.op)\nbx, tx = s[B].split(B.op.axis[0], factor=64)\ns[B].bind(bx, te.thread_axis("blockIdx.x"))\ns[B].bind(tx, te.thread_axis("threadIdx.x"))\nprint(tvm.lower(s, [A, B], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*n: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*n)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [n], [stride], type="auto"), B_1: B_3: Buffer(B_2, float32, [n], [stride_1], type="auto")} {\n  attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = floordiv((n + 63), 64);\n  attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 64;\n  if @tir.likely((((blockIdx.x*64) + threadIdx.x) < n), dtype=bool) {\n    B[(((blockIdx.x*64) + threadIdx.x)*stride_1)] = (A[(((blockIdx.x*64) + threadIdx.x)*stride)]*2f32)\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"compute_at",children:"compute_at"}),"\n",(0,i.jsx)(n.p,{children:"\u5BF9\u4E8E\u5305\u542B\u591A\u4E2A\u7B97\u5B50\u7684 schedule\uFF0CTVM \u9ED8\u8BA4\u4F1A\u5206\u522B\u8BA1\u7B97 root \u5904\u7684\u5F20\u91CF\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((m,), name="A")\nB = te.compute((m,), lambda i: A[i] + 1, name="B")\nC = te.compute((m,), lambda i: B[i] * 2, name="C")\n\ns = te.create_schedule(C.op)\nprint(tvm.lower(s, [A, B, C], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto"),\n             C: Buffer(C_2: Pointer(float32), float32, [(stride_2: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m], [stride], type="auto"), B_1: B_3: Buffer(B_2, float32, [m], [stride_1], type="auto"), C_1: C_3: Buffer(C_2, float32, [m], [stride_2], type="auto")} {\n  for (i: int32, 0, m) {\n    B[(i*stride_1)] = (A[(i*stride)] + 1f32)\n  }\n  for (i_1: int32, 0, m) {\n    C[(i_1*stride_2)] = (B[(i_1*stride_1)]*2f32)\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"compute_at"})," \u53EF\u5C06 B \u7684\u8BA1\u7B97\u79FB\u52A8\u5230 C \u8BA1\u7B97\u7684\u9996\u4E2A axis \u4E2D\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((m,), name="A")\nB = te.compute((m,), lambda i: A[i] + 1, name="B")\nC = te.compute((m,), lambda i: B[i] * 2, name="C")\n\ns = te.create_schedule(C.op)\ns[B].compute_at(s[C], C.op.axis[0])\nprint(tvm.lower(s, [A, B, C], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto"),\n             C: Buffer(C_2: Pointer(float32), float32, [(stride_2: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m], [stride], type="auto"), B_1: B_3: Buffer(B_2, float32, [m], [stride_1], type="auto"), C_1: C_3: Buffer(C_2, float32, [m], [stride_2], type="auto")} {\n  for (i: int32, 0, m) {\n    B[(i*stride_1)] = (A[(i*stride)] + 1f32)\n    C[(i*stride_2)] = (B[(i*stride_1)]*2f32)\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"compute_inline",children:"compute_inline"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"compute_inline"})," \u53EF\u5C06 stage \u6807\u8BB0\u4E3A inline\uFF0C\u7136\u540E\u6269\u5C55\u8BA1\u7B97\u4F53\uFF0C\u5E76\u5C06\u5176\u63D2\u5165\u5230\u9700\u8981\u5F20\u91CF\u7684\u5730\u5740\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((m,), name="A")\nB = te.compute((m,), lambda i: A[i] + 1, name="B")\nC = te.compute((m,), lambda i: B[i] * 2, name="C")\n\ns = te.create_schedule(C.op)\ns[B].compute_inline()\nprint(tvm.lower(s, [A, B, C], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto"),\n             C: Buffer(C_2: Pointer(float32), float32, [(stride_2: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m], [stride], type="auto"), B_1: B_3: Buffer(B_2, float32, [m], [stride_1], type="auto"), C_1: C_3: Buffer(C_2, float32, [m], [stride_2], type="auto")} {\n  for (i: int32, 0, m) {\n    C[(i*stride_2)] = ((A[(i*stride)] + 1f32)*2f32)\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"compute_root",children:"compute_root"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"compute_root"})," \u53EF\u5C06\u4E00\u4E2A stage \u7684\u8BA1\u7B97\u79FB\u52A8\u5230 root\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'A = te.placeholder((m,), name="A")\nB = te.compute((m,), lambda i: A[i] + 1, name="B")\nC = te.compute((m,), lambda i: B[i] * 2, name="C")\n\ns = te.create_schedule(C.op)\ns[B].compute_at(s[C], C.op.axis[0])\ns[B].compute_root()\nprint(tvm.lower(s, [A, B, C], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [(stride: int32*m: int32)], [], type="auto"),\n             B: Buffer(B_2: Pointer(float32), float32, [(stride_1: int32*m)], [], type="auto"),\n             C: Buffer(C_2: Pointer(float32), float32, [(stride_2: int32*m)], [], type="auto")}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [m], [stride], type="auto"), B_1: B_3: Buffer(B_2, float32, [m], [stride_1], type="auto"), C_1: C_3: Buffer(C_2, float32, [m], [stride_2], type="auto")} {\n  for (i: int32, 0, m) {\n    B[(i*stride_1)] = (A[(i*stride)] + 1f32)\n  }\n  for (i_1: int32, 0, m) {\n    C[(i_1*stride_2)] = (B[(i_1*stride_1)]*2f32)\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u603B\u7ED3",children:"\u603B\u7ED3"}),"\n",(0,i.jsx)(n.p,{children:"\u672C\u6559\u7A0B\u4ECB\u7ECD\u4E86 TVM \u4E2D\u7684 schedule \u539F\u8BED\uFF08\u4F7F\u5F97\u7528\u6237\u53EF\u4EE5\u8F7B\u677E\u3001\u7075\u6D3B\u5730\u8C03\u5EA6\u8BA1\u7B97\uFF09\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u4E3A\u63D0\u9AD8\u5185\u6838\u7684\u6027\u80FD\uFF0C\u4E00\u822C\u7684\u5DE5\u4F5C\u6D41\u7A0B\u5982\u4E0B\uFF1A"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u901A\u8FC7\u4E00\u7CFB\u5217\u64CD\u4F5C\u63CF\u8FF0\u4F60\u7684\u8BA1\u7B97\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u4F7F\u7528\u539F\u8BED\u6765\u8C03\u5EA6\u8BA1\u7B97\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u7F16\u8BD1\u5E76\u8FD0\u884C\uFF0C\u67E5\u770B\u6027\u80FD\u5DEE\u5F02\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6839\u636E\u8FD0\u884C\u7ED3\u679C\u6765\u8C03\u6574 schedule\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://tvm.apache.org/docs/_downloads/da47fa2ad30c4b6921171c97e72f36a9/schedule_primitives.py",children:"\u4E0B\u8F7D Python \u6E90\u4EE3\u7801\uFF1Aschedule_primitives.py"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://tvm.apache.org/docs/_downloads/b78f1a6e1b2c2fb073a791dc258a1d7d/schedule_primitives.ipynb",children:"\u4E0B\u8F7D Jupyter Notebook\uFF1Aschedule_primitives.ipynb"})})]})}function f(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(_,{...e})}):_(e)}},21494:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return o}});var r=t(39546);let i={},a=r.createContext(i);function o(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);