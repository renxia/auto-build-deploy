"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["5038"],{5216:function(e,n,t){t.r(n),t.d(n,{default:()=>p,frontMatter:()=>l,metadata:()=>r,assets:()=>s,toc:()=>d,contentTitle:()=>o});var r=JSON.parse('{"id":"how_to/te_schedules/tensorize","title":"\u4F7F\u7528 Tensorize \u6765\u5229\u7528\u786C\u4EF6\u5185\u8054\u51FD\u6570","description":"\u5355\u51FB \u6B64\u5904 \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801","source":"@site/versioned_docs/version-0.10.0/how_to/te_schedules/06-tensorize.md","sourceDirName":"how_to/te_schedules","slug":"/how_to/te_schedules/tensorize","permalink":"/docs/tvm-cn/docs/0.10.0/how_to/te_schedules/tensorize","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/versioned_docs/version-0.10.0/how_to/te_schedules/06-tensorize.md","tags":[],"version":"0.10.0","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"sidebarPosition":6,"frontMatter":{"title":"\u4F7F\u7528 Tensorize \u6765\u5229\u7528\u786C\u4EF6\u5185\u8054\u51FD\u6570"},"sidebar":"tutorialSidebar","previous":{"title":"\u5916\u90E8\u5F20\u91CF\u51FD\u6570","permalink":"/docs/tvm-cn/docs/0.10.0/how_to/te_schedules/external_tensor"},"next":{"title":"\u4F7F\u7528\u5143\u7EC4\u8F93\u5165\uFF08Tuple Inputs\uFF09\u8FDB\u884C\u8BA1\u7B97\u548C\u5F52\u7EA6","permalink":"/docs/tvm-cn/docs/0.10.0/how_to/te_schedules/compute_reduce"}}'),i=t("74132"),a=t("21494");let l={title:"\u4F7F\u7528 Tensorize \u6765\u5229\u7528\u786C\u4EF6\u5185\u8054\u51FD\u6570"},o="\u4F7F\u7528 Tensorize \u6765\u5229\u7528\u786C\u4EF6\u5185\u8054\u51FD\u6570",s={},d=[{value:"\u5B9A\u4E49\u77E9\u9635\u4E58\u6CD5",id:"\u5B9A\u4E49\u77E9\u9635\u4E58\u6CD5",level:2},{value:"\u8C03\u5EA6 Matmul",id:"\u8C03\u5EA6-matmul",level:2},{value:"\u5B9A\u4E49 GEMV Tensorization \u5185\u8054\u51FD\u6570",id:"\u5B9A\u4E49-gemv-tensorization-\u5185\u8054\u51FD\u6570",level:2},{value:"\u66F4\u65B0 tensorize \u7684 reduce",id:"\u66F4\u65B0-tensorize-\u7684-reduce",level:2},{value:"\u603B\u7ED3",id:"\u603B\u7ED3",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\u4F7F\u7528-tensorize-\u6765\u5229\u7528\u786C\u4EF6\u5185\u8054\u51FD\u6570",children:"\u4F7F\u7528 Tensorize \u6765\u5229\u7528\u786C\u4EF6\u5185\u8054\u51FD\u6570"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["\u5355\u51FB ",(0,i.jsx)(n.a,{href:"https://tvm.apache.org/docs/how_to/work_with_schedules/tensorize.html#sphx-glr-download-how-to-work-with-schedules-tensorize-py",children:"\u6B64\u5904"})," \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801"]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"\u4F5C\u8005"}),"\uFF1A",(0,i.jsx)(n.a,{href:"https://github.com/yzhliu",children:"Yizhi Liu"})]}),"\n",(0,i.jsx)(n.p,{children:"\u672C\u6587\u4ECB\u7ECD\u5982\u4F55\u5728 TVM \u4E2D\u8FDB\u884C\u5F20\u91CF\u5316\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["\u901A\u8FC7\u4F7F\u7528\u8C03\u5EA6\u539F\u8BED ",(0,i.jsx)(n.code,{children:"tensorize"}),"\uFF0C\u53EF\u4EE5\u7528\u76F8\u5E94\u7684\u5185\u8054\u51FD\u6570\u66FF\u6362\u4E00\u4E2A\u8BA1\u7B97\u5355\u5143\uFF0C\u4ECE\u800C\u53EF\u4EE5\u5229\u7528\u624B\u5199\u7684 micro-kernels\uFF0C\u4EE5\u53CA\u6269\u5C55 TVM \u652F\u6301\u65B0\u7684\u786C\u4EF6\u67B6\u6784\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u672C\u6559\u7A0B\u7684\u76EE\u7684\u662F\u5C55\u793A tensorize \u7684\u529F\u80FD\u548C\u7528\u6CD5\uFF0C\u800C\u975E\u63D0\u4F9B\u6709\u6548\u7684\u89E3\u51B3\u65B9\u6848\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from __future__ import absolute_import, print_function\n\nimport tvm\nfrom tvm import te\nimport tvm.testing\nimport numpy as np\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u5B9A\u4E49\u77E9\u9635\u4E58\u6CD5",children:"\u5B9A\u4E49\u77E9\u9635\u4E58\u6CD5"}),"\n",(0,i.jsxs)(n.p,{children:["\u4EE5\u77E9\u9635\u4E58\u6CD5\u4E3A\u4F8B\uFF0CMatmul \u9996\u5148\u5C06\u4E24\u4E2A\u77E9\u9635\u4E4B\u95F4\u7684\u5BF9\u5E94\u5143\u7D20\u76F8\u4E58\uFF0C\u7136\u540E\u5728\u67D0\u4E2A\u8F74\u4E0A\u7D2F\u52A0\u3002\u4EE5\u4E0B\u4EE3\u7801\u63CF\u8FF0\u4E86 TVM \u4E2D\u7684\u8BA1\u7B97 ",(0,i.jsx)(n.code,{children:"A * B^T"}),"\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'N, M, L = 1024, 512, 64\nA = te.placeholder((N, L), name="A")\nB = te.placeholder((M, L), name="B")\nk = te.reduce_axis((0, L), name="k")\nC = te.compute((N, M), lambda i, j: te.sum(A[i, k] * B[j, k], axis=k), name="C")\ns = te.create_schedule(C.op)\nprint(tvm.lower(s, [A, B, C], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [65536], []),\n             B: Buffer(B_2: Pointer(float32), float32, [32768], []),\n             C: Buffer(C_2: Pointer(float32), float32, [524288], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 64], []), B_1: B_3: Buffer(B_2, float32, [512, 64], []), C_1: C_3: Buffer(C_2, float32, [1024, 512], [])} {\n  for (i: int32, 0, 1024) {\n    for (j: int32, 0, 512) {\n      C[((i*512) + j)] = 0f32\n      for (k: int32, 0, 64) {\n        let cse_var_1: int32 = ((i*512) + j)\n        C[cse_var_1] = (C[cse_var_1] + (A[((i*64) + k)]*B[((j*64) + k)]))\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u8C03\u5EA6-matmul",children:"\u8C03\u5EA6 Matmul"}),"\n",(0,i.jsx)(n.p,{children:"\u5047\u8BBE\u6709\u4E00\u4E2A\u652F\u6301\u77E9\u9635\u5411\u91CF\u4E58\u6CD5\uFF08GEMV\uFF09\u4F5C\u4E3A\u786C\u4EF6\u539F\u8BED\u7684\u52A0\u901F\u5668\uFF0C\u5B83\u53EF\u4EE5\u91C7\u7528\u4EFB\u610F\u5927\u5C0F\u7684 reduce \u8F74\uFF0C\u4F46\u53E6\u4E00\u4E2A\u8F74\u9700\u8981\u4E0D\u5927\u4E8E 16\u3002\u6211\u4EEC\u9700\u8981\u5206\u89E3 matmul \u5FAA\u73AF\uFF0C\u4F7F\u6700\u91CC\u9762\u7684\u5FAA\u73AF\u662F\uFF0816x64\uFF09GEMV\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"factor = 16\nx, y = C.op.axis\n(z,) = C.op.reduce_axis\nyo, yi = s[C].split(y, factor=factor)\ns[C].reorder(x, yo, yi, z)\nprint(tvm.lower(s, [A, B, C], simple_mode=True))\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-plain",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [65536], []),\n             B: Buffer(B_2: Pointer(float32), float32, [32768], []),\n             C: Buffer(C_2: Pointer(float32), float32, [524288], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 64], []), B_1: B_3: Buffer(B_2, float32, [512, 64], []), C_1: C_3: Buffer(C_2, float32, [1024, 512], [])} {\n  for (i: int32, 0, 1024) {\n    for (j.outer: int32, 0, 32) {\n      for (j.inner: int32, 0, 16) {\n        C[(((i*512) + (j.outer*16)) + j.inner)] = 0f32\n        for (k: int32, 0, 64) {\n          let cse_var_1: int32 = (((i*512) + (j.outer*16)) + j.inner)\n          C[cse_var_1] = (C[cse_var_1] + (A[((i*64) + k)]*B[(((j.outer*1024) + (j.inner*64)) + k)]))\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u5982\u4E0A\u9762\u6253\u5370\u7684 IR \u6240\u793A\uFF0C\u5185\u90E8\u5FAA\u73AF ",(0,i.jsx)(n.code,{children:"j.inner"})," \u4E0E ",(0,i.jsx)(n.code,{children:"k"})," \u5171\u540C\u6784\u6210 GEMV \u7684\u8BA1\u7B97\u2014\u2014\u5728\u6700\u91CC\u9762\u7684\u4E24\u4E2A\u5FAA\u73AF\u4E2D\uFF0C\u7D22\u5F15 ",(0,i.jsx)(n.code,{children:"i"})," \u662F\u56FA\u5B9A\u7684\uFF0C\u5BF9\u77E9\u9635 ",(0,i.jsx)(n.code,{children:"A"})," \u7684\u8BBF\u95EE\u53EA\u53D6\u51B3\u4E8E ",(0,i.jsx)(n.code,{children:"k"}),"\uFF0C\u8FD9\u4F7F\u5F97 ",(0,i.jsx)(n.code,{children:"A"})," \u7684\u8BBF\u95EE\u6A21\u5F0F\u662F\u4E00\u4E2A\u300C\u5411\u91CF\u300D\u3002\u53EF\u4EE5\u5F20\u91CF\u5316 ",(0,i.jsx)(n.code,{children:"j.inner"}),"\uFF0C\u4ECE\u800C\u5229\u7528\u5047\u5B9A\u786C\u4EF6\u7684 GEMV \u6307\u4EE4\u3002"]}),"\n",(0,i.jsx)(n.h2,{id:"\u5B9A\u4E49-gemv-tensorization-\u5185\u8054\u51FD\u6570",children:"\u5B9A\u4E49 GEMV Tensorization \u5185\u8054\u51FD\u6570"}),"\n",(0,i.jsxs)(n.p,{children:["\u8C03\u5EA6\u5F20\u91CF\u4E4B\u524D\uFF0C\u9996\u5148\u5B9A\u4E49 GEMV \u7684\u5185\u8054\u51FD\u6570\u3002\u5B83\u5305\u62EC\u4E24\u90E8\u5206\uFF1A\u7B2C\u4E00\u90E8\u5206\u662F GEMV \u7684\u8BA1\u7B97\u5B9A\u4E49\uFF0C TVM \u4F7F\u7528\u5B83\u6765\u5339\u914D\u539F\u59CB Matmul schedule \u4E2D\u7684\u8BA1\u7B97\u6A21\u5F0F\uFF1B\u4E8C\u662F\u6307\u5B9A\u5982\u4F55\u5728\u8BBE\u5907\u4E0A\u6267\u884C GEMV\uFF0C\u5728\u4E0B\u9762\u7684 ",(0,i.jsx)(n.code,{children:"intrin_func"})," \u4E2D\u5B8C\u6210\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def intrin_gemv(m, l):\n    a = te.placeholder((l,), name="a")\n    b = te.placeholder((m, l), name="b")\n    k = te.reduce_axis((0, l), name="k")\n    c = te.compute((m,), lambda i: te.sum(a[k] * b[i, k], axis=k), name="c")\n    Ab = tvm.tir.decl_buffer(a.shape, a.dtype, name="A", offset_factor=1, strides=[1])\n    Bb = tvm.tir.decl_buffer(b.shape, b.dtype, name="B", offset_factor=1, strides=[te.var("s1"), 1])\n    Cb = tvm.tir.decl_buffer(c.shape, c.dtype, name="C", offset_factor=1, strides=[1])\n\n    def intrin_func(ins, outs):\n        ib = tvm.tir.ir_builder.create()\n        aa, bb = ins\n        cc = outs[0]\n        ib.emit(\n            tvm.tir.call_extern(\n                "int32",\n                "gemv_update",\n                cc.access_ptr("w"),\n                aa.access_ptr("r"),\n                bb.access_ptr("r"),\n                m,\n                l,\n                bb.strides[0],\n            )\n        )\n        return ib.get()\n\n    return te.decl_tensor_intrin(c.op, intrin_func, binds={a: Ab, b: Bb, c: Cb})\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u8FD9\u91CC ",(0,i.jsx)(n.code,{children:"te.decl_tensor_intrin"})," \u58F0\u660E\u4E86\u5982\u4F55\u6267\u884C\u8BA1\u7B97 ",(0,i.jsx)(n.code,{children:"c.op"}),"\u3002\u6211\u4EEC\u7684\u5B9E\u73B0\u53EA\u662F\u63A5\u6536\u8F93\u5165\u548C\u8F93\u51FA\uFF0C\u5C06\u5B83\u4EEC\u8F6C\u6362\u4E3A\u6307\u9488\uFF0C\u5E76\u63D0\u4F9B\u5916\u90E8\u51FD\u6570\u8C03\u7528\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["\u6CE8\u610F\uFF0Ctensorization \u9700\u8981\u7528\u6237\u6307\u5B9A ",(0,i.jsx)(n.code,{children:"offset_factor"}),"\uFF0CTVM \u901A\u8FC7\u8FD9\u4E2A\u4FE1\u606F\u77E5\u9053\u6570\u636E\u5728\u539F\u59CB\u6570\u636E\u7ED3\u6784\u7684\u8D77\u59CB\u5730\u5740\u4E0E\u4F20\u7ED9 tensorize \u7684\u504F\u79FB\u91CF\u4E4B\u95F4\u662F\u5426\u5BF9\u9F50\uFF0C\u56E0\u6B64\u5B83\u6709\u673A\u4F1A\u901A\u8FC7\u5411\u91CF\u5316\u52A0\u8F7D\u8FDB\u884C\u4F18\u5316\u3002\u7B80\u5355\u8D77\u89C1\uFF0C\u5C06\u56E0\u5B50\u8BBE\u7F6E\u4E3A 1\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["\u4E3A\u8F93\u5165\u548C\u8F93\u51FA\u58F0\u660E buffer\uFF0C\u8FD9\u5E76\u4E0D\u662F\u5FC5\u9700\u7684\uFF0C\u4F46\u5982\u6B64\u4E00\u6765\uFF0C\u6211\u4EEC\u5C31\u80FD\u53D7\u76CA\u4E8E buffer \u63D0\u4F9B\u7684\u989D\u5916\u4FE1\u606F\u4E86\u3002\u4F8B\u5982\uFF0C\u5C06 ",(0,i.jsx)(n.code,{children:"bb.strides[0]"})," \u4F5C\u4E3A\u53C2\u6570\uFF0C\u4F20\u7ED9\u5916\u90E8\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"gemv_update"}),"\u3002\u73B0\u5728 ",(0,i.jsx)(n.code,{children:"bb.strides[0] == l"}),"\uFF0C\u7A0D\u540E\u5C06\u770B\u5230\u5B83\u4EEC\u4E0E\u66F4\u590D\u6742\u7684 schedules \u6709\u4F55\u4E0D\u540C\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["\u6CE8\u610F\uFF0C\u5C06 ",(0,i.jsx)(n.code,{children:'te.var("s1")'})," \u4F5C\u4E3A ",(0,i.jsx)(n.code,{children:"B"})," \u7684\u7B2C\u4E00\u4E2A\u6B65\u957F\u7EF4\u5EA6\u3002\u82E5\u53EF\u4EE5\u63A8\u65AD\u6B65\u957F\u2014\u2014\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0CTVM \u77E5\u9053\u5F20\u91CF B \u662F\u7D27\u51D1\u7684\uFF0C\u56E0\u6B64\u6B65\u957F\u662F ",(0,i.jsx)(n.code,{children:"[L, 1]"}),"\u2014\u2014\u8FD9\u6837\u7684\u5360\u4F4D\u7B26\u53EF\u4EE5\u8BA9 TVM \u81EA\u52A8\u7ED1\u5B9A\u63A8\u65AD\u503C\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"gemv = intrin_gemv(factor, L)\ns[C].tensorize(yi, gemv)\nprint(tvm.lower(s, [A, B, C], simple_mode=True))\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [65536], []),\n             B: Buffer(B_2: Pointer(float32), float32, [32768], []),\n             C: Buffer(C_2: Pointer(float32), float32, [524288], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 64], []), B_1: B_3: Buffer(B_2, float32, [512, 64], []), C_1: C_3: Buffer(C_2, float32, [1024, 512], [])} {\n  for (i: int32, 0, 1024) {\n    for (j.outer: int32, 0, 32) {\n      @tir.call_extern("gemv_update", @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), C_2, ((i*512) + (j.outer*16)), 16, 2, dtype=handle), @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), A_2, (i*64), 64, 1, dtype=handle), @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), B_2, (j.outer*1024), 1024, 1, dtype=handle), 16, 64, 64, dtype=int32)\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u901A\u8FC7\u5F20\u91CF\u5316 ",(0,i.jsx)(n.code,{children:"yi"}),"\uFF0C\u6700\u91CC\u9762\u7684\u4E24\u4E2A\u5FAA\u73AF\u73B0\u5728\u88AB\u4E4B\u524D\u5B9A\u4E49\u7684\u5185\u8054\u51FD\u6570\u6240\u53D6\u4EE3\u3002\u4E3A\u4E86\u6784\u5EFA\u548C\u8FD0\u884C\u6A21\u5757\uFF0C\u5B9A\u4E49\u5916\u90E8\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"gemv_update"}),"\uFF08GEMV \u7684\u7B80\u5355\u5B9E\u73B0\uFF0C\u4EC5\u7528\u4E8E\u6F14\u793A\uFF09\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def gemv_impl():\n    cc_code = """\n      extern "C" int gemv_update(float *cc, float *aa, float *bb, int m, int l, int stride) {\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < l; ++j) {\n                cc[i] += aa[j] * bb[i * stride + j];\n            }\n        }\n        return 0;\n      }\n    """\n    from tvm.contrib import utils, clang\n\n    temp = utils.tempdir()\n    ll_path = temp.relpath("temp.ll")\n    # \u4ECE C \u6E90\u4EE3\u7801\u521B\u5EFA LLVM ir\n    ll_code = clang.create_llvm(cc_code, output=ll_path)\n    return ll_code\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u6267\u884C\u5F20\u91CF\u5316 GEMV \u524D\uFF0C\u5229\u7528\u7F16\u8BD1\u6307\u793A\u5C5E\u6027 ",(0,i.jsx)(n.code,{children:"import_llvm"})," \u5BFC\u5165 llvm \u5185\u8054 asm\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'s[C].pragma(x, "import_llvm", gemv_impl())\nprint(tvm.lower(s, [A, B, C], simple_mode=True))\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'@main = primfn(A_1: handle, B_1: handle, C_1: handle) -> ()\n  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}\n  buffers = {A: Buffer(A_2: Pointer(float32), float32, [65536], []),\n             B: Buffer(B_2: Pointer(float32), float32, [32768], []),\n             C: Buffer(C_2: Pointer(float32), float32, [524288], [])}\n  buffer_map = {A_1: A, B_1: B, C_1: C}\n  preflattened_buffer_map = {A_1: A_3: Buffer(A_2, float32, [1024, 64], []), B_1: B_3: Buffer(B_2, float32, [512, 64], []), C_1: C_3: Buffer(C_2, float32, [1024, 512], [])} {\n  attr [IterVar(i: int32, (nullptr), "DataPar", "")] "pragma_import_llvm" = "; ModuleID = \'/tmp/tmpnmkhyqx0/input0.cc\'\\nsource_filename = \\"/tmp/tmpnmkhyqx0/input0.cc\\"\\ntarget datalayout = \\"e-m:e-i64:64-f80:128-n8:16:32:64-S128\\"\\ntarget triple = \\"x86_64-pc-linux-gnu\\"\\n\\n; Function Attrs: noinline nounwind optnone uwtable\\ndefine dso_local i32 @gemv_update(float*, float*, float*, i32, i32, i32) #0 {\\n  %7 = alloca float*, align 8\\n  %8 = alloca float*, align 8\\n  %9 = alloca float*, align 8\\n  %10 = alloca i32, align 4\\n  %11 = alloca i32, align 4\\n  %12 = alloca i32, align 4\\n  %13 = alloca i32, align 4\\n  %14 = alloca i32, align 4\\n  store float* %0, float** %7, align 8\\n  store float* %1, float** %8, align 8\\n  store float* %2, float** %9, align 8\\n  store i32 %3, i32* %10, align 4\\n  store i32 %4, i32* %11, align 4\\n  store i32 %5, i32* %12, align 4\\n  store i32 0, i32* %13, align 4\\n  br label %15\\n\\n15:                                               ; preds = %50, %6\\n  %16 = load i32, i32* %13, align 4\\n  %17 = load i32, i32* %10, align 4\\n  %18 = icmp slt i32 %16, %17\\n  br i1 %18, label %19, label %53\\n\\n19:                                               ; preds = %15\\n  store i32 0, i32* %14, align 4\\n  br label %20\\n\\n20:                                               ; preds = %46, %19\\n  %21 = load i32, i32* %14, align 4\\n  %22 = load i32, i32* %11, align 4\\n  %23 = icmp slt i32 %21, %22\\n  br i1 %23, label %24, label %49\\n\\n24:                                               ; preds = %20\\n  %25 = load float*, float** %8, align 8\\n  %26 = load i32, i32* %14, align 4\\n  %27 = sext i32 %26 to i64\\n  %28 = getelementptr inbounds float, float* %25, i64 %27\\n  %29 = load float, float* %28, align 4\\n  %30 = load float*, float** %9, align 8\\n  %31 = load i32, i32* %13, align 4\\n  %32 = load i32, i32* %12, align 4\\n  %33 = mul nsw i32 %31, %32\\n  %34 = load i32, i32* %14, align 4\\n  %35 = add nsw i32 %33, %34\\n  %36 = sext i32 %35 to i64\\n  %37 = getelementptr inbounds float, float* %30, i64 %36\\n  %38 = load float, float* %37, align 4\\n  %39 = fmul float %29, %38\\n  %40 = load float*, float** %7, align 8\\n  %41 = load i32, i32* %13, align 4\\n  %42 = sext i32 %41 to i64\\n  %43 = getelementptr inbounds float, float* %40, i64 %42\\n  %44 = load float, float* %43, align 4\\n  %45 = fadd float %44, %39\\n  store float %45, float* %43, align 4\\n  br label %46\\n\\n46:                                               ; preds = %24\\n  %47 = load i32, i32* %14, align 4\\n  %48 = add nsw i32 %47, 1\\n  store i32 %48, i32* %14, align 4\\n  br label %20\\n\\n49:                                               ; preds = %20\\n  br label %50\\n\\n50:                                               ; preds = %49\\n  %51 = load i32, i32* %13, align 4\\n  %52 = add nsw i32 %51, 1\\n  store i32 %52, i32* %13, align 4\\n  br label %15\\n\\n53:                                               ; preds = %15\\n  ret i32 0\\n}\\n\\nattributes #0 = { noinline nounwind optnone uwtable \\"correctly-rounded-divide-sqrt-fp-math\\"=\\"false\\" \\"disable-tail-calls\\"=\\"false\\" \\"less-precise-fpmad\\"=\\"false\\" \\"min-legal-vector-width\\"=\\"0\\" \\"no-frame-pointer-elim\\"=\\"true\\" \\"no-frame-pointer-elim-non-leaf\\" \\"no-infs-fp-math\\"=\\"false\\" \\"no-jump-tables\\"=\\"false\\" \\"no-nans-fp-math\\"=\\"false\\" \\"no-signed-zeros-fp-math\\"=\\"false\\" \\"no-trapping-math\\"=\\"false\\" \\"stack-protector-buffer-size\\"=\\"8\\" \\"target-cpu\\"=\\"x86-64\\" \\"target-features\\"=\\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\\" \\"unsafe-fp-math\\"=\\"false\\" \\"use-soft-float\\"=\\"false\\" }\\n\\n!llvm.module.flags = !{!0}\\n!llvm.ident = !{!1}\\n\\n!0 = !{i32 1, !\\"wchar_size\\", i32 4}\\n!1 = !{!\\"clang version 9.0.0-2~ubuntu18.04.2 (tags/RELEASE_900/final)\\"}\\n";\n  for (i, 0, 1024) {\n    for (j.outer: int32, 0, 32) {\n      @tir.call_extern("gemv_update", @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), C_2, ((i*512) + (j.outer*16)), 16, 2, dtype=handle), @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), A_2, (i*64), 64, 1, dtype=handle), @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), B_2, (j.outer*1024), 1024, 1, dtype=handle), 16, 64, 64, dtype=int32)\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u6700\u540E\uFF0C\u5C06\u5F20\u91CF\u5316\u7684\u7248\u672C\u4E0E ",(0,i.jsx)(n.code,{children:"numpy.dot"})," \u751F\u6210\u7684\u7248\u672C\u8FDB\u884C\u6BD4\u8F83\uFF0C\u786E\u4FDD\u5B9E\u73B0\u662F\u6B63\u786E\u7684\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'func = tvm.build(s, [A, B, C], target="llvm", name="gemv")\n\nfrom tvm.topi.utils import get_const_tuple\n\ndtype = A.dtype\ndev = tvm.device("cpu", 0)\na = np.random.uniform(size=get_const_tuple(A.shape)).astype(dtype)\nb = np.random.uniform(size=get_const_tuple(B.shape)).astype(dtype)\nc = tvm.nd.array(np.zeros(get_const_tuple(C.shape), dtype=dtype), dev)\nfunc(tvm.nd.array(a, dev), tvm.nd.array(b, dev), c)\ntvm.testing.assert_allclose(c.numpy(), np.dot(a, b.T), rtol=1e-3)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u66F4\u65B0-tensorize-\u7684-reduce",children:"\u66F4\u65B0 tensorize \u7684 reduce"}),"\n",(0,i.jsx)(n.p,{children:"\u524D\u9762\u5DF2\u7ECF\u4E86\u89E3\u4E86 tensorize \u7684\u57FA\u672C\u6982\u5FF5\uFF0C\u63A5\u4E0B\u6765\u770B\u4E00\u4E2A\u66F4\u590D\u6742\u7684\u6848\u4F8B\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u5047\u8BBE\u52A0\u901F\u5668\u53EA\u80FD\u8BA9\u4E00\u4E2A\u5411\u91CF\u548C\u4E00\u4E2A\u77E9\u9635\u76F8\u4E58\uFF0C\u5176\u4E2D\u5411\u91CF\u5927\u5C0F\u4E0D\u5927\u4E8E 16\u3002\u9274\u4E8E\u8FD9\u6837\u7684\u786C\u4EF6\u7EA6\u675F\uFF0C\u9700\u8981\u6309\u5982\u4E0B\u65B9\u5F0F\u5C06 reduce \u8F74\u62C6\u5206\uFF1A"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"zo, zi = s[C].split(z, factor=factor)\ns[C].reorder(x, yo, zo, yi, zi)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u7531\u4E8E tensorize \u5185\u8054\u51FD\u6570\u76EE\u524D\u53EA\u8986\u76D6\u4E86 reduce \u8F74\u7684\u4E00\u90E8\u5206\uFF0C\u800C\u975E\u4F7F\u7528\u300Cbody\u300D\u51FD\u6570\uFF0C\u56E0\u6B64 TVM \u9700\u8981\u4E00\u4E2A ",(0,i.jsx)(n.code,{children:"reduce_reset"})," \u51FD\u6570\uFF08\u5728 reduce for \u5FAA\u73AF\u4E4B\u524D\u8C03\u7528\uFF09\uFF0C\u4EE5\u53CA\u4E00\u4E2A ",(0,i.jsx)(n.code,{children:"reduce_update"})," \u51FD\u6570\uFF08\u5B9A\u4E49\u4E86\u300Cupdate\u300D\u8BA1\u7B97\u7B56\u7565\uFF09\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def gemv_impl():\n    cc_code = """\n      extern "C" int gemv_update(float *cc, float *aa, float *bb, int m, int l, int stride) {\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < l; ++j) {\n                cc[i] += aa[j] * bb[i * stride + j];\n            }\n        }\n        return 0;\n      }\n      extern "C" int gemv_reset(float *cc, int m) {\n        for (int i = 0; i < m; ++i) {\n            cc[i] = 0.0;\n        }\n        return 0;\n      }\n    """\n    from tvm.contrib import utils, clang\n\n    temp = utils.tempdir()\n    ll_path = temp.relpath("temp.ll")\n    # \u4ECE C \u6E90\u4EE3\u7801\u521B\u5EFA LLVM ir\n    ll_code = clang.create_llvm(cc_code, output=ll_path)\n    return ll_code\n\ndef intrin_gemv(m, l):\n    a = te.placeholder((l,), name="a")\n    b = te.placeholder((m, l), name="b")\n    k = te.reduce_axis((0, l), name="k")\n    c = te.compute((m,), lambda i: te.sum(a[k] * b[i, k], axis=k), name="c")\n    Ab = tvm.tir.decl_buffer(a.shape, a.dtype, name="A", offset_factor=1, strides=[1])\n    Bb = tvm.tir.decl_buffer(b.shape, b.dtype, name="B", offset_factor=1, strides=[te.var("s1"), 1])\n    Cb = tvm.tir.decl_buffer(c.shape, c.dtype, name="C", offset_factor=1, strides=[1])\n\n    def intrin_func(ins, outs):\n        aa, bb = ins\n        cc = outs[0]\n\n        def _body():\n            ib = tvm.tir.ir_builder.create()\n            ib.emit(\n                tvm.tir.call_extern(\n                    "int32",\n                    "gemv_update",\n                    cc.access_ptr("w"),\n                    aa.access_ptr("r"),\n                    bb.access_ptr("r"),\n                    m,\n                    l,\n                    bb.strides[0],\n                )\n            )\n            return ib.get()\n\n        def _reduce_reset():\n            ib = tvm.tir.ir_builder.create()\n            ib.emit(tvm.tir.call_extern("int32", "gemv_reset", cc.access_ptr("w"), m))\n            return ib.get()\n\n        def _reduce_update():\n            return _body()\n\n        return _body(), _reduce_reset(), _reduce_update()\n\n    return te.decl_tensor_intrin(c.op, intrin_func, binds={a: Ab, b: Bb, c: Cb})\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u6CE8\u610F\uFF0C",(0,i.jsx)(n.code,{children:"intrin_func"})," \u8FD4\u56DE\u4E00\u4E2A\u4E09\u5143\u7EC4\uFF1A",(0,i.jsx)(n.code,{children:"(body, reduce_reset, reduce_update)"}),"\u3002\u5982\u679C tensorization \u5305\u62EC\u6240\u6709 reduce \u8F74\uFF0C\u5C06\u8C03\u7528\u51FD\u6570 ",(0,i.jsx)(n.code,{children:"body()"}),"\uFF0C\u5426\u5219 ",(0,i.jsx)(n.code,{children:"reduce_reset()"})," \u548C ",(0,i.jsx)(n.code,{children:"reduce_update()"})," \u5C06\u4E00\u8D77\u4F7F\u7528\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["\u793A\u4F8B\u4E2D ",(0,i.jsx)(n.code,{children:"body()"})," \u548C ",(0,i.jsx)(n.code,{children:"reduce_update()"})," \u7684\u5B9E\u73B0\u76F8\u540C\uFF0C\u5728\u5176\u4ED6\u60C5\u51B5\u4E0B\uFF0C\u786C\u4EF6\u5BF9\u8FD9\u4E24\u4E2A\u51FD\u6570\u7684\u6307\u4EE4\u53EF\u80FD\u4E0D\u540C\u3002\u6B64\u5916\uFF0C\u53EF\u4EE5\u770B\u5230 ",(0,i.jsx)(n.code,{children:"bb.strides[0]"})," \u7531\u4E8E\u5E73\u94FA\u800C\u4E0E ",(0,i.jsx)(n.code,{children:"l"})," \u4E0D\u540C\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u5BF9 squared GEMV \u8FDB\u884C tensorize\uFF0C\u6784\u5EFA\u5E76\u68C0\u67E5\u7ED3\u679C\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'gemv = intrin_gemv(factor, factor)\ns[C].tensorize(yi, gemv)\ns[C].pragma(yo, "import_llvm", gemv_impl())\n\nfunc = tvm.build(s, [A, B, C], target="llvm", name="gemv")\na = np.random.uniform(size=get_const_tuple(A.shape)).astype(dtype)\nb = np.random.uniform(size=get_const_tuple(B.shape)).astype(dtype)\nc = tvm.nd.array(np.zeros(get_const_tuple(C.shape), dtype=dtype), dev)\nfunc(tvm.nd.array(a, dev), tvm.nd.array(b, dev), c)\ntvm.testing.assert_allclose(c.numpy(), np.dot(a, b.T), rtol=1e-3)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u603B\u7ED3",children:"\u603B\u7ED3"}),"\n",(0,i.jsxs)(n.p,{children:["\u672C\u6559\u7A0B\u6F14\u793A\u4E86 TVM \u4E2D tensorize \u5185\u8054\u51FD\u6570\u7684\u7528\u6CD5\u3002tensorize \u63D0\u4F9B\u4E86\u4E00\u79CD\u65B9\u6CD5\uFF0C\u4F7F\u5F97\u7528\u6237\u901A\u8FC7 micro-kernels \u83B7\u5F97\u5B8C\u5168\u4F18\u5316\u8C03\u5EA6\u3002\u4F8B\u5982\uFF0CIntel CPU \u4E0A\u7684 INT8 \u91CF\u5316\u4F7F\u7528 tensorize \u76F4\u63A5\u8C03\u7528 AVX \u6307\u4EE4\u3002\u6B64\u5916\uFF0C\u5B83\u8FD8\u4F7F TVM \u80FD\u591F\u7F16\u8BD1\u4E3A ASIC - \u67E5\u770B ",(0,i.jsx)(n.a,{href:"https://tvm.apache.org/docs/topic/vta/index.html#vta-index",children:"VTA: Versatile Tensor Accelerator"})," \u83B7\u53D6\u8BE6\u7EC6\u4FE1\u606F\u3002\u6587\u6863\u8FD8\u6F14\u793A\u4E86\u5982\u4F55\u4F7F\u7528\u5185\u8054\u6C47\u7F16\u5BFC\u5165\uFF0C\u4F7F\u7528\u6237\u8F7B\u677E\u5730\u5C06 asm \u6CE8\u5165\u5230\u8C03\u5EA6\u4E2D\u3002"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://tvm.apache.org/docs/_downloads/428c6201e29ce74e73c6b41eee589f62/tensorize.py",children:"\u4E0B\u8F7D Python \u6E90\u4EE3\u7801\uFF1Atensorize.py"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://tvm.apache.org/docs/_downloads/3b5e41b16a898b72d18127ebe2182c66/tensorize.ipynb",children:"\u4E0B\u8F7D Jupyter Notebook\uFF1Atensorize.ipynb"})})]})}function p(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},21494:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return l}});var r=t(39546);let i={},a=r.createContext(i);function l(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);