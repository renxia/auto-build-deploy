"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["34657"],{30342:function(n,e,t){t.r(e),t.d(e,{default:()=>x,frontMatter:()=>s,metadata:()=>i,assets:()=>o,toc:()=>a,contentTitle:()=>l});var i=JSON.parse('{"id":"how_to/te_schedules/math","title":"\u5185\u8054\u53CA\u6570\u5B66\u51FD\u6570","description":"\u5355\u51FB \u6B64\u5904 \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801","source":"@site/versioned_docs/version-0.12.0/how_to/te_schedules/03-math.md","sourceDirName":"how_to/te_schedules","slug":"/how_to/te_schedules/math","permalink":"/docs/tvm-cn/docs/0.12.0/how_to/te_schedules/math","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/versioned_docs/version-0.12.0/how_to/te_schedules/03-math.md","tags":[],"version":"0.12.0","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"sidebarPosition":3,"frontMatter":{"title":"\u5185\u8054\u53CA\u6570\u5B66\u51FD\u6570"},"sidebar":"tutorialSidebar","previous":{"title":"\u89C4\u7EA6\uFF08reduce\uFF09","permalink":"/docs/tvm-cn/docs/0.12.0/how_to/te_schedules/reduction"},"next":{"title":"\u7EBF\u6027\u548C\u9012\u5F52\u6838","permalink":"/docs/tvm-cn/docs/0.12.0/how_to/te_schedules/scan_recurrent"}}'),r=t("74132"),d=t("21494");let s={title:"\u5185\u8054\u53CA\u6570\u5B66\u51FD\u6570"},l="\u5185\u8054\u53CA\u6570\u5B66\u51FD\u6570",o={},a=[{value:"\u76F4\u63A5\u58F0\u660E\u5916\u90E8\u6570\u5B66\u8C03\u7528",id:"\u76F4\u63A5\u58F0\u660E\u5916\u90E8\u6570\u5B66\u8C03\u7528",level:2},{value:"\u7EDF\u4E00\u5185\u8054\u8C03\u7528",id:"\u7EDF\u4E00\u5185\u8054\u8C03\u7528",level:2},{value:"\u5185\u8054\u51FD\u6570\u964D\u7EA7\u89C4\u5219",id:"\u5185\u8054\u51FD\u6570\u964D\u7EA7\u89C4\u5219",level:2},{value:"\u6DFB\u52A0\u5185\u8054\u51FD\u6570",id:"\u6DFB\u52A0\u5185\u8054\u51FD\u6570",level:2},{value:"\u603B\u7ED3",id:"\u603B\u7ED3",level:2}];function c(n){let e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"\u5185\u8054\u53CA\u6570\u5B66\u51FD\u6570",children:"\u5185\u8054\u53CA\u6570\u5B66\u51FD\u6570"})}),"\n",(0,r.jsx)(e.admonition,{type:"note",children:(0,r.jsxs)(e.p,{children:["\u5355\u51FB ",(0,r.jsx)(e.a,{href:"https://tvm.apache.org/docs/how_to/work_with_schedules/intrin_math.html#sphx-glr-download-how-to-work-with-schedules-intrin-math-py",children:"\u6B64\u5904"})," \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801"]})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"\u4F5C\u8005"}),"\uFF1A",(0,r.jsx)(e.a,{href:"https://tqchen.github.io/",children:"Tianqi Chen"})]}),"\n",(0,r.jsxs)(e.p,{children:["\u5C3D\u7BA1 TVM \u652F\u6301\u57FA\u672C\u7684\u7B97\u672F\u8FD0\u7B97\uFF0C\u4F46\u5F88\u591A\u65F6\u5019\uFF0C\u4E5F\u9700\u8981\u590D\u6742\u7684\u5185\u7F6E\u51FD\u6570\uFF0C\u4F8B\u5982 ",(0,r.jsx)(e.code,{children:"exp"})," \u53D6\u6307\u51FD\u6570\u3002"]}),"\n",(0,r.jsx)(e.p,{children:"\u8FD9\u4E9B\u51FD\u6570\u662F\u4F9D\u8D56 target \u7CFB\u7EDF\u7684\uFF0C\u5E76\u4E14\u5728\u4E0D\u540C target \u5E73\u53F0\u4E2D\u53EF\u80FD\u5177\u6709\u4E0D\u540C\u7684\u540D\u79F0\u3002\u672C\u6559\u7A0B\u4F1A\u5B66\u4E60\u5230\u5982\u4F55\u8C03\u7528\u8FD9\u4E9B target-specific \u51FD\u6570\uFF0C\u4EE5\u53CA\u5982\u4F55\u901A\u8FC7 TVM \u5185\u8054 API \u7EDF\u4E00\u63A5\u53E3\u3002"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from __future__ import absolute_import, print_function\n\nimport numpy as np\nimport tvm\nfrom tvm import te\nfrom tvm.ir import register_op_attr, register_intrin_lowering\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u76F4\u63A5\u58F0\u660E\u5916\u90E8\u6570\u5B66\u8C03\u7528",children:"\u76F4\u63A5\u58F0\u660E\u5916\u90E8\u6570\u5B66\u8C03\u7528"}),"\n",(0,r.jsxs)(e.p,{children:["\u8C03\u7528 target-specific \u51FD\u6570\u6700\u76F4\u63A5\u65B9\u6CD5\uFF0C\u5C31\u662F\u901A\u8FC7 TVM \u4E2D\u7684 extern \u51FD\u6570\u8C03\u7528\u6784\u9020\u3002\u4EE5\u4E0B\u793A\u4F8B\u7528 ",(0,r.jsx)(e.code,{children:"tvm.tir.call_pure_extern"})," \u6765\u8C03\u7528 ",(0,r.jsx)(e.code,{children:"__expf"})," \u51FD\u6570\uFF08\u4EC5\u5728 CUDA \u4E0B\u53EF\u7528\uFF09\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'n = te.var("n")\nA = te.placeholder((n,), name="A")\nB = te.compute(A.shape, lambda i: tvm.tir.call_pure_extern("float32", "__expf", A[i]), name="B")\ns = te.create_schedule(B.op)\nnum_thread = 64\nbx, tx = s[B].split(B.op.axis[0], factor=num_thread)\ns[B].bind(bx, te.thread_axis("blockIdx.x"))\ns[B].bind(tx, te.thread_axis("threadIdx.x"))\nf = tvm.build(s, [A, B], "cuda", name="myexp")\nprint(f.imported_modules[0].get_source())\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern "C" __global__ void __launch_bounds__(64) myexp_kernel0(float* __restrict__ B, float* __restrict__ A, int n, int stride, int stride1) {\n  if (((int)blockIdx.x) < (n >> 6)) {\n    B[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride)] = __expf(A[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride1)]);\n  } else {\n    if (((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) < n) {\n      B[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride)] = __expf(A[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride1)]);\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u7EDF\u4E00\u5185\u8054\u8C03\u7528",children:"\u7EDF\u4E00\u5185\u8054\u8C03\u7528"}),"\n",(0,r.jsx)(e.p,{children:"\u4EE5\u4E0A\u4EE3\u7801\u9A8C\u8BC1\u4E86\u76F4\u63A5\u5916\u90E8\u8C03\u7528\u53EF\u7528\u4E8E device-specific \u7684\u51FD\u6570\u3002\u4F46\u4E0A\u8FF0\u65B9\u5F0F\u4EC5\u9002\u7528\u4E8E\u5E26\u6709\u6D6E\u70B9\u7C7B\u578B\u7684 CUDA target\u3002\u7406\u60F3\u60C5\u51B5\u4E0B\uFF0C\u6211\u4EEC\u5E0C\u671B\u5199\u4E00\u5957\u4EE3\u7801\uFF0C\u5373\u53EF\u9002\u7528\u4E8E\u4EFB\u4F55\u8BBE\u5907\u4EE5\u53CA\u4EFB\u4F55\u6570\u636E\u7C7B\u578B\u3002"}),"\n",(0,r.jsxs)(e.p,{children:["TVM \u5185\u8054\u51FD\u6570\u4E3A\u7528\u6237\u63D0\u4F9B\u4E86\u5B9E\u73B0\u673A\u5236\uFF0C\u4E14\u63A8\u8350\u7528\u8FD9\u4E2A\u65B9\u6CD5\u6765\u89E3\u51B3\u95EE\u9898\u3002\u4EE5\u4E0B\u4EE3\u7801\u7528\u7684\u662F te.exp\uFF0C\u5B83\u521B\u5EFA\u4E86\u4E00\u4E2A\u5185\u8054\u8C03\u7528 ",(0,r.jsx)(e.code,{children:"tvm.te.exp()"})," \u6765\u505A\u6307\u6570\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'n = te.var("n")\nA = te.placeholder((n,), name="A")\nB = te.compute(A.shape, lambda i: te.exp(A[i]), name="B")\ns = te.create_schedule(B.op)\nnum_thread = 64\nbx, tx = s[B].split(B.op.axis[0], factor=num_thread)\ns[B].bind(bx, te.thread_axis("blockIdx.x"))\ns[B].bind(tx, te.thread_axis("threadIdx.x"))\nfcuda = tvm.build(s, [A, B], "cuda", name="myexp")\nprint(fcuda.imported_modules[0].get_source())\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern "C" __global__ void __launch_bounds__(64) myexp_kernel0(float* __restrict__ B, float* __restrict__ A, int n, int stride, int stride1) {\n  if (((int)blockIdx.x) < (n >> 6)) {\n    B[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride)] = __expf(A[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride1)]);\n  } else {\n    if (((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) < n) {\n      B[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride)] = __expf(A[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride1)]);\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8BE5\u4EE3\u7801\u9002\u7528\u4E8E CUDA \u548C opencl\uFF0C\u76F8\u540C\u7684 te.exp \u4E5F\u53EF\u7528\u4E8E float64 \u6570\u636E\u7C7B\u578B\u3002"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'fopencl = tvm.build(s, [A, B], "opencl", name="myexp")\nprint(fopencl.imported_modules[0].get_source())\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"// Function: myexp_kernel0\n__kernel void myexp_kernel0(__global float* restrict B, __global float* restrict A, int n, int stride, int stride1) {\n  if (((int)get_group_id(0)) < (n >> 6)) {\n    B[(((((int)get_group_id(0)) * 64) + ((int)get_local_id(0))) * stride)] = exp(A[(((((int)get_group_id(0)) * 64) + ((int)get_local_id(0))) * stride1)]);\n  } else {\n    if (((((int)get_group_id(0)) * 64) + ((int)get_local_id(0))) < n) {\n      B[(((((int)get_group_id(0)) * 64) + ((int)get_local_id(0))) * stride)] = exp(A[(((((int)get_group_id(0)) * 64) + ((int)get_local_id(0))) * stride1)]);\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u5185\u8054\u51FD\u6570\u964D\u7EA7\u89C4\u5219",children:"\u5185\u8054\u51FD\u6570\u964D\u7EA7\u89C4\u5219"}),"\n",(0,r.jsxs)(e.p,{children:["\u5F53\u8C03\u7528 ",(0,r.jsx)(e.code,{children:"tvm.te.exp()"})," \u65F6\uFF0CTVM \u4F1A\u521B\u5EFA\u4E00\u4E2A intrinsic Call Expr\u3002TVM \u4F7F\u7528\u8F6C\u6362\u89C4\u5219\uFF08transformation rules\uFF09\uFF0C\u5C06\u5185\u8054\u8C03\u7528\uFF08intrinsic call\uFF09\u8F6C\u6362\u4E3A\u7279\u5B9A\u8BBE\u5907\u7684\u5916\u90E8\u8C03\u7528\uFF08extern calls\uFF09\u3002"]}),"\n",(0,r.jsxs)(e.p,{children:["TVM \u652F\u6301\u5728\u8FD0\u884C\u65F6\u81EA\u5B9A\u4E49\u89C4\u5219\uFF0C\u4EE5\u4E0B\u793A\u4F8B\u4E3A ",(0,r.jsx)(e.code,{children:"exp"})," \u81EA\u5B9A\u4E49 CUDA \u964D\u7EA7\u89C4\u5219\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def my_cuda_math_rule(op):\n    """\u81EA\u5B9A\u4E49 CUDA \u5185\u8054\u51FD\u6570\u964D\u7EA7\u89C4\u5219"""\n    assert isinstance(op, tvm.tir.Call)\n    name = op.op.name\n    assert name.startswith("tir.")\n    dispatch_name = name[4:]\n    if op.dtype == "float32":\n        # \u8C03\u7528\u6D6E\u70B9\u51FD\u6570\n        return tvm.tir.call_pure_extern("float32", "%sf" % dispatch_name, op.args[0])\n    elif op.dtype == "float64":\n        # \u8C03\u7528\u53CC\u7CBE\u5EA6\u51FD\u6570\n        return tvm.tir.call_pure_extern("float32", dispatch_name, op.args[0])\n    else:\n        # \u4E0D\u80FD\u8F6C\u6362\uFF0C\u8FD4\u56DE\u81EA\u8EAB\u3002\n        return op\n\nregister_intrin_lowering("tir.exp", target="cuda", f=my_cuda_math_rule, level=99)\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"<function my_cuda_math_rule at 0x7f7017159dd0>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["\u7528\u9009\u9879\u8986\u76D6\u73B0\u6709\u89C4\u5219\uFF0C\u4ECE\u800C\u5C06\u89C4\u5219\u6CE8\u518C\u5230 TVM\u3002\u6CE8\u610F\uFF0C\u6253\u5370\u4EE3\u7801\u4E0E\u4E4B\u524D\u4EE3\u7801\u7684\u533A\u522B\uFF1A\u65B0\u89C4\u5219\u7528\u6570\u5B66\u51FD\u6570 ",(0,r.jsx)(e.code,{children:"expf"}),"\uFF0C\u800C\u4E0D\u662F\u5FEB\u901F\u6570\u5B66\u7248\u672C ",(0,r.jsx)(e.code,{children:"__expf"}),"\u3002"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'fcuda = tvm.build(s, [A, B], "cuda", name="myexp")\nprint(fcuda.imported_modules[0].get_source())\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern "C" __global__ void __launch_bounds__(64) myexp_kernel0(float* __restrict__ B, float* __restrict__ A, int n, int stride, int stride1) {\n  if (((int)blockIdx.x) < (n >> 6)) {\n    B[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride)] = expf(A[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride1)]);\n  } else {\n    if (((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) < n) {\n      B[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride)] = expf(A[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride1)]);\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u6DFB\u52A0\u5185\u8054\u51FD\u6570",children:"\u6DFB\u52A0\u5185\u8054\u51FD\u6570"}),"\n",(0,r.jsxs)(e.p,{children:["\u5BF9\u4E8E TVM \u672A\u63D0\u4F9B\u7684\u5185\u8054\u51FD\u6570\uFF0C\u7528\u6237\u53EF\u4EE5\u501F\u52A9\u5185\u8054\u89C4\u5219\u7CFB\u7EDF\uFF0C\u6DFB\u52A0\u65B0\u7684\u5185\u8054\u51FD\u6570\u3002\u4EE5\u4E0B\u662F\u5C06\u5185\u8054\u51FD\u6570 ",(0,r.jsx)(e.code,{children:"mylog"})," \u6DFB\u52A0\u5230\u7CFB\u7EDF\u7684\u793A\u4F8B\uFF1A"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'def mylog(x):\n    """\u81EA\u5B9A\u4E49\u65E5\u5FD7\u5185\u8054\u51FD\u6570"""\n    return tvm.tir.call_intrin(x.dtype, "tir.mylog", x)\n\ndef my_cuda_mylog_rule(op):\n    """CUDA \u964D\u7EA7\u65E5\u5FD7\u7684\u89C4\u5219"""\n    if op.dtype == "float32":\n        return tvm.tir.call_pure_extern("float32", "logf", op.args[0])\n    elif op.dtype == "float64":\n        return tvm.tir.call_pure_extern("float64", "log", op.args[0])\n    else:\n        return op\n\n# \u65B0\u7684\u6CE8\u518C\u64CD\u4F5C\u662F\u901A\u8FC7\u6CE8\u518C\u64CD\u4F5C\u7684\u5C5E\u6027\u6765\u89E6\u53D1\u7684\nregister_op_attr("tir.mylog", "TCallEffectKind", tvm.tir.CallEffectKind.Pure)\nregister_intrin_lowering("tir.mylog", target="cuda", f=my_cuda_mylog_rule, level=99)\n\nn = te.var("n")\nA = te.placeholder((n,), name="A")\nB = te.compute(A.shape, lambda i: mylog(A[i]), name="B")\ns = te.create_schedule(B.op)\nnum_thread = 64\nbx, tx = s[B].split(B.op.axis[0], factor=num_thread)\ns[B].bind(bx, te.thread_axis("blockIdx.x"))\ns[B].bind(tx, te.thread_axis("threadIdx.x"))\nfcuda = tvm.build(s, [A, B], "cuda", name="mylog")\nprint(fcuda.imported_modules[0].get_source())\n'})}),"\n",(0,r.jsx)(e.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#ifdef _WIN32\n  using uint = unsigned int;\n  using uchar = unsigned char;\n  using ushort = unsigned short;\n  using int64_t = long long;\n  using uint64_t = unsigned long long;\n#else\n  #define uint unsigned int\n  #define uchar unsigned char\n  #define ushort unsigned short\n  #define int64_t long long\n  #define uint64_t unsigned long long\n#endif\nextern "C" __global__ void __launch_bounds__(64) mylog_kernel0(float* __restrict__ B, float* __restrict__ A, int n, int stride, int stride1) {\n  if (((int)blockIdx.x) < (n >> 6)) {\n    B[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride)] = logf(A[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride1)]);\n  } else {\n    if (((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) < n) {\n      B[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride)] = logf(A[(((((int)blockIdx.x) * 64) + ((int)threadIdx.x)) * stride1)]);\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"\u603B\u7ED3",children:"\u603B\u7ED3"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"TVM \u80FD\u8C03\u7528\u4F9D\u8D56 target \u7684\u5916\u90E8\u6570\u5B66\u51FD\u6570\u3002"}),"\n",(0,r.jsx)(e.li,{children:"\u7528\u5185\u8054\u51FD\u6570\u4E3A\u51FD\u6570\u5B9A\u4E49\u7EDF\u4E00\u7684\u63A5\u53E3\u3002"}),"\n",(0,r.jsxs)(e.li,{children:["\u6709\u5173 TVM \u4E2D\u66F4\u591A\u53EF\u7528\u7684\u5185\u8054\u51FD\u6570\uFF0C\u67E5\u770B ",(0,r.jsx)(e.code,{children:"tvm.tir"}),"\u3002"]}),"\n",(0,r.jsx)(e.li,{children:"\u901A\u8FC7\u81EA\u5B9A\u4E49\u89C4\u5219\uFF0C\u4ECE\u800C\u81EA\u5B9A\u4E49\u5185\u8054\u884C\u4E3A\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://tvm.apache.org/docs/_downloads/d9089082842c138d4c81335f88c60c82/intrin_math.py",children:"\u4E0B\u8F7D Python \u6E90\u4EE3\u7801\uFF1Aintrin_math.py"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://tvm.apache.org/docs/_downloads/1e482ba1190961191e3a0bdbd0585faa/intrin_math.ipynb",children:"\u4E0B\u8F7D Jupyter Notebook\uFF1Aintrin_math.ipynb"})})]})}function x(n={}){let{wrapper:e}={...(0,d.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},21494:function(n,e,t){t.d(e,{Z:function(){return l},a:function(){return s}});var i=t(39546);let r={},d=i.createContext(r);function s(n){let e=i.useContext(d);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),i.createElement(d.Provider,{value:e},n.children)}}}]);