"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["8734"],{34567:function(n,t,e){e.r(t),e.d(t,{default:()=>f,frontMatter:()=>r,metadata:()=>a,assets:()=>l,toc:()=>i,contentTitle:()=>_});var a=JSON.parse('{"id":"tutorial/quick_start","title":"\u5FEB\u901F\u5165\u95E8\uFF1A\u7F16\u8BD1\u6DF1\u5EA6\u5B66\u4E60\u6A21\u578B","description":"\u5355\u51FB \u6B64\u5904 \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801","source":"@site/docs/tutorial/11-quick_start.md","sourceDirName":"tutorial","slug":"/tutorial/quick_start","permalink":"/docs/tvm-cn/docs/tutorial/quick_start","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/docs/tutorial/11-quick_start.md","tags":[],"version":"current","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"sidebarPosition":11,"frontMatter":{"title":"\u5FEB\u901F\u5165\u95E8\uFF1A\u7F16\u8BD1\u6DF1\u5EA6\u5B66\u4E60\u6A21\u578B"},"sidebar":"tutorialSidebar","previous":{"title":"\u4EA4\u53C9\u7F16\u8BD1\u548C RPC","permalink":"/docs/tvm-cn/docs/tutorial/rpc"},"next":{"title":"\u5229\u7528 UMA \u4F7F\u786C\u4EF6\u52A0\u901F\u5668\u53EF\u76F4\u63A5\u7528\u4E8E TVM","permalink":"/docs/tvm-cn/docs/tutorial/uma"}}'),o=e("74132"),s=e("21494");let r={title:"\u5FEB\u901F\u5165\u95E8\uFF1A\u7F16\u8BD1\u6DF1\u5EA6\u5B66\u4E60\u6A21\u578B"},_="\u5FEB\u901F\u5165\u95E8\uFF1A\u7F16\u8BD1\u6DF1\u5EA6\u5B66\u4E60\u6A21\u578B",l={},i=[{value:"TVM \u652F\u6301\u7684\u786C\u4EF6\u540E\u7AEF\u6982\u8FF0",id:"tvm-\u652F\u6301\u7684\u786C\u4EF6\u540E\u7AEF\u6982\u8FF0",level:2},{value:"\u5728 Relay \u4E2D\u5B9A\u4E49\u795E\u7ECF\u7F51\u7EDC",id:"\u5728-relay-\u4E2D\u5B9A\u4E49\u795E\u7ECF\u7F51\u7EDC",level:2},{value:"\u7F16\u8BD1",id:"\u7F16\u8BD1",level:2},{value:"\u8FD0\u884C\u751F\u6210\u5E93",id:"\u8FD0\u884C\u751F\u6210\u5E93",level:2},{value:"\u4FDD\u5B58\u548C\u52A0\u8F7D\u7F16\u8BD1\u6A21\u5757",id:"\u4FDD\u5B58\u548C\u52A0\u8F7D\u7F16\u8BD1\u6A21\u5757",level:2}];function g(n){let t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"\u5FEB\u901F\u5165\u95E8\u7F16\u8BD1\u6DF1\u5EA6\u5B66\u4E60\u6A21\u578B",children:"\u5FEB\u901F\u5165\u95E8\uFF1A\u7F16\u8BD1\u6DF1\u5EA6\u5B66\u4E60\u6A21\u578B"})}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["\u5355\u51FB ",(0,o.jsx)(t.a,{href:"https://tvm.apache.org/docs/tutorial/relay_quick_start.html#sphx-glr-download-tutorial-relay-quick-start-py",children:"\u6B64\u5904"})," \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801"]})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"\u4F5C\u8005"}),"\uFF1A",(0,o.jsx)(t.a,{href:"https://github.com/kevinthesun",children:"Yao Wang"}),"\uFF0C",(0,o.jsx)(t.a,{href:"https://github.com/SiNZeRo",children:"Truman Tian"})]}),"\n",(0,o.jsx)(t.p,{children:"\u8FD9\u4E2A\u4F8B\u5B50\u5C55\u793A\u4E86\u5982\u4F55\u7528 Relay Python \u524D\u7AEF\u6784\u5EFA\u795E\u7ECF\u7F51\u7EDC\uFF0C\u5E76\u4E3A\u88C5\u6709 TVM \u7684 NVIDIA GPU \u751F\u6210 runtime \u5E93\u3002\u6CE8\u610F\uFF0C\u6784\u5EFA TVM \u9700\u8981\u542F\u7528 CUDA \u548C LLVM\u3002"}),"\n",(0,o.jsx)(t.h2,{id:"tvm-\u652F\u6301\u7684\u786C\u4EF6\u540E\u7AEF\u6982\u8FF0",children:"TVM \u652F\u6301\u7684\u786C\u4EF6\u540E\u7AEF\u6982\u8FF0"}),"\n",(0,o.jsx)(t.p,{children:"\u4E0B\u56FE\u663E\u793A\u4E86 TVM \u5F53\u524D\u652F\u6301\u7684\u786C\u4EF6\u540E\u7AEF\uFF1A"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:"https://github.com/dmlc/web-data/raw/main/tvm/tutorial/tvm_support_list.png",alt:"https://github.com/dmlc/web-data/raw/main/tvm/tutorial/tvm_support_list.png"})}),"\n",(0,o.jsx)(t.p,{children:"\u672C\u6559\u7A0B\u5C06\u9009\u62E9 CUDA \u548C LLVM \u4F5C\u4E3A\u76EE\u6807\u540E\u7AEF\u3002\u9996\u5148\uFF0C\u5BFC\u5165 Relay \u548C TVM\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"import numpy as np\n\nfrom tvm import relay\nfrom tvm.relay import testing\nimport tvm\nfrom tvm import te\nfrom tvm.contrib import graph_executor\nimport tvm.testing\n"})}),"\n",(0,o.jsx)(t.h2,{id:"\u5728-relay-\u4E2D\u5B9A\u4E49\u795E\u7ECF\u7F51\u7EDC",children:"\u5728 Relay \u4E2D\u5B9A\u4E49\u795E\u7ECF\u7F51\u7EDC"}),"\n",(0,o.jsx)(t.p,{children:"\u9996\u5148\uFF0C\u5B9A\u4E49\u4E00\u4E2A\u5E26\u6709 Relay Python \u524D\u7AEF\u7684\u795E\u7ECF\u7F51\u7EDC\u3002\u7B80\u5355\u8D77\u89C1\uFF0C\u6211\u4EEC\u5728 Relay \u4E2D\u4F7F\u7528\u9884\u5B9A\u4E49\u7684 resnet-18 \u7F51\u7EDC\u3002\u53C2\u6570\u7528 Xavier \u521D\u59CB\u5316\u7A0B\u5E8F\u8FDB\u884C\u521D\u59CB\u5316\u3002 Relay \u8FD8\u652F\u6301\u5176\u4ED6\u6A21\u578B\u683C\u5F0F\uFF0C\u5982 MXNet\u3001CoreML\u3001ONNX \u548C Tensorflow\u3002"}),"\n",(0,o.jsxs)(t.p,{children:["\u672C\u6559\u7A0B\u5047\u8BBE\u5728\u6211\u4EEC\u7684\u8BBE\u5907\u4E0A\u8FDB\u884C\u63A8\u7406\uFF0C\u5E76\u5C06 batch size \u8BBE\u7F6E\u4E3A 1\u3002\u8F93\u5165\u56FE\u50CF\u662F\u5927\u5C0F\u4E3A 224 * 224 \u7684 RGB \u5F69\u8272\u56FE\u50CF\u3002\u8C03\u7528 ",(0,o.jsx)(t.code,{children:"tvm.relay.expr.TupleWrapper.astext()"})," \u53EF\u4EE5\u67E5\u770B\u7F51\u7EDC\u7ED3\u6784\u3002"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"batch_size = 1\nnum_class = 1000\nimage_shape = (3, 224, 224)\ndata_shape = (batch_size,) + image_shape\nout_shape = (batch_size, num_class)\n\nmod, params = relay.testing.resnet.get_workload(\n    num_layers=18, batch_size=batch_size, image_shape=image_shape\n)\n\n# \u60F3\u663E\u793A\u5143\u6570\u636E\u5219\u8BBE\u7F6E show_meta_data=True\nprint(mod.astext(show_meta_data=False))\n"})}),"\n",(0,o.jsxs)(t.p,{children:["\u8BBF\u95EE\u4EE3\u7801\u4E2D\u7684 mod.astext \u66F4\u591A\u4FE1\u606F\uFF1A",(0,o.jsx)(t.a,{href:"https://tvm.apache.org/docs/reference/api/python/ir.html#tvm.ir.Node.astext",children:"https://tvm.apache.org/docs/reference/api/python/ir.html#tvm.ir.Node.astext"})]}),"\n",(0,o.jsx)(t.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'#[version = "0.0.5"]\ndef @main(%data: Tensor[(1, 3, 224, 224), float32] /* ty=Tensor[(1, 3, 224, 224), float32] */, %bn_data_gamma: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %bn_data_beta: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %bn_data_moving_mean: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %bn_data_moving_var: Tensor[(3), float32] /* ty=Tensor[(3), float32] */, %conv0_weight: Tensor[(64, 3, 7, 7), float32] /* ty=Tensor[(64, 3, 7, 7), float32] */, %bn0_gamma: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %bn0_beta: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %bn0_moving_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %bn0_moving_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit1_bn1_gamma: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit1_bn1_beta: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit1_bn1_moving_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit1_bn1_moving_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit1_conv1_weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %stage1_unit1_bn2_gamma: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit1_bn2_beta: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit1_bn2_moving_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit1_bn2_moving_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit1_conv2_weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %stage1_unit1_sc_weight: Tensor[(64, 64, 1, 1), float32] /* ty=Tensor[(64, 64, 1, 1), float32] */, %stage1_unit2_bn1_gamma: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit2_bn1_beta: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit2_bn1_moving_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit2_bn1_moving_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit2_conv1_weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %stage1_unit2_bn2_gamma: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit2_bn2_beta: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit2_bn2_moving_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit2_bn2_moving_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage1_unit2_conv2_weight: Tensor[(64, 64, 3, 3), float32] /* ty=Tensor[(64, 64, 3, 3), float32] */, %stage2_unit1_bn1_gamma: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage2_unit1_bn1_beta: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage2_unit1_bn1_moving_mean: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage2_unit1_bn1_moving_var: Tensor[(64), float32] /* ty=Tensor[(64), float32] */, %stage2_unit1_conv1_weight: Tensor[(128, 64, 3, 3), float32] /* ty=Tensor[(128, 64, 3, 3), float32] */, %stage2_unit1_bn2_gamma: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit1_bn2_beta: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit1_bn2_moving_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit1_bn2_moving_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit1_conv2_weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %stage2_unit1_sc_weight: Tensor[(128, 64, 1, 1), float32] /* ty=Tensor[(128, 64, 1, 1), float32] */, %stage2_unit2_bn1_gamma: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit2_bn1_beta: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit2_bn1_moving_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit2_bn1_moving_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit2_conv1_weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %stage2_unit2_bn2_gamma: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit2_bn2_beta: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit2_bn2_moving_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit2_bn2_moving_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage2_unit2_conv2_weight: Tensor[(128, 128, 3, 3), float32] /* ty=Tensor[(128, 128, 3, 3), float32] */, %stage3_unit1_bn1_gamma: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage3_unit1_bn1_beta: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage3_unit1_bn1_moving_mean: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage3_unit1_bn1_moving_var: Tensor[(128), float32] /* ty=Tensor[(128), float32] */, %stage3_unit1_conv1_weight: Tensor[(256, 128, 3, 3), float32] /* ty=Tensor[(256, 128, 3, 3), float32] */, %stage3_unit1_bn2_gamma: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit1_bn2_beta: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit1_bn2_moving_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit1_bn2_moving_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit1_conv2_weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %stage3_unit1_sc_weight: Tensor[(256, 128, 1, 1), float32] /* ty=Tensor[(256, 128, 1, 1), float32] */, %stage3_unit2_bn1_gamma: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit2_bn1_beta: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit2_bn1_moving_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit2_bn1_moving_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit2_conv1_weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %stage3_unit2_bn2_gamma: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit2_bn2_beta: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit2_bn2_moving_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit2_bn2_moving_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage3_unit2_conv2_weight: Tensor[(256, 256, 3, 3), float32] /* ty=Tensor[(256, 256, 3, 3), float32] */, %stage4_unit1_bn1_gamma: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage4_unit1_bn1_beta: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage4_unit1_bn1_moving_mean: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage4_unit1_bn1_moving_var: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, %stage4_unit1_conv1_weight: Tensor[(512, 256, 3, 3), float32] /* ty=Tensor[(512, 256, 3, 3), float32] */, %stage4_unit1_bn2_gamma: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit1_bn2_beta: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit1_bn2_moving_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit1_bn2_moving_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit1_conv2_weight: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, %stage4_unit1_sc_weight: Tensor[(512, 256, 1, 1), float32] /* ty=Tensor[(512, 256, 1, 1), float32] */, %stage4_unit2_bn1_gamma: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit2_bn1_beta: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit2_bn1_moving_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit2_bn1_moving_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit2_conv1_weight: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, %stage4_unit2_bn2_gamma: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit2_bn2_beta: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit2_bn2_moving_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit2_bn2_moving_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %stage4_unit2_conv2_weight: Tensor[(512, 512, 3, 3), float32] /* ty=Tensor[(512, 512, 3, 3), float32] */, %bn1_gamma: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %bn1_beta: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %bn1_moving_mean: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %bn1_moving_var: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %fc1_weight: Tensor[(1000, 512), float32] /* ty=Tensor[(1000, 512), float32] */, %fc1_bias: Tensor[(1000), float32] /* ty=Tensor[(1000), float32] */) -> Tensor[(1, 1000), float32] {\n  %0 = nn.batch_norm(%data, %bn_data_gamma, %bn_data_beta, %bn_data_moving_mean, %bn_data_moving_var, epsilon=2e-05f, scale=False) /* ty=(Tensor[(1, 3, 224, 224), float32], Tensor[(3), float32], Tensor[(3), float32]) */;\n  %1 = %0.0 /* ty=Tensor[(1, 3, 224, 224), float32] */;\n  %2 = nn.conv2d(%1, %conv0_weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */;\n  %3 = nn.batch_norm(%2, %bn0_gamma, %bn0_beta, %bn0_moving_mean, %bn0_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */;\n  %4 = %3.0 /* ty=Tensor[(1, 64, 112, 112), float32] */;\n  %5 = nn.relu(%4) /* ty=Tensor[(1, 64, 112, 112), float32] */;\n  %6 = nn.max_pool2d(%5, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %7 = nn.batch_norm(%6, %stage1_unit1_bn1_gamma, %stage1_unit1_bn1_beta, %stage1_unit1_bn1_moving_mean, %stage1_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;\n  %8 = %7.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %9 = nn.relu(%8) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %10 = nn.conv2d(%9, %stage1_unit1_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %11 = nn.batch_norm(%10, %stage1_unit1_bn2_gamma, %stage1_unit1_bn2_beta, %stage1_unit1_bn2_moving_mean, %stage1_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;\n  %12 = %11.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %13 = nn.relu(%12) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %14 = nn.conv2d(%13, %stage1_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %15 = nn.conv2d(%9, %stage1_unit1_sc_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %16 = add(%14, %15) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %17 = nn.batch_norm(%16, %stage1_unit2_bn1_gamma, %stage1_unit2_bn1_beta, %stage1_unit2_bn1_moving_mean, %stage1_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;\n  %18 = %17.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %19 = nn.relu(%18) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %20 = nn.conv2d(%19, %stage1_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %21 = nn.batch_norm(%20, %stage1_unit2_bn2_gamma, %stage1_unit2_bn2_beta, %stage1_unit2_bn2_moving_mean, %stage1_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;\n  %22 = %21.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %23 = nn.relu(%22) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %24 = nn.conv2d(%23, %stage1_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %25 = add(%24, %16) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %26 = nn.batch_norm(%25, %stage2_unit1_bn1_gamma, %stage2_unit1_bn1_beta, %stage2_unit1_bn1_moving_mean, %stage2_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;\n  %27 = %26.0 /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %28 = nn.relu(%27) /* ty=Tensor[(1, 64, 56, 56), float32] */;\n  %29 = nn.conv2d(%28, %stage2_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %30 = nn.batch_norm(%29, %stage2_unit1_bn2_gamma, %stage2_unit1_bn2_beta, %stage2_unit1_bn2_moving_mean, %stage2_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;\n  %31 = %30.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %32 = nn.relu(%31) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %33 = nn.conv2d(%32, %stage2_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %34 = nn.conv2d(%28, %stage2_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %35 = add(%33, %34) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %36 = nn.batch_norm(%35, %stage2_unit2_bn1_gamma, %stage2_unit2_bn1_beta, %stage2_unit2_bn1_moving_mean, %stage2_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;\n  %37 = %36.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %38 = nn.relu(%37) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %39 = nn.conv2d(%38, %stage2_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %40 = nn.batch_norm(%39, %stage2_unit2_bn2_gamma, %stage2_unit2_bn2_beta, %stage2_unit2_bn2_moving_mean, %stage2_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;\n  %41 = %40.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %42 = nn.relu(%41) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %43 = nn.conv2d(%42, %stage2_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %44 = add(%43, %35) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %45 = nn.batch_norm(%44, %stage3_unit1_bn1_gamma, %stage3_unit1_bn1_beta, %stage3_unit1_bn1_moving_mean, %stage3_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;\n  %46 = %45.0 /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %47 = nn.relu(%46) /* ty=Tensor[(1, 128, 28, 28), float32] */;\n  %48 = nn.conv2d(%47, %stage3_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %49 = nn.batch_norm(%48, %stage3_unit1_bn2_gamma, %stage3_unit1_bn2_beta, %stage3_unit1_bn2_moving_mean, %stage3_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;\n  %50 = %49.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %51 = nn.relu(%50) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %52 = nn.conv2d(%51, %stage3_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %53 = nn.conv2d(%47, %stage3_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %54 = add(%52, %53) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %55 = nn.batch_norm(%54, %stage3_unit2_bn1_gamma, %stage3_unit2_bn1_beta, %stage3_unit2_bn1_moving_mean, %stage3_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;\n  %56 = %55.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %57 = nn.relu(%56) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %58 = nn.conv2d(%57, %stage3_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %59 = nn.batch_norm(%58, %stage3_unit2_bn2_gamma, %stage3_unit2_bn2_beta, %stage3_unit2_bn2_moving_mean, %stage3_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;\n  %60 = %59.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %61 = nn.relu(%60) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %62 = nn.conv2d(%61, %stage3_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %63 = add(%62, %54) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %64 = nn.batch_norm(%63, %stage4_unit1_bn1_gamma, %stage4_unit1_bn1_beta, %stage4_unit1_bn1_moving_mean, %stage4_unit1_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;\n  %65 = %64.0 /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %66 = nn.relu(%65) /* ty=Tensor[(1, 256, 14, 14), float32] */;\n  %67 = nn.conv2d(%66, %stage4_unit1_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %68 = nn.batch_norm(%67, %stage4_unit1_bn2_gamma, %stage4_unit1_bn2_beta, %stage4_unit1_bn2_moving_mean, %stage4_unit1_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;\n  %69 = %68.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %70 = nn.relu(%69) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %71 = nn.conv2d(%70, %stage4_unit1_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %72 = nn.conv2d(%66, %stage4_unit1_sc_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %73 = add(%71, %72) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %74 = nn.batch_norm(%73, %stage4_unit2_bn1_gamma, %stage4_unit2_bn1_beta, %stage4_unit2_bn1_moving_mean, %stage4_unit2_bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;\n  %75 = %74.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %76 = nn.relu(%75) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %77 = nn.conv2d(%76, %stage4_unit2_conv1_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %78 = nn.batch_norm(%77, %stage4_unit2_bn2_gamma, %stage4_unit2_bn2_beta, %stage4_unit2_bn2_moving_mean, %stage4_unit2_bn2_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;\n  %79 = %78.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %80 = nn.relu(%79) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %81 = nn.conv2d(%80, %stage4_unit2_conv2_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %82 = add(%81, %73) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %83 = nn.batch_norm(%82, %bn1_gamma, %bn1_beta, %bn1_moving_mean, %bn1_moving_var, epsilon=2e-05f) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;\n  %84 = %83.0 /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %85 = nn.relu(%84) /* ty=Tensor[(1, 512, 7, 7), float32] */;\n  %86 = nn.global_avg_pool2d(%85) /* ty=Tensor[(1, 512, 1, 1), float32] */;\n  %87 = nn.batch_flatten(%86) /* ty=Tensor[(1, 512), float32] */;\n  %88 = nn.dense(%87, %fc1_weight, units=1000) /* ty=Tensor[(1, 1000), float32] */;\n  %89 = nn.bias_add(%88, %fc1_bias, axis=-1) /* ty=Tensor[(1, 1000), float32] */;\n  nn.softmax(%89) /* ty=Tensor[(1, 1000), float32] */\n}\n'})}),"\n",(0,o.jsx)(t.h2,{id:"\u7F16\u8BD1",children:"\u7F16\u8BD1"}),"\n",(0,o.jsx)(t.p,{children:"\u4E0B\u4E00\u6B65\u662F\u7528 Relay/TVM \u7BA1\u9053\u7F16\u8BD1\u6A21\u578B\u3002\u7528\u6237\u53EF\u4EE5\u6307\u5B9A\u7F16\u8BD1\u7684\u4F18\u5316\u7EA7\u522B\uFF08\u76EE\u524D\u8FD9\u4E2A\u503C\u4E3A  0 \u5230 3\uFF09\u3002\u4F18\u5316 pass \u5305\u62EC\u7B97\u5B50\u878D\u5408\u3001\u9884\u8BA1\u7B97\u3001\u5E03\u5C40\u53D8\u6362\u7B49\u3002"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"relay.build()"})," \u8FD4\u56DE\u4E09\u4E2A\u7EC4\u4EF6\uFF1AJSON \u683C\u5F0F\u7684\u6267\u884C\u56FE\u3001\u76EE\u6807\u786C\u4EF6\u4E0A\u7F16\u8BD1\u6B64\u6267\u884C\u56FE\u7684\u51FD\u6570\u7EC4\u6210\u7684 TVM \u6A21\u5757\u5E93\uFF0C\u4EE5\u53CA\u6A21\u578B\u7684 blobs \u53C2\u6570\u3002\u5728\u7F16\u8BD1\u8FC7\u7A0B\u4E2D\uFF0CRelay \u8FDB\u884C\u56FE\u7EA7\u4F18\u5316\uFF0C\u800C TVM \u8FDB\u884C\u5F20\u91CF\u7EA7\u4F18\u5316\uFF0C\u4ECE\u800C\u4E3A\u6A21\u578B\u670D\u52A1\u63D0\u4F9B\u4F18\u5316\u7684 runtime \u6A21\u5757\u3002"]}),"\n",(0,o.jsxs)(t.p,{children:["\u9996\u5148\u4E3A NVIDIA GPU \u7F16\u8BD1\u3002\u5728\u8FD9\u4E2A\u8FC7\u7A0B\u4E2D\uFF0C",(0,o.jsx)(t.code,{children:"relay.build()"})," \u9996\u5148\u8FDB\u884C\u4E86\u4E00\u4E9B\u56FE\u7EA7\u4F18\u5316\uFF0C\u4F8B\u5982\u526A\u679D\u3001\u878D\u5408\u7B49\uFF0C\u7136\u540E\u5C06\u7B97\u5B50\uFF08\u5373\u4F18\u5316\u56FE\u7684\u8282\u70B9\uFF09\u6CE8\u518C\u5230 TVM \u7684\u5B9E\u73B0\uFF0C\u4ECE\u800C\u751F\u6210 ",(0,o.jsx)(t.em,{children:"tvm.module"}),"\u3002\u4E3A\u4E86\u751F\u6210\u6A21\u5757\u5E93\uFF0CTVM \u9996\u5148\u5C06\u9AD8\u7EA7 IR \u8F6C\u6362\u4E3A\u6307\u5B9A\u76EE\u6807\u540E\u7AEF\u7684\u5E95\u5C42\u56FA\u6709 IR\uFF0C\u672C\u4F8B\u4E3A CUDA\u3002\u7136\u540E\u751F\u6210\u7684\u673A\u5668\u7801\u5C06\u4F5C\u4E3A\u6A21\u5757\u5E93\u3002"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"opt_level = 3\ntarget = tvm.target.cuda()\nwith tvm.transform.PassContext(opt_level=opt_level):\n    lib = relay.build(mod, target, params=params)\n"})}),"\n",(0,o.jsx)(t.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"/workspace/python/tvm/target/target.py:377: UserWarning: Try specifying cuda arch by adding 'arch=sm_xx' to your target.\n  warnings.warn(\"Try specifying cuda arch by adding 'arch=sm_xx' to your target.\")\n/workspace/python/tvm/driver/build_module.py:268: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.\n  \"target_host parameter is going to be deprecated. \"\n"})}),"\n",(0,o.jsx)(t.h2,{id:"\u8FD0\u884C\u751F\u6210\u5E93",children:"\u8FD0\u884C\u751F\u6210\u5E93"}),"\n",(0,o.jsx)(t.p,{children:"\u521B\u5EFA\u56FE\u6267\u884C\u5668\uFF0C\u7136\u540E\u5728 NVIDIA GPU \u4E0A\u8FD0\u884C\u8BE5\u6A21\u5757\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# create random input\ndev = tvm.cuda()\ndata = np.random.uniform(-1, 1, size=data_shape).astype("float32")\n# create module\nmodule = graph_executor.GraphModule(lib["default"](dev))\n# set input and parameters\nmodule.set_input("data", data)\n# run\nmodule.run()\n# get output\nout = module.get_output(0, tvm.nd.empty(out_shape)).numpy()\n\n# Print first 10 elements of output\nprint(out.flatten()[0:10])\n'})}),"\n",(0,o.jsx)(t.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"[0.00089283 0.00103331 0.0009094  0.00102275 0.00108751 0.00106737\n 0.00106262 0.00095838 0.00110792 0.00113151]\n"})}),"\n",(0,o.jsx)(t.h2,{id:"\u4FDD\u5B58\u548C\u52A0\u8F7D\u7F16\u8BD1\u6A21\u5757",children:"\u4FDD\u5B58\u548C\u52A0\u8F7D\u7F16\u8BD1\u6A21\u5757"}),"\n",(0,o.jsx)(t.p,{children:"\u8FD8\u53EF\u5C06\u8BA1\u7B97\u56FE\u3001\u5E93\u548C\u53C2\u6570\u4FDD\u5B58\u5230\u6587\u4EF6\u4E2D\uFF0C\u7136\u540E\u5728\u90E8\u7F72\u73AF\u5883\u4E2D\u52A0\u8F7D\u3002"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# \u5206\u522B\u5C06\u8BA1\u7B97\u56FE\u3001\u5E93\u548C\u53C2\u6570\u4FDD\u5B58\u5230\u4E0D\u540C\u6587\u4EF6\nfrom tvm.contrib import utils\n\ntemp = utils.tempdir()\npath_lib = temp.relpath("deploy_lib.tar")\nlib.export_library(path_lib)\nprint(temp.listdir())\n'})}),"\n",(0,o.jsx)(t.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"['deploy_lib.tar']\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# \u91CD\u65B0\u52A0\u8F7D\u6A21\u5757\nloaded_lib = tvm.runtime.load_module(path_lib)\ninput_data = tvm.nd.array(data)\n\nmodule = graph_executor.GraphModule(loaded_lib["default"](dev))\nmodule.run(data=input_data)\nout_deploy = module.get_output(0).numpy()\n\n# \u6253\u5370\u8F93\u51FA\u7684\u524D\u5341\u4E2A\u5143\u7D20\nprint(out_deploy.flatten()[0:10])\n\n# \u68C0\u67E5\u6765\u81EA\u90E8\u7F72\u6A21\u5757\u7684\u8F93\u51FA\u548C\u539F\u59CB\u8F93\u51FA\u662F\u5426\u4E00\u81F4\ntvm.testing.assert_allclose(out_deploy, out, atol=1e-5)\n'})}),"\n",(0,o.jsx)(t.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"[0.00089283 0.00103331 0.0009094  0.00102275 0.00108751 0.00106737\n 0.00106262 0.00095838 0.00110792 0.00113151]\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://tvm.apache.org/docs/_downloads/cc6d9aebd24d54d81752590cbc8f99f9/relay_quick_start.py",children:"\u4E0B\u8F7D Python \u6E90\u4EE3\u7801\uFF1Arelay_quick_start.py"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://tvm.apache.org/docs/_downloads/3dd2108354ac3028c96bcd6a0c7899dd/relay_quick_start.ipynb",children:"\u4E0B\u8F7D Jupyter Notebook\uFF1Arelay_quick_start.ipynb"})})]})}function f(n={}){let{wrapper:t}={...(0,s.a)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(g,{...n})}):g(n)}},21494:function(n,t,e){e.d(t,{Z:function(){return _},a:function(){return r}});var a=e(39546);let o={},s=a.createContext(o);function r(n){let t=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function _(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),a.createElement(s.Provider,{value:t},n.children)}}}]);