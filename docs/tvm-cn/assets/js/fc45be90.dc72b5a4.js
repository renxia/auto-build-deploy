"use strict";(self.webpackChunktvm_cn=self.webpackChunktvm_cn||[]).push([["14838"],{53870:function(e,t,n){n.r(t),n.d(t,{default:()=>c,frontMatter:()=>i,metadata:()=>a,assets:()=>l,toc:()=>p,contentTitle:()=>s});var a=JSON.parse('{"id":"topic/vta/tutorials/deploy_mxnet","title":"\u5728 VTA \u4E0A\u90E8\u7F72\u6765\u81EA MxNet \u7684\u9884\u8BAD\u7EC3\u89C6\u89C9\u6A21\u578B","description":"\u5355\u51FB \u6B64\u5904 \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801","source":"@site/docs/topic/vta/tutorials/03-deploy_mxnet.md","sourceDirName":"topic/vta/tutorials","slug":"/topic/vta/tutorials/deploy_mxnet","permalink":"/docs/tvm-cn/docs/topic/vta/tutorials/deploy_mxnet","draft":false,"unlisted":false,"editUrl":"https://github.com/hyperai/tvm-cn/edit/master/docs/topic/vta/tutorials/03-deploy_mxnet.md","tags":[],"version":"current","lastUpdatedBy":"sparanoid","lastUpdatedAt":1744717810000,"sidebarPosition":3,"frontMatter":{"title":"\u5728 VTA \u4E0A\u90E8\u7F72\u6765\u81EA MxNet \u7684\u9884\u8BAD\u7EC3\u89C6\u89C9\u6A21\u578B"},"sidebar":"tutorialSidebar","previous":{"title":"VTA \u5165\u95E8","permalink":"/docs/tvm-cn/docs/topic/vta/tutorials/start_vta"},"next":{"title":"\u5728 VTA \u4E0A\u90E8\u7F72\u6765\u81EA Darknet \u7684\u9884\u8BAD\u7EC3\u89C6\u89C9\u68C0\u6D4B\u6A21\u578B","permalink":"/docs/tvm-cn/docs/topic/vta/tutorials/deploy_darknet"}}'),r=n("74132"),o=n("21494");let i={title:"\u5728 VTA \u4E0A\u90E8\u7F72\u6765\u81EA MxNet \u7684\u9884\u8BAD\u7EC3\u89C6\u89C9\u6A21\u578B"},s="\u5728 VTA \u4E0A\u90E8\u7F72\u6765\u81EA MxNet \u7684\u9884\u8BAD\u7EC3\u89C6\u89C9\u6A21\u578B",l={},p=[{value:"\u5B89\u88C5\u4F9D\u8D56",id:"\u5B89\u88C5\u4F9D\u8D56",level:2},{value:"\u5B9A\u4E49\u5E73\u53F0\u548C\u6A21\u578B targets",id:"\u5B9A\u4E49\u5E73\u53F0\u548C\u6A21\u578B-targets",level:2},{value:"\u83B7\u53D6\u8FDC\u7A0B\u6267\u884C",id:"\u83B7\u53D6\u8FDC\u7A0B\u6267\u884C",level:2},{value:"\u6784\u5EFA\u63A8\u7406\u56FE\u6267\u884C\u5668",id:"\u6784\u5EFA\u63A8\u7406\u56FE\u6267\u884C\u5668",level:2},{value:"\u6267\u884C\u56FE\u50CF\u5206\u7C7B\u63A8\u7406",id:"\u6267\u884C\u56FE\u50CF\u5206\u7C7B\u63A8\u7406",level:2}];function m(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"\u5728-vta-\u4E0A\u90E8\u7F72\u6765\u81EA-mxnet-\u7684\u9884\u8BAD\u7EC3\u89C6\u89C9\u6A21\u578B",children:"\u5728 VTA \u4E0A\u90E8\u7F72\u6765\u81EA MxNet \u7684\u9884\u8BAD\u7EC3\u89C6\u89C9\u6A21\u578B"})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["\u5355\u51FB ",(0,r.jsx)(t.a,{href:"https://tvm.apache.org/docs/topic/vta/tutorials/frontend/deploy_classification.html#sphx-glr-download-topic-vta-tutorials-frontend-deploy-classification-py",children:"\u6B64\u5904"})," \u4E0B\u8F7D\u5B8C\u6574\u7684\u793A\u4F8B\u4EE3\u7801"]})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"\u4F5C\u8005"}),"\uFF1A",(0,r.jsx)(t.a,{href:"https://homes.cs.washington.edu/~moreau/",children:"Thierry Moreau"})]}),"\n",(0,r.jsx)(t.p,{children:"\u672C\u6559\u7A0B\u63D0\u4F9B\u4E86\u4E00\u4E2A\u7AEF\u5230\u7AEF demo\uFF0C\u4ECB\u7ECD\u4E86\u5982\u4F55\u5728 VTA \u52A0\u901F\u5668\u8BBE\u8BA1\u4E0A\u8FD0\u884C ImageNet \u5206\u7C7B\u63A8\u7406\uFF0C\u6267\u884C ImageNet \u5206\u7C7B\u4EFB\u52A1\u3002\u5B83\u5C55\u793A\u4E86 Relay \u4F5C\u4E3A\u4E00\u4E2A\u524D\u7AEF\u7F16\u8BD1\u5668\uFF0C\u53EF\u4EE5\u6267\u884C\u91CF\u5316\uFF08VTA \u4EC5\u652F\u6301 int8/32 \u63A8\u7406\uFF09\u4EE5\u53CA\u8BA1\u7B97\u56FE\u6253\u5305\uFF08\u4E3A\u4E86\u5728 core \u4E2D\u542F\u7528\u5F20\u91CF\uFF09\uFF0C\u4ECE\u800C\u4E3A\u786C\u4EF6 target \u4FEE\u6539\u8BA1\u7B97\u56FE\u3002"}),"\n",(0,r.jsx)(t.h2,{id:"\u5B89\u88C5\u4F9D\u8D56",children:"\u5B89\u88C5\u4F9D\u8D56"}),"\n",(0,r.jsx)(t.p,{children:"\u8981\u5728 TVM \u4E2D\u4F7F\u7528 autotvm \u5305\uFF0C\u9700\u8981\u5B89\u88C5\u989D\u5916\u7684\u4F9D\u8D56\uFF08\u5982\u679C\u7528\u7684\u662F Python2\uFF0C\u8BF7\u5C06\u300C3\u300D\u66F4\u6539\u4E3A\u300C2\u300D\uFF09\uFF1A"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'pip3 install --user mxnet requests "Pillow<7"\n'})}),"\n",(0,r.jsx)(t.p,{children:"\u5728 Python \u4EE3\u7801\u4E2D\u5BFC\u5165\u5305\uFF1A"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from __future__ import absolute_import, print_function\n\nimport argparse, json, os, requests, sys, time\nfrom io import BytesIO\nfrom os.path import join, isfile\nfrom PIL import Image\n\nfrom mxnet.gluon.model_zoo import vision\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nimport tvm\nfrom tvm import te\nfrom tvm import rpc, autotvm, relay\nfrom tvm.contrib import graph_executor, utils, download\nfrom tvm.contrib.debugger import debug_executor\nfrom tvm.relay import transform\n\nimport vta\nfrom vta.testing import simulator\nfrom vta.top import graph_pack\n\n# \u786E\u4FDD TVM \u662F\u4F7F\u7528 RPC=1 \u7F16\u8BD1\u7684\nassert tvm.runtime.enabled("rpc")\n'})}),"\n",(0,r.jsx)(t.h2,{id:"\u5B9A\u4E49\u5E73\u53F0\u548C\u6A21\u578B-targets",children:"\u5B9A\u4E49\u5E73\u53F0\u548C\u6A21\u578B targets"}),"\n",(0,r.jsx)(t.p,{children:"\u5BF9\u6BD4\u5728 CPU \u4E0E VTA \u4E0A\u6267\u884C\uFF0C\u5E76\u5B9A\u4E49\u6A21\u578B\u3002"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# \u4ECE 3rdparty/vta-hw/config/vta_config.json \u6587\u4EF6\u52A0\u8F7D VTA \u53C2\u6570\nenv = vta.get_env()\n\n# \u8BBE\u7F6E ``device=arm_cpu`` \u5728 CPU \u4E0A\u8FD0\u884C\u63A8\u7406\n# \u8BBE\u7F6E ``device=vta`` \u5728 FPGA \u4E0A\u8FD0\u884C\u63A8\u7406\ndevice = "vta"\ntarget = env.target if device == "vta" else env.target_vta_cpu\n\n# \u67E5\u627E\u4F55\u65F6\u5F00\u59CB/\u7ED3\u675F\u4F4D\u6253\u5305\u7684\u5B57\u5178\npack_dict = {\n    "resnet18_v1": ["nn.max_pool2d", "nn.global_avg_pool2d"],\n    "resnet34_v1": ["nn.max_pool2d", "nn.global_avg_pool2d"],\n    "resnet18_v2": ["nn.max_pool2d", "nn.global_avg_pool2d"],\n    "resnet34_v2": ["nn.max_pool2d", "nn.global_avg_pool2d"],\n    "resnet50_v2": ["nn.max_pool2d", "nn.global_avg_pool2d"],\n    "resnet101_v2": ["nn.max_pool2d", "nn.global_avg_pool2d"],\n}\n\n# \u8981\u7F16\u8BD1\u7684 Gluon \u6A21\u578B\u7684\u540D\u79F0\n# ``start_pack`` \u548C ``stop_pack`` \u6807\u7B7E\u6307\u793A\u5728\u54EA\u91CC\n# \u5F00\u59CB\u548C\u7ED3\u675F\u8BA1\u7B97\u56FE\u6253\u5305 Relay pass\uFF1A\u6362\u8A00\u4E4B\uFF0C\n# \u4ECE\u54EA\u91CC\u5F00\u59CB\u548C\u5B8C\u6210\u8F6C\u79FB\u5230 VTA\u3002\nmodel = "resnet18_v1"\nassert model in pack_dict\n'})}),"\n",(0,r.jsx)(t.h2,{id:"\u83B7\u53D6\u8FDC\u7A0B\u6267\u884C",children:"\u83B7\u53D6\u8FDC\u7A0B\u6267\u884C"}),"\n",(0,r.jsx)(t.p,{children:"\u5F53 target \u662F\u300Cpynq\u300D\u65F6\uFF0C\u91CD\u65B0\u914D\u7F6E FPGA \u548C runtime\u3002\u82E5 target \u662F\u300Csim\u300D\uFF0C\u5219\u5728\u672C\u5730\u6267\u884C\u3002"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'if env.TARGET not in ["sim", "tsim", "intelfocl"]:\n    # \u82E5\u8BBE\u7F6E\u4E86\u73AF\u5883\u53D8\u91CF\uFF0C\u5219\u4ECE\u8DDF\u8E2A\u5668\u8282\u70B9\u83B7\u53D6\u8FDC\u7A0B\u3002\n    # \u8981\u8BBE\u7F6E\u8DDF\u8E2A\u5668\uFF0C\u53C2\u8003\u300C\u81EA\u52A8\u8C03\u4F18 VTA \u7684\u5377\u79EF\u7F51\u7EDC\u300D\u6559\u7A0B\u3002\n    tracker_host = os.environ.get("TVM_TRACKER_HOST", None)\n    tracker_port = os.environ.get("TVM_TRACKER_PORT", None)\n    # \u5426\u5219\uFF0C\u82E5\u6709\u4E00\u4E2A\u60F3\u76F4\u63A5\u4ECE\u4E3B\u673A\u7F16\u7A0B\u7684\u8BBE\u5907\uFF0C\n    # \u8BF7\u786E\u4FDD\u5DF2\u5C06\u4EE5\u4E0B\u53D8\u91CF\u8BBE\u7F6E\u4E3A\u4F60\u677F\u5B50\u7684 IP\n    device_host = os.environ.get("VTA_RPC_HOST", "192.168.2.99")\n    device_port = os.environ.get("VTA_RPC_PORT", "9091")\n    if not tracker_host or not tracker_port:\n        remote = rpc.connect(device_host, int(device_port))\n    else:\n        remote = autotvm.measure.request_remote(\n            env.TARGET, tracker_host, int(tracker_port), timeout=10000\n        )\n\n    # \u91CD\u65B0\u914D\u7F6E JIT runtime \u548C FPGA\u3002\n    # \u53EF\u4EE5\u901A\u8FC7\u4F20\u9012\u6BD4\u7279\u6D41\u6587\u4EF6\u7684\u8DEF\u5F84\u800C\u975E None\uFF0C\u7528\u81EA\u5B9A\u4E49\u6BD4\u7279\u6D41\u5BF9 FPGA \u8FDB\u884C\u7F16\u7A0B\n    reconfig_start = time.time()\n    vta.reconfig_runtime(remote)\n    vta.program_fpga(remote, bitstream=None)\n    reconfig_time = time.time() - reconfig_start\n    print("Reconfigured FPGA and RPC runtime in {0:.2f}s!".format(reconfig_time))\n\n# \u5728\u6A21\u62DF\u6A21\u5F0F\u4E0B\uFF0C\u672C\u5730\u6258\u7BA1 RPC \u670D\u52A1\u5668\u3002\nelse:\n    remote = rpc.LocalSession()\n\n    if env.TARGET in ["intelfocl"]:\n        # \u7F16\u5199 intelfocl aocx\n        vta.program_fpga(remote, bitstream="vta.bitstream")\n\n# \u4ECE\u8FDC\u7A0B\u83B7\u53D6\u6267\u884C\u4E0A\u4E0B\u6587\nctx = remote.ext_dev(0) if device == "vta" else remote.cpu(0)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"\u6784\u5EFA\u63A8\u7406\u56FE\u6267\u884C\u5668",children:"\u6784\u5EFA\u63A8\u7406\u56FE\u6267\u884C\u5668"}),"\n",(0,r.jsx)(t.p,{children:"\u4ECE Gluon model zoo \u9009\u53D6\u89C6\u89C9\u6A21\u578B\uFF0C\u5E76\u7528 Relay \u7F16\u8BD1\u3002\u7F16\u8BD1\u6B65\u9AA4\u5982\u4E0B\uFF1A"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"\u4ECE MxNet \u5230 Relay \u6A21\u5757\u7684\u524D\u7AEF\u8F6C\u6362\u3002"}),"\n",(0,r.jsx)(t.li,{children:"\u5E94\u7528 8 \u4F4D\u91CF\u5316\uFF1A\u8FD9\u91CC\u8DF3\u8FC7\u7B2C\u4E00\u4E2A conv \u5C42\u548C dense \u5C42\uFF0C\u5B83\u4EEC\u90FD\u5C06\u5728 CPU \u4E0A\u4EE5 fp32 \u6267\u884C\u3002"}),"\n",(0,r.jsx)(t.li,{children:"\u6267\u884C\u8BA1\u7B97\u56FE\u6253\u5305\uFF0C\u66F4\u6539\u5F20\u91CF\u5316\u7684\u6570\u636E\u5E03\u5C40\u3002"}),"\n",(0,r.jsx)(t.li,{children:"\u6267\u884C\u5E38\u91CF\u6298\u53E0\uFF0C\u51CF\u5C11\u7B97\u5B50\u7684\u6570\u91CF\uFF08\u4F8B\u5982\uFF0C\u6D88\u9664 batch norm multiply\uFF09\u3002"}),"\n",(0,r.jsx)(t.li,{children:"\u5BF9\u76EE\u6807\u6587\u4EF6\u6267\u884C Relay \u6784\u5EFA\u3002"}),"\n",(0,r.jsx)(t.li,{children:"\u5C06\u76EE\u6807\u6587\u4EF6\u52A0\u8F7D\u5230\u8FDC\u7A0B\uFF08FPGA \u8BBE\u5907\uFF09\u3002"}),"\n",(0,r.jsxs)(t.li,{children:["\u751F\u6210\u56FE\u6267\u884C\u5668 ",(0,r.jsx)(t.em,{children:"m"}),"\u3002"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# \u52A0\u8F7D\u9884\u5148\u914D\u7F6E\u7684 AutoTVM schedules\nwith autotvm.tophub.context(target):\n    # \u4E3A ImageNet \u5206\u7C7B\u5668\u8F93\u5165\u586B\u5145 shape \u548C\u6570\u636E\u7C7B\u578B\u5B57\u5178\n    dtype_dict = {"data": "float32"}\n    shape_dict = {"data": (env.BATCH, 3, 224, 224)}\n\n    # \u4E0B\u67B6 gluon \u6A21\u578B\uFF0C\u5E76\u8F6C\u6362\u4E3A Relay\n    gluon_model = vision.get_model(model, pretrained=True)\n\n    # \u6D4B\u8BD5\u6784\u5EFA\u5F00\u59CB\u65F6\u95F4\n    build_start = time.time()\n\n    # \u5F00\u59CB\u524D\u7AEF\u7F16\u8BD1\n    mod, params = relay.frontend.from_mxnet(gluon_model, shape_dict)\n\n    # \u66F4\u65B0 shape \u548C\u7C7B\u578B\u5B57\u5178\n    shape_dict.update({k: v.shape for k, v in params.items()})\n    dtype_dict.update({k: str(v.dtype) for k, v in params.items()})\n\n    if target.device_name == "vta":\n        # \u5728 Relay \u4E2D\u6267\u884C\u91CF\u5316\n        # \u6CE8\u610F\uFF1A\u5C06 opt_level \u8BBE\u7F6E\u4E3A 3 \uFF0C\u6298\u53E0 batch norm\n        with tvm.transform.PassContext(opt_level=3):\n            with relay.quantize.qconfig(global_scale=8.0, skip_conv_layers=[0]):\n                mod = relay.quantize.quantize(mod, params=params)\n            # \u5BF9 VTA \u76EE\u6807\u8FDB\u884C\u56FE\u6253\u5305\u548C\u5E38\u91CF\u6298\u53E0\n            assert env.BLOCK_IN == env.BLOCK_OUT\n            # \u82E5 target \u662F intelfocl \u6216 sim\uFF0C\u5219\u8FDB\u884C\u8BBE\u5907\u6CE8\u91CA\n            relay_prog = graph_pack(\n                mod["main"],\n                env.BATCH,\n                env.BLOCK_OUT,\n                env.WGT_WIDTH,\n                start_name=pack_dict[model][0],\n                stop_name=pack_dict[model][1],\n                device_annot=(env.TARGET == "intelfocl"),\n            )\n    else:\n        relay_prog = mod["main"]\n\n    # \u5728\u7981\u7528 AlterOpLayout \u7684\u60C5\u51B5\u4E0B\uFF0C\u7F16\u8BD1 Relay \u7A0B\u5E8F\n    if target.device_name != "vta":\n        with tvm.transform.PassContext(opt_level=3, disabled_pass={"AlterOpLayout"}):\n            graph, lib, params = relay.build(\n                relay_prog, target=tvm.target.Target(target, host=env.target_host), params=params\n            )\n    else:\n        if env.TARGET == "intelfocl":\n            # \u5728 cpu \u548C vta \u4E0A\u8FD0\u884C\u591A\u4E2A target\n            target = {"cpu": env.target_vta_cpu, "ext_dev": target}\n        with vta.build_config(\n            opt_level=3, disabled_pass={"AlterOpLayout", "tir.CommonSubexprElimTIR"}\n        ):\n            graph, lib, params = relay.build(\n                relay_prog, target=tvm.target.Target(target, host=env.target_host), params=params\n            )\n\n    # \u6D4B\u8BD5 Relay \u6784\u5EFA\u65F6\u95F4\n    build_time = time.time() - build_start\n    print(model + " inference graph built in {0:.2f}s!".format(build_time))\n\n    # \u5C06\u63A8\u7406\u5E93\u53D1\u9001\u5230\u8FDC\u7A0B RPC \u670D\u52A1\u5668\n    temp = utils.tempdir()\n    lib.export_library(temp.relpath("graphlib.tar"))\n    remote.upload(temp.relpath("graphlib.tar"))\n    lib = remote.load_module("graphlib.tar")\n\n    if env.TARGET == "intelfocl":\n        ctxes = [remote.ext_dev(0), remote.cpu(0)]\n        m = graph_executor.create(graph, lib, ctxes)\n    else:\n        # \u8BA1\u7B97\u56FE runtime\n        m = graph_executor.create(graph, lib, ctx)\n'})}),"\n",(0,r.jsx)(t.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'/workspace/python/tvm/driver/build_module.py:267: UserWarning: target_host parameter is going to be deprecated. Please pass in tvm.target.Target(target, host=target_host) instead.\n  "target_host parameter is going to be deprecated. "\n/workspace/python/tvm/relay/build_module.py:411: DeprecationWarning: Please use input parameter mod (tvm.IRModule) instead of deprecated parameter mod (tvm.relay.function.Function)\n  DeprecationWarning,\n/workspace/vta/tutorials/frontend/deploy_classification.py:213: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.\n  relay_prog, target=tvm.target.Target(target, host=env.target_host), params=params\nresnet18_v1 inference graph built in 22.98s!\n'})}),"\n",(0,r.jsx)(t.h2,{id:"\u6267\u884C\u56FE\u50CF\u5206\u7C7B\u63A8\u7406",children:"\u6267\u884C\u56FE\u50CF\u5206\u7C7B\u63A8\u7406"}),"\n",(0,r.jsxs)(t.p,{children:["\u5BF9\u6765\u81EA ImageNet \u7684\u56FE\u50CF\u6837\u672C\u8FDB\u884C\u5206\u7C7B\u3002\u53EA\u9700\u4E0B\u8F7D\u7C7B\u522B\u6587\u4EF6\u3001",(0,r.jsx)(t.em,{children:"synset.txt"})," \u548C\u8F93\u5165\u6D4B\u8BD5\u56FE\u50CF\u3002"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# \u4E0B\u8F7D ImageNet \u7C7B\u522B\ncateg_url = "https://github.com/uwsampl/web-data/raw/main/vta/models/"\ncateg_fn = "synset.txt"\ndownload.download(join(categ_url, categ_fn), categ_fn)\nsynset = eval(open(categ_fn).read())\n\n# \u4E0B\u8F7D\u6D4B\u8BD5\u56FE\u50CF\nimage_url = "https://homes.cs.washington.edu/~moreau/media/vta/cat.jpg"\nimage_fn = "cat.png"\ndownload.download(image_url, image_fn)\n\n# \u4E3A\u63A8\u7406\u51C6\u5907\u6D4B\u8BD5\u56FE\u50CF\nimage = Image.open(image_fn).resize((224, 224))\nplt.imshow(image)\nplt.show()\nimage = np.array(image) - np.array([123.0, 117.0, 104.0])\nimage /= np.array([58.395, 57.12, 57.375])\nimage = image.transpose((2, 0, 1))\nimage = image[np.newaxis, :]\nimage = np.repeat(image, env.BATCH, axis=0)\n\n# \u8BBE\u7F6E\u7F51\u7EDC\u53C2\u6570\u548C\u8F93\u5165\nm.set_input(**params)\nm.set_input("data", image)\n\n# \u6267\u884C\u63A8\u7406\uFF0C\u5E76\u6536\u96C6\u6267\u884C\u7EDF\u8BA1\u4FE1\u606F\n# \u66F4\u591A\u4FE1\u606F\uFF1A:py:method:`tvm.runtime.Module.time_evaluator`\nnum = 4  # \u4E3A\u5355\u4E2A\u6D4B\u8BD5\u8FD0\u884C\u6A21\u5757\u7684\u6B21\u6570\nrep = 3  # \u6D4B\u8BD5\u6B21\u6570\uFF08\u6211\u4EEC\u4ECE\u4E2D\u5F97\u51FA\u6807\u51C6\u5DEE\uFF09\ntimer = m.module.time_evaluator("run", ctx, number=num, repeat=rep)\n\nif env.TARGET in ["sim", "tsim"]:\n    simulator.clear_stats()\n    timer()\n    sim_stats = simulator.stats()\n    print("\\nExecution statistics:")\n    for k, v in sim_stats.items():\n        # \u7531\u4E8E\u591A\u6B21\u6267\u884C\u5DE5\u4F5C\u6D41\u7A0B\uFF0C\u9700\u8981\u5BF9\u7EDF\u8BA1\u6570\u636E\u5F52\u4E00\u5316\n        # \u6CE8\u610F\uFF0C\u603B\u6709\u4E00\u6B21\u9884\u8FD0\u884C\n        # \u56E0\u6B64\u5C06\u6574\u4F53\u7EDF\u8BA1\u6570\u636E\u9664\u4EE5 (num * rep + 1)\n        print("\\t{:<16}: {:>16}".format(k, v // (num * rep + 1)))\nelse:\n    tcost = timer()\n    std = np.std(tcost.results) * 1000\n    mean = tcost.mean * 1000\n    print("\\nPerformed inference in %.2fms (std = %.2f) for %d samples" % (mean, std, env.BATCH))\n    print("Average per sample inference time: %.2fms" % (mean / env.BATCH))\n\n# \u83B7\u53D6\u5206\u7C7B\u7ED3\u679C\ntvm_output = m.get_output(0, tvm.nd.empty((env.BATCH, 1000), "float32", remote.cpu(0)))\nfor b in range(env.BATCH):\n    top_categories = np.argsort(tvm_output.numpy()[b])\n    # \u62A5\u544A\u524D 5 \u4E2A\u5206\u7C7B\u7ED3\u679C\n    print("\\n{} prediction for sample {}".format(model, b))\n    print("\\t#1:", synset[top_categories[-1]])\n    print("\\t#2:", synset[top_categories[-2]])\n    print("\\t#3:", synset[top_categories[-3]])\n    print("\\t#4:", synset[top_categories[-4]])\n    print("\\t#5:", synset[top_categories[-5]])\n    # \u8FD9\u53EA\u68C0\u67E5\u524D 5 \u4E2A\u7C7B\u522B\u4E4B\u4E00\u662F\u4E00\u79CD\u732B\uFF1B\u8FD9\u7EDD\u4E0D\u662F\u6709\u5173\u91CF\u5316\u5982\u4F55\u5F71\u54CD\u5206\u7C7B\u51C6\u786E\u6027\u7684\u51C6\u786E\u8BC4\u4F30\uFF0C\u800C\u662F\u5728\u6355\u6349\u5BF9 CI \u51C6\u786E\u6027\u7684\u91CF\u5316 pass \u7684\u53D8\u5316\u3002\n    cat_detected = False\n    for k in top_categories[-5:]:\n        if "cat" in synset[k]:\n            cat_detected = True\n    assert cat_detected\n'})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://tvm.apache.org/docs/_images/sphx_glr_deploy_classification_001.png",alt:"deploy classification"})}),"\n",(0,r.jsx)(t.p,{children:"\u8F93\u51FA\u7ED3\u679C\uFF1A"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"Execution statistics:\n        inp_load_nbytes :          5549568\n        wgt_load_nbytes :         12763136\n        acc_load_nbytes :          6051840\n        uop_load_nbytes :            22864\n        out_store_nbytes:          2433536\n        gemm_counter    :          6623232\n        alu_counter     :           699328\n\nresnet18_v1 prediction for sample 0\n        #1: tiger cat\n        #2: Egyptian cat\n        #3: tabby, tabby cat\n        #4: lynx, catamount\n        #5: weasel\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://tvm.apache.org/docs/_downloads/9e8de33a5822b31748bfd76861009f92/deploy_classification.py",children:"\u4E0B\u8F7D Python \u6E90\u4EE3\u7801\uFF1Adeploy_classification.py"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://tvm.apache.org/docs/_downloads/95395e118195f25266654dd8fbf487d4/deploy_classification.ipynb",children:"\u4E0B\u8F7D Jupyter Notebook\uFF1Adeploy_classification.ipynb"})})]})}function c(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},21494:function(e,t,n){n.d(t,{Z:function(){return s},a:function(){return i}});var a=n(39546);let r={},o=a.createContext(r);function i(e){let t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);